{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A: Introduction to Probability\"\n",
        "subtitle: \"Lecture 5 - Conditional Probability, Independence & Bayes Theorem\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: today\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data - Introduction to Probability © 2025 Narjes Mathlouthi\"\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Today's Learning Objectives {#sec-objectives .smaller}\n",
        "\n",
        "By the end of this lecture, you will be able to:\n",
        "\n",
        "- [Define probability and understand its basic properties](#sec-prob)\n",
        "- [Identify sample spaces and events](#sample-space)\n",
        "- [Apply fundamental probability rules](#set-operations-overview)\n",
        "- [Calculate conditional probabilities](#conditional-probability)\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 1 {.smaller}\n",
        "::: {.columns}\n",
        "::: {.column width=\"70\"}\n",
        "::: {.example}\n",
        ":::{.smaller}\n",
        "A standard deck has 52 cards. What is the probability of drawing:\n",
        "\n",
        "a) A heart $\\heartsuit$?\n",
        "b) A face card (Jack, Queen, King)?\n",
        "c) The ace of spades $\\spadesuit$?\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/cards.png)\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "::: {.column width=\"30\"}\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "\n",
        "a) $P(\\text{heart}) = \\frac{13}{52} = \\frac{1}{4}$\n",
        "\n",
        "b) $P(\\text{face card}) = \\frac{12}{52} = \\frac{3}{13}$\n",
        "\n",
        "c) $P(\\text{ace of spades}) = \\frac{1}{52}$\n",
        ":::\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Addition Rule {.smaller}\n",
        "\n",
        "For any two events $A$ and $B$:\n",
        "\n",
        "::: {.formula-box}\n",
        "$$P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$$\n",
        ":::\n",
        "\n",
        ":::{.example}\n",
        "*Why subtract $P(A \\cap B)$?*\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "We don't want to double-count outcomes that are in both events\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Addition Rule Example {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        ":::{.smaller}\n",
        ":::{.example}\n",
        "Drawing from a standard deck:\n",
        "\n",
        "- $A$: Drawing a heart $\\heartsuit$ ($P(A) = \\frac{13}{52}$)\n",
        "  \n",
        "- $B$: Drawing a face card ($P(B) = \\frac{12}{52}$)\n",
        "  \n",
        "- **What's $P(A \\cup B)$ (heart OR face card)?**\n",
        "\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/cards.png)\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n"
      ],
      "id": "d7a699f2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "plt.figure(figsize=(6,4))\n",
        "v = venn2(subsets=(10, 9, 3))\n",
        "v.get_label_by_id('10').set_text('A: Hearts')\n",
        "v.get_label_by_id('01').set_text('B: Face Cards')\n",
        "v.get_label_by_id('11').set_text('A ∩ B')\n",
        "plt.title('Hearts vs. Face Cards')\n",
        "plt.show()"
      ],
      "id": "4d217e4e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n"
      ],
      "id": "c0c40717"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Compute region sizes\n",
        "only_hearts = 13 - 3\n",
        "only_face = 12 - 3\n",
        "intersection = 3\n",
        "\n",
        "plt.figure(figsize=(6,4))\n",
        "venn2(subsets=(only_hearts, only_face, intersection), set_labels=('Hearts', 'Face Cards'))\n",
        "plt.title('Hearts vs. Face Cards')\n",
        "plt.show()"
      ],
      "id": "ef663203",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "$P(A \\cap B) = \\frac{3}{52}$ (face cards that are hearts)\n",
        "\n",
        "$P(A \\cup B) = \\frac{13}{52} + \\frac{12}{52} - \\frac{3}{52} = \\frac{22}{52} = \\frac{11}{26}$\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Conditional Probability\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "\n",
        "::: {.definition}\n",
        ":::{.smaller}\n",
        "**🎯Conditional probability** is the probability of event $A$ given that event $B$ has occurred\n",
        "\n",
        "$$P(A|B) = \\frac{P(A \\cap B)}{P(B)}$$\n",
        "\n",
        "provided $P(B) > 0$\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.column} \n"
      ],
      "id": "dd2b528e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define colors and edge style\n",
        "color_intersection = '#1f77b4'  # blue\n",
        "color_B = '#ff7f0e'             # orange\n",
        "edge_color = 'black'\n",
        "linewidth = 2\n",
        "text_fontsize = 20\n",
        "label_fontsize = 20\n",
        "title_fontsize = 20\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
        "\n",
        "# --- First plot: Intersection Only ---\n",
        "v1 = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    ax=axes[0],\n",
        "    subset_label_formatter=lambda x: ''\n",
        ")\n",
        "# Style regions\n",
        "for region in ('10', '01'):\n",
        "    patch = v1.get_patch_by_id(region)\n",
        "    patch.set_facecolor('none')\n",
        "    patch.set_edgecolor(edge_color)\n",
        "    patch.set_linewidth(linewidth)\n",
        "patch_int1 = v1.get_patch_by_id('11')\n",
        "patch_int1.set_facecolor(color_intersection)\n",
        "patch_int1.set_alpha(0.5)\n",
        "patch_int1.set_edgecolor(edge_color)\n",
        "patch_int1.set_linewidth(linewidth)\n",
        "# Increase label font sizes\n",
        "v1.get_label_by_id('A').set_fontsize(label_fontsize)\n",
        "v1.get_label_by_id('B').set_fontsize(label_fontsize)\n",
        "# Add bolded P(A∩B) text\n",
        "x_int, y_int = v1.get_label_by_id('11').get_position()\n",
        "axes[0].text(x_int, y_int, r'$\\mathbf{P(A\\cap B)}$', \n",
        "             ha='center', va='center', fontsize=text_fontsize)\n",
        "axes[0].set_title('Intersection Only', fontsize=title_fontsize)\n",
        "\n",
        "# --- Second plot: B Only (including intersection) ---\n",
        "v2 = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    ax=axes[1],\n",
        "    subset_label_formatter=lambda x: ''\n",
        ")\n",
        "# Style regions\n",
        "patch_A2 = v2.get_patch_by_id('10')\n",
        "patch_A2.set_facecolor('none')\n",
        "patch_A2.set_edgecolor(edge_color)\n",
        "patch_A2.set_linewidth(linewidth)\n",
        "for region in ('01', '11'):\n",
        "    patch = v2.get_patch_by_id(region)\n",
        "    patch.set_facecolor(color_B)\n",
        "    patch.set_alpha(0.5)\n",
        "    patch.set_edgecolor(edge_color)\n",
        "    patch.set_linewidth(linewidth)\n",
        "# Increase label font sizes\n",
        "v2.get_label_by_id('A').set_fontsize(label_fontsize)\n",
        "v2.get_label_by_id('B').set_fontsize(label_fontsize)\n",
        "# Add bolded B text inside B circle\n",
        "x_B, y_B = v2.get_label_by_id('01').get_position()\n",
        "axes[1].text(x_B, y_B, r'$\\mathbf{B}$', \n",
        "             ha='center', va='center', fontsize=text_fontsize)\n",
        "axes[1].set_title('B Only', fontsize=title_fontsize)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "9a2b2480",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Conditional Probability Interpretation\n",
        "\n",
        "$P(A|B)$ means:\n",
        "\n",
        "- We know event <u><b> $B$ has occurred </u></b>\n",
        "  \n",
        "- What's the probability that $A$ also occurred?\n",
        "  \n",
        "- We \"restrict\" our sample space to only outcomes in $B$\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/con_prob_2.png)\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Conditional Probability Example {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        ":::{.example}\n",
        "Drawing a card from a standard deck:\n",
        "\n",
        "- $A$: Card is a heart $\\heartsuit$\n",
        "  \n",
        "- $B$: Card is red\n",
        "  \n",
        "- **Q: Find $P(A|B)$**\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/cards.png)\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n"
      ],
      "id": "b9660e13"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "plt.figure(figsize=(6,4))\n",
        "v = venn2(subsets=(13, 13, 0))\n",
        "v.get_label_by_id('10').set_text('A: Hearts')\n",
        "v.get_label_by_id('01').set_text('B: Red Cards')\n",
        "plt.title('Hearts vs. Red Cards')\n",
        "plt.show()"
      ],
      "id": "28386cdf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "$P(A \\cap B) = P(\\text{heart}) = \\frac{13}{52}$\n",
        "\n",
        "$P(B) = P(\\text{red}) = \\frac{26}{52}$\n",
        "\n",
        "$P(A|B) = \\frac{13/52}{26/52} = \\frac{13}{26} = \\frac{1}{2}$\n",
        ":::\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Independence {.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "::: {.definition}\n",
        "**🎯 Definition**\n",
        "Events $A$ and $B$ are **independent** if:\n",
        "\n",
        "$$P(A|B) = P(A)$$\n",
        "\n",
        "or equivalently:\n",
        "\n",
        "$$P(A \\cap B) = P(A) \\times P(B)$$\n",
        ":::\n",
        ":::{.fragment}\n",
        "*Knowing that $B$ occurred doesn't change the probability of $A$*\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}"
      ],
      "id": "570ac6b9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define probabilities for independent events\n",
        "P_A = 0.4\n",
        "P_B = 0.5\n",
        "P_AB = P_A * P_B  # 0.2\n",
        "\n",
        "# Subset sizes: only A, only B, intersection\n",
        "subsets = (P_A - P_AB, P_B - P_AB, P_AB)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 6))\n",
        "v = venn2(subsets=subsets, set_labels=('A', 'B'), ax=ax)\n",
        "\n",
        "# Style regions\n",
        "v.get_patch_by_id('10').set_color('skyblue')    # A only\n",
        "v.get_patch_by_id('10').set_alpha(0.5)\n",
        "v.get_patch_by_id('01').set_color('lightgreen') # B only\n",
        "v.get_patch_by_id('01').set_alpha(0.5)\n",
        "v.get_patch_by_id('11').set_color('orange')     # Intersection\n",
        "v.get_patch_by_id('11').set_alpha(0.7)\n",
        "\n",
        "# Annotate margins and intersection inside\n",
        "v.get_label_by_id('10').set_text(f'{subsets[0]:.1f}')\n",
        "v.get_label_by_id('01').set_text(f'{subsets[1]:.1f}')\n",
        "v.get_label_by_id('11').set_text(f'{subsets[2]:.1f}')\n",
        "\n",
        "# Print P(A) and P(B) to the sides\n",
        "ax.text(-0.8, 0.6, f'$P(A)={P_A}$', fontsize=14, fontweight='bold')\n",
        "ax.text(0.8, 0.6, f'$P(B)={P_B}$', fontsize=14, fontweight='bold')\n",
        "\n",
        "plt.title('Independent Events\\n$P(A\\\\cap B)=P(A)P(B)$', fontsize=16)\n",
        "ax.axis('equal')\n",
        "plt.show()"
      ],
      "id": "51b4e014",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Independence Example{.smaller}\n",
        "\n",
        ":::{.example}\n",
        "Two coin flips:\n",
        "\n",
        "- $A$: First flip is heads\n",
        "  \n",
        "- $B$: Second flip is heads\n",
        "\n",
        "**Q: Are $A$ and $B$ independent?**\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "$P(A) = \\frac{1}{2}$, $P(B) = \\frac{1}{2}$\n",
        "\n",
        "$P(A \\cap B) = P(\\text{HH}) = \\frac{1}{4}$\n",
        "\n",
        "$P(A) \\times P(B) = \\frac{1}{2} \\times \\frac{1}{2} = \\frac{1}{4}$\n",
        "\n",
        "Yes, they are independent!\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Mutually Exclusive vs. Independent {.smaller}\n",
        "\n",
        "- **Mutually Exclusive (left):** the circles A and B do not overlap, so $P(A\\cap B)=0$.\n",
        "\n",
        "- **Independent (right):** the circles overlap, and we’ve sized the intersection so that $P(A\\cap B)=P(A)\\,P(B)$.\n"
      ],
      "id": "66d193b2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create side-by-side Venn diagrams\n",
        "fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
        "\n",
        "# 1) Mutually Exclusive: no overlap\n",
        "venn2(\n",
        "    subsets=(1, 1, 0),\n",
        "    set_labels=('A', 'B'),\n",
        "    ax=axes[0],\n",
        "    subset_label_formatter=lambda x: ''\n",
        ")\n",
        "axes[0].set_title('Mutually Exclusive\\nP(A∩B) = 0')\n",
        "\n",
        "# 2) Independent: overlap equals product of areas (e.g., 0.5 * 0.5 = 0.25)\n",
        "# Scale counts arbitrarily (25, 25, 25) to represent proportions\n",
        "venn2(\n",
        "    subsets=(25, 25, 25),\n",
        "    set_labels=('A', 'B'),\n",
        "    ax=axes[1],\n",
        "    subset_label_formatter=lambda x: ''\n",
        ")\n",
        "axes[1].set_title('Independent\\nP(A∩B) = P(A)P(B)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "eeb2bae1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Mutually Exclusive vs. Independent Example {.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        ":::{.example}\n",
        "Draw a single card from a 52-card deck:\n",
        "\n",
        "- Let A={“draw an Ace”}, so P(A)=4/52.\n",
        "\n",
        "- Let B={“draw a King”}, so P(B)=4/52.\n",
        "\n",
        "**Q: What is $P(A\\cap B)$ ?**\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/cards.png)\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        "\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "They’re disjoint (you can’t draw an Ace and a King), so\n",
        "$P(A\\cap B) = 0$.\n",
        "\n",
        "But\n",
        "$P(A)\\,P(B) = \\frac{4}{52}\\times\\frac{4}{52} = \\frac{16}{2704} \\neq 0$.\n",
        "\n",
        "Hence, $P(A\\cap B)\\neq P(A)P(B)$, so they’re not independent.\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "___\n",
        "\n",
        "## Multiplication Rule\n",
        "\n",
        "**General case**: $P(A \\cap B) = P(A) \\times P(B|A)$\n",
        "\n",
        "**Independent events**: $P(A \\cap B) = P(A) \\times P(B)$\n"
      ],
      "id": "7253e858"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define scaled subset sizes for illustration\n",
        "# General case: P(A)=40 (10+30), P(B|A)=0.75 so intersection=30, B-only=20 (if P(B)=50)\n",
        "# Independent case: P(A)=40, P(B)=50, intersection=P(A)*P(B)=20\n",
        "general_subsets = (10, 20, 30)   # (A-only, B-only, intersection)\n",
        "indep_subsets = (20, 30, 20)\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
        "\n",
        "# --- General Multiplication Rule ---\n",
        "venn2(subsets=general_subsets, set_labels=('A', 'B'), ax=axes[0])\n",
        "axes[0].set_title('General: P(A∩B) = P(A)·P(B|A)', fontsize=14)\n",
        "\n",
        "# --- Independent Events ---\n",
        "venn2(subsets=indep_subsets, set_labels=('A', 'B'), ax=axes[1])\n",
        "axes[1].set_title('Independent: P(A∩B) = P(A)·P(B)', fontsize=14)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "58bfd9b2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Tree Diagrams{.smaller}\n",
        "\n",
        "::: {.definition}\n",
        "**🎯 Definition**\n",
        "Tree diagrams help visualize sequential events and calculate probabilities.\n",
        ":::\n"
      ],
      "id": "1942f2bf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Circle, FancyArrowPatch\n",
        "\n",
        "# Coordinates for nodes\n",
        "coords = {\n",
        "    'root': (0.1, 0.5),\n",
        "    'A': (0.4, 0.7),\n",
        "    'B': (0.4, 0.3),\n",
        "    'A_Red': (0.7, 0.8),\n",
        "    'A_Blue': (0.7, 0.6),\n",
        "    'B_Red': (0.7, 0.4),\n",
        "    'B_Blue': (0.7, 0.2),\n",
        "}\n",
        "\n",
        "# Probabilities\n",
        "p_A = 0.7\n",
        "p_B = 0.3\n",
        "p_R_A = 0.6\n",
        "p_B_A = 0.4\n",
        "p_R_B = 0.3\n",
        "p_B_B = 0.7\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "ax.set_xlim(0, 1)\n",
        "ax.set_ylim(0, 1)\n",
        "ax.axis('off')\n",
        "\n",
        "# Draw nodes\n",
        "for node, (x, y) in coords.items():\n",
        "    circle = Circle((x, y), 0.05, edgecolor='black', facecolor='white', linewidth=2)\n",
        "    ax.add_patch(circle)\n",
        "    label = node.replace('_', '\\n')\n",
        "    if node == 'root':\n",
        "        label = 'Start'\n",
        "    ax.text(x, y, label, ha='center', va='center', fontsize=12, fontweight='bold')\n",
        "\n",
        "# Draw arrows and annotate probabilities\n",
        "def draw_branch(start, end, text):\n",
        "    x1, y1 = coords[start]\n",
        "    x2, y2 = coords[end]\n",
        "    arrow = FancyArrowPatch((x1+0.05, y1), (x2-0.05, y2), arrowstyle='->', mutation_scale=20)\n",
        "    ax.add_patch(arrow)\n",
        "    ax.text((x1+x2)/2, (y1+y2)/2, text, fontsize=12, backgroundcolor='white', ha='center')\n",
        "\n",
        "draw_branch('root', 'A', f'{p_A}')\n",
        "draw_branch('root', 'B', f'{p_B}')\n",
        "draw_branch('A', 'A_Red', f'{p_R_A}')\n",
        "draw_branch('A', 'A_Blue', f'{p_B_A}')\n",
        "draw_branch('B', 'B_Red', f'{p_R_B}')\n",
        "draw_branch('B', 'B_Blue', f'{p_B_B}')\n",
        "\n",
        "# Title\n",
        "ax.set_title('Tree Diagram: Drawing from Urn A (70%) or B (30%)', fontsize=14, pad=20)\n",
        "\n",
        "plt.show()"
      ],
      "id": "d9fe7ba3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Tree Diagram Examples {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column}\n"
      ],
      "id": "bcc07dae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Circle, FancyArrowPatch\n",
        "\n",
        "# Coordinates for nodes in the full tree\n",
        "coords = {\n",
        "    'root':       (0.1, 0.5),\n",
        "    'A':          (0.35, 0.75),\n",
        "    'NotA':       (0.35, 0.25),\n",
        "    'A_B':        (0.7, 0.8),\n",
        "    'A_notB':     (0.7, 0.65),\n",
        "    'NotA_B':     (0.7, 0.35),\n",
        "    'NotA_notB':  (0.7, 0.2)\n",
        "}\n",
        "\n",
        "# Probabilities (example values)\n",
        "pA     = 0.4\n",
        "pNotA  = 0.6\n",
        "pB_A   = 0.75\n",
        "pNotB_A= 0.25\n",
        "pB_notA= 0.333\n",
        "pNotB_notA=0.667\n",
        "\n",
        "# Colors\n",
        "color_intersection = '#1f77b4'  # blue\n",
        "color_B            = '#ff7f0e'  # orange\n",
        "gray               = 'lightgray'\n",
        "\n",
        "def draw_tree(highlight_branches, branch_color, node_to_color):\n",
        "    fig, ax = plt.subplots(figsize=(6, 4))\n",
        "    ax.set_xlim(0, 1)\n",
        "    ax.set_ylim(0, 1)\n",
        "    ax.axis('off')\n",
        "\n",
        "    # Draw nodes\n",
        "    node_patches = {}\n",
        "    for node, (x, y) in coords.items():\n",
        "        circ = Circle((x, y), 0.035, edgecolor='black', facecolor='white', lw=2)\n",
        "        ax.add_patch(circ)\n",
        "        node_patches[node] = circ\n",
        "        label = {\n",
        "            'root': 'Start',\n",
        "            'A': 'A',\n",
        "            'NotA': '¬A',\n",
        "            'A_B': 'B',\n",
        "            'A_notB': '¬B',\n",
        "            'NotA_B': 'B',\n",
        "            'NotA_notB': '¬B'\n",
        "        }[node]\n",
        "        ax.text(x, y, label, ha='center', va='center', fontsize=12)\n",
        "\n",
        "    # Function to draw a branch\n",
        "    def draw_branch(start, end, text, color, lw=1.5):\n",
        "        x1, y1 = coords[start]\n",
        "        x2, y2 = coords[end]\n",
        "        arr = FancyArrowPatch((x1+0.035, y1), (x2-0.035, y2),\n",
        "                              arrowstyle='-|>', mutation_scale=15,\n",
        "                              lw=lw, color=color)\n",
        "        ax.add_patch(arr)\n",
        "        ax.text((x1+x2)/2, (y1+y2)/2, text, ha='center', va='center',\n",
        "                backgroundcolor='white', fontsize=10)\n",
        "\n",
        "    # Draw all branches in gray\n",
        "    branches = [\n",
        "        ('root','A', f'{pA}'),\n",
        "        ('root','NotA', f'{pNotA}'),\n",
        "        ('A','A_B', f'{pB_A}'),\n",
        "        ('A','A_notB', f'{pNotB_A}'),\n",
        "        ('NotA','NotA_B', f'{pB_notA:.3f}'),\n",
        "        ('NotA','NotA_notB', f'{pNotB_notA:.3f}')\n",
        "    ]\n",
        "    for b in branches:\n",
        "        draw_branch(*b, color=gray)\n",
        "\n",
        "    # Highlight requested branches\n",
        "    for b in highlight_branches:\n",
        "        # find text label for branch\n",
        "        prob = {\n",
        "            ('root','A'): f'{pA}',\n",
        "            ('root','NotA'): f'{pNotA}',\n",
        "            ('A','A_B'): f'{pB_A}',\n",
        "            ('A','A_notB'): f'{pNotB_A}',\n",
        "            ('NotA','NotA_B'): f'{pB_notA:.3f}',\n",
        "            ('NotA','NotA_notB'): f'{pNotB_notA:.3f}'\n",
        "        }[b]\n",
        "        draw_branch(b[0], b[1], prob, color=branch_color, lw=3)\n",
        "    \n",
        "    # Color the end-node if desired\n",
        "    for node in node_to_color:\n",
        "        node_patches[node].set_facecolor(branch_color)\n",
        "\n",
        "    return fig, ax\n",
        "\n",
        "# Tree 1: highlight only the intersection branch root->A->A_B in blue\n",
        "fig1, ax1 = draw_tree(highlight_branches=[('root','A'),('A','A_B')],\n",
        "                      branch_color=color_intersection,\n",
        "                      node_to_color=['A_B'])\n",
        "ax1.set_title('Intersection Only (P(A∩B))', fontsize=14)\n",
        "plt.show()\n"
      ],
      "id": "a3cdf029",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::{.column }"
      ],
      "id": "126e7487"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Tree 2: highlight both B branches (A->B and ¬A->B) in orange\n",
        "fig2, ax2 = draw_tree(highlight_branches=[('root','A'),('A','A_B'),\n",
        "                                          ('root','NotA'),('NotA','NotA_B')],\n",
        "                      branch_color=color_B,\n",
        "                      node_to_color=['A_B','NotA_B'])\n",
        "ax2.set_title('Event B Only (P(B))', fontsize=14)\n",
        "plt.show()"
      ],
      "id": "d5d0c2bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Practice Problem 2{.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        ":::{.example}\n",
        "A jar contains 5 red balls and 3 blue balls. Two balls are drawn **without replacement**.\n",
        "\n",
        "a) What's the probability both balls are red?\n",
        "\n",
        "b) What's the probability the first is red and second is blue?\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        ":::{.fragment}\n"
      ],
      "id": "7c00eb56"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Circle\n",
        "from matplotlib.lines import Line2D\n",
        "\n",
        "# Set up figure\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "ax.axis('off')\n",
        "\n",
        "# Node positions\n",
        "positions = {\n",
        "    'root': (0.1, 0.5),\n",
        "    'R': (0.35, 0.7),\n",
        "    'B': (0.35, 0.3),\n",
        "    'RR': (0.7, 0.8),\n",
        "    'RB': (0.7, 0.6),\n",
        "    'BR': (0.7, 0.4),\n",
        "    'BB': (0.7, 0.2),\n",
        "}\n",
        "\n",
        "# Define colors\n",
        "color_root = '#ecf0f1'\n",
        "color_R = '#e74c3c'       # red for R or RR\n",
        "color_B = '#3498db'       # blue for B or BB\n",
        "color_mixed = '#ff7f0e'   # orange for mixed (RB, BR)\n",
        "edge_color = 'black'\n",
        "linewidth = 2\n",
        "text_fs = 12\n",
        "\n",
        "# Draw nodes with colored backgrounds and bold labels\n",
        "node_colors = {\n",
        "    'root': color_root,\n",
        "    'R': color_R,\n",
        "    'B': color_B,\n",
        "    'RR': color_R,\n",
        "    'RB': color_mixed,\n",
        "    'BR': color_mixed,\n",
        "    'BB': color_B\n",
        "}\n",
        "\n",
        "for name, (x, y) in positions.items():\n",
        "    circ = Circle((x, y), 0.05, facecolor=node_colors[name],\n",
        "                  edgecolor=edge_color, linewidth=linewidth, zorder=2)\n",
        "    ax.add_patch(circ)\n",
        "    ax.text(x, y, name, ha='center', va='center', fontsize=text_fs, fontweight='bold', zorder=3)\n",
        "\n",
        "# Function to draw an arrow and label\n",
        "def draw_arrow(src, dst, label):\n",
        "    x1, y1 = positions[src]\n",
        "    x2, y2 = positions[dst]\n",
        "    ax.annotate('', xy=(x2-0.05, y2), xytext=(x1+0.05, y1),\n",
        "                arrowprops=dict(arrowstyle='->', color=node_colors[dst], lw=linewidth), zorder=1)\n",
        "    ax.text((x1+x2)/2, (y1+y2)/2, label, ha='center', va='center',\n",
        "            backgroundcolor='white', fontsize=text_fs, fontweight='bold', zorder=3)\n",
        "\n",
        "# Draw branches with probabilities\n",
        "draw_arrow('root', 'R', '5/8')\n",
        "draw_arrow('root', 'B', '3/8')\n",
        "draw_arrow('R', 'RR', '4/7')\n",
        "draw_arrow('R', 'RB', '3/7')\n",
        "draw_arrow('B', 'BR', '5/7')\n",
        "draw_arrow('B', 'BB', '2/7')\n",
        "\n",
        "# Label leaves with final probabilities in bold\n",
        "leaf_probs = {\n",
        "    'RR': '20/56',\n",
        "    'RB': '15/56',\n",
        "    'BR': '15/56',\n",
        "    'BB': '6/56'\n",
        "}\n",
        "for leaf, prob in leaf_probs.items():\n",
        "    x, y = positions[leaf]\n",
        "    ax.text(x+0.12, y, prob, ha='left', va='center', fontsize=text_fs, fontweight='bold')\n",
        "\n",
        "# Legend\n",
        "legend_elements = [\n",
        "    Line2D([0], [0], marker='o', color='w', label='RR / R',\n",
        "           markerfacecolor=color_R, markersize=12, markeredgecolor=edge_color),\n",
        "    Line2D([0], [0], marker='o', color='w', label='BB / B',\n",
        "           markerfacecolor=color_B, markersize=12, markeredgecolor=edge_color),\n",
        "    Line2D([0], [0], marker='o', color='w', label='RB / BR',\n",
        "           markerfacecolor=color_mixed, markersize=12, markeredgecolor=edge_color),\n",
        "]\n",
        "ax.legend(handles=legend_elements, loc='upper left', bbox_to_anchor=(0.02, 0.95))\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "f2596b9c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.solution}\n",
        "a) $P(\\text{both red}) = \\frac{5}{8} \\times \\frac{4}{7} = \\frac{20}{56} = \\frac{5}{14}$\n",
        "\n",
        "b) $P(\\text{red then blue}) = \\frac{5}{8} \\times \\frac{3}{7} = \\frac{15}{56}$\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Law of Total Probability {.smaller}\n",
        "\n",
        ":::{.definition}\n",
        "**🎯 Definition**\n",
        "\n",
        "If events $B_1, B_2, \\ldots, B_n$ form a partition of the sample space, then:\n",
        "\n",
        "$$P(A) = P(A|B_1)P(B_1) + P(A|B_2)P(B_2) + \\cdots + P(A|B_n)P(B_n)$$\n",
        ":::"
      ],
      "id": "3d3f76d4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Circle, Ellipse, Rectangle\n",
        "\n",
        "# Example probabilities\n",
        "P_B = [0.3, 0.5, 0.2]\n",
        "P_A_given_B = [0.2, 0.6, 0.5]\n",
        "P_A_and_B = [P_B[i] * P_A_given_B[i] for i in range(3)]\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(9, 5))\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "# Draw sample space rectangle\n",
        "rect = Rectangle((-1, -2), width=8, height=4, edgecolor='black', facecolor='none', linewidth=2)\n",
        "ax.add_patch(rect)\n",
        "ax.text(-0.9, 1.7, r'$\\Omega$', fontsize=14, fontweight='bold', va='top', ha='left')\n",
        "\n",
        "# Draw B partitions as circles\n",
        "positions_B = [(1, 0), (3, 0), (5, 0)]\n",
        "colors_B = ['#ffcc00', '#ff6600', '#ff0066']\n",
        "\n",
        "for i, (x, y) in enumerate(positions_B):\n",
        "    circle = Circle((x, y), radius=1, facecolor=colors_B[i], edgecolor='black', alpha=0.3)\n",
        "    ax.add_patch(circle)\n",
        "    ax.text(x, y-1.3, f'$P(B_{i+1})={P_B[i]:.2f}$', ha='center', va='center', fontsize=12, fontweight='bold')\n",
        "\n",
        "# Draw A as a large ellipse overlapping all B's\n",
        "ellipse = Ellipse((3, 0), width=8, height=3, angle=0, facecolor='#1f77b4', edgecolor='black', alpha=0.2)\n",
        "ax.add_patch(ellipse)\n",
        "ax.text(3, 1.2, '$A$', ha='center', va='center', fontsize=14, fontweight='bold')\n",
        "\n",
        "# Annotate intersections P(A ∩ Bi)\n",
        "for i, (x, y) in enumerate(positions_B):\n",
        "    ax.text(x, 0, f'$P(A\\\\cap B_{i+1})={P_A_and_B[i]:.2f}$', ha='center', va='center', fontsize=12, color='black', fontweight='bold')\n",
        "\n",
        "ax.set_xlim(-1, 7)\n",
        "ax.set_ylim(-2, 2)\n",
        "plt.show()"
      ],
      "id": "9100ff40",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "\n",
        "## Law of Total Probability Example{.smaller}\n",
        "\n",
        ":::{.example}\n",
        "\n",
        "A factory has two machines:\n",
        "\n",
        "- Machine 1: Produces 60% of items, 5% defective\n",
        "  \n",
        "- Machine 2: Produces 40% of items, 3% defective\n",
        "\n",
        "**Q: What's the overall probability an item is defective?**\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "\n",
        "$P(\\text{defective}) = P(D|M_1)P(M_1) + P(D|M_2)P(M_2)$ \n",
        "\n",
        "$= 0.05 \\times 0.6 + 0.03 \\times 0.4 = 0.03 + 0.012 = 0.042$\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Bayes' Theorem\n",
        "\n",
        "::: {.definition}\n",
        "**🎯 Definition**\n",
        "$$P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$$\n",
        "\n",
        "This allows us to \"reverse\" conditional probabilities\n",
        "\n",
        "*Named after Thomas Bayes (1701-1761)*\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/bayes.gif){width=\"200\" fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Bayes' Theorem Components\n",
        "\n",
        "- $A,B$: **Events**\n",
        "- $P(A|B)$: **Posterior probability** - what we want to find\n",
        "- $P(B|A)$: **Likelihood** - given $A$, probability of observing $B$\n",
        "- $P(A)$: **Prior probability** - initial probability of $A$\n",
        "- $P(B)$: **Marginal probability** - total probability of $B$\n",
        "\n",
        "---\n",
        "\n",
        "## Bayes' Theorem Example {.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column width =\"40%\"}\n",
        ":::{.example}\n",
        "**Medical test for a disease:** ^[$P(\\neg D \\,\\wedge\\, \\text{Negative})\n",
        "\\;=\\;P(\\neg D)\\times P(\\text{Negative}\\mid \\neg D)\n",
        "\\;=\\;0.99\\times0.90\n",
        "\\;=\\;0.891\\;(89.1\\%)$]\n",
        "\n",
        "- Disease affects 1% of population\n",
        "  \n",
        "- Test is 95% accurate for sick people\n",
        "  \n",
        "- Test is 90% accurate for healthy people\n",
        "\n",
        "\n",
        "\n",
        "**Q:If someone tests positive, what's the probability they have the disease?**\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column width=\"60%\"}\n"
      ],
      "id": "c8c1eb5a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Given probabilities\n",
        "P_D = 0.01\n",
        "P_notD = 0.99\n",
        "P_pos_given_D = 0.95\n",
        "P_pos_given_notD = 0.10\n",
        "\n",
        "# Joint probabilities\n",
        "P_D_and_pos = P_D * P_pos_given_D       # True positives\n",
        "P_notD_and_pos = P_notD * P_pos_given_notD  # False positives\n",
        "P_D_and_neg = P_D * (1 - P_pos_given_D)     # False negatives\n",
        "P_notD_and_neg = P_notD * (1 - P_pos_given_notD)  # True negatives\n",
        "\n",
        "# Prepare DataFrame for treemap (mosaic)\n",
        "df = pd.DataFrame({\n",
        "    'Test Result': ['Positive', 'Positive', 'Negative', 'Negative'],\n",
        "    'Condition':   ['Disease',   'No Disease', 'Disease',   'No Disease'],\n",
        "    'Probability': [P_D_and_pos, P_notD_and_pos, P_D_and_neg, P_notD_and_neg]\n",
        "})\n",
        "\n",
        "# Create treemap mosaic plot\n",
        "fig = px.treemap(\n",
        "    df,\n",
        "    path=['Test Result', 'Condition'],\n",
        "    values='Probability',\n",
        "    color='Condition',\n",
        "    color_discrete_map={'Disease':'tomato', 'No Disease':'skyblue'}\n",
        ")\n",
        "fig.update_traces(textinfo='label+percent entry')\n",
        "fig.update_layout(\n",
        "    title='Bayes’ Theorem: Distribution by Test Result and Condition',\n",
        "    margin=dict(t=50, l=25, r=25, b=25)\n",
        ")\n",
        "fig.show()"
      ],
      "id": "0607bb62",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Bayes' Theorem Solution {.smaller}\n",
        "\n",
        "Let:\n",
        "\n",
        "- $D$: Person has disease\n",
        "  \n",
        "- $T^+$: Test is positive\n",
        "\n",
        "Given:\n",
        "\n",
        "- $P(D) = 0.01$\n",
        "  \n",
        "- $P(T^+|D) = 0.95$\n",
        "  \n",
        "- $P(T^-|D^c) = 0.90$, so $P(T^+|D^c) = 0.10$\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "$P(T^+) = P(T^+|D)P(D) + P(T^+|D^c)P(D^c)$\n",
        "\n",
        "$= 0.95 \\times 0.01 + 0.10 \\times 0.99 = 0.1085$\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Bayes' Theorem Solution (cont.) {.smaller}\n",
        "\n",
        "$$P(D|T^+) = \\frac{P(T^+|D) \\times P(D)}{P(T^+)} = \\frac{0.95 \\times 0.01}{0.1085} \\approx 0.088$$\n"
      ],
      "id": "ecbe9bc7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Posterior probabilities given a positive test\n",
        "P_D_and_pos = 0.0095\n",
        "P_notD_and_pos = 0.099\n",
        "P_positive = P_D_and_pos + P_notD_and_pos\n",
        "\n",
        "P_D_given_pos = P_D_and_pos / P_positive\n",
        "P_notD_given_pos = P_notD_and_pos / P_positive\n",
        "\n",
        "# Pie chart\n",
        "labels = ['Disease (P≈8.8%)', 'No Disease (P≈91.2%)']\n",
        "sizes = [P_D_given_pos, P_notD_given_pos]\n",
        "colors = ['tomato', 'skyblue']\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 6))\n",
        "ax.pie(\n",
        "    sizes, labels=labels, colors=colors, autopct='%.1f%%',\n",
        "    startangle=90, textprops={'fontsize': 14, 'fontweight': 'bold'}\n",
        ")\n",
        "ax.set_title('Posterior Probability Given Positive Test', fontsize=16, fontweight='bold')\n",
        "ax.axis('equal')  # Equal aspect ensures pie is circular.\n",
        "plt.show()"
      ],
      "id": "a6e5e74c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.fragment}\n",
        ":::{.note}\n",
        "**Surprising result**: Even with a positive test, there's only an 8.8% chance of having the disease!\n",
        "\n",
        "*This is due to the low base rate of the disease*\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Common Probability Mistakes {.smaller}\n",
        "\n",
        "- **Confusing $P(A|B)$ with $P(B|A)$**\n",
        "   \n",
        ":::{.note}\n",
        "[Prosecutor's fallacy](https://en.wikipedia.org/wiki/Base_rate_fallacy) is a specific error in interpreting conditional probabilities.\n",
        "Confusing \n",
        "\n",
        "$P(\\text{Evidence}\\mid\\text{Innocent})\n",
        "\\quad\\text{with}\\quad\n",
        "P(\\text{Innocent}\\mid\\text{Evidence})$. \n",
        "\n",
        "Ex: OJ Simpson Case ^[the DNA evidence in the O. J. Simpson trial are a classic example of the prosecutor’s fallacy.  Prosecutors highlighted that the chance of a random person matching the crime-scene DNA was “one in 170 million,” then implied (or let the jury infer) that Simpson therefore had a 1 in 170 million chance of being innocent.]\n",
        ":::\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Common Probability Mistakes {.smaller}\n",
        "\n",
        "-  **Assuming independence when events are dependent**\n",
        "\n",
        "-  **Ignoring base rates** (as in the medical test example)\n",
        "\n",
        ":::{.note}\n",
        "[Base rate fallacy](https://en.wikipedia.org/wiki/Base_rate_fallacy) is when you ignore or underweight the prior probability $P(H)$ of a hypothesis, focusing only on the new evidence $E$.\n",
        ":::\n",
        "\n",
        "-  **Double counting in union calculations**\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 3 {.smaller}\n",
        ":::{.example}\n",
        "Two fair dice are rolled. Find:\n",
        "\n",
        "a) $P(\\text{sum} = 7)$\n",
        "b) $P(\\text{sum} = 7 | \\text{first die shows 3})$\n",
        "c) Are these events independent?\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "a) 6 ways out of 36: $P(\\text{sum} = 7) = \\frac{6}{36} = \\frac{1}{6}$\n",
        "\n",
        "b) Given first die is 3, need second die to be 4: $P(\\text{sum} = 7 | \\text{first} = 3) = \\frac{1}{6}$\n",
        "\n",
        "c) Yes, they're independent since $P(A|B) = P(A)$\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Real-World Applications\n",
        "\n",
        "**Medical Diagnosis**: Using Bayes' theorem for test interpretation\n",
        "\n",
        "**Quality Control**: Probability of defective items\n",
        "\n",
        "**Finance**: Risk assessment and portfolio theory\n",
        "\n",
        "**Sports**: Probability of wins, fantasy sports\n",
        "\n",
        "**Insurance**: Calculating premiums based on risk\n",
        "\n",
        "---\n",
        "\n",
        "## Key Formulas Summary\n",
        "\n",
        ":::{.formula-box}\n",
        "- **Basic probability**: $P(A) = \\frac{\\text{favorable outcomes}}{\\text{total outcomes}}$\n",
        "- **Complement**: $P(A^c) = 1 - P(A)$\n",
        "- **Addition**: $P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$\n",
        "- **Conditional**: $P(A|B) = \\frac{P(A \\cap B)}{P(B)}$\n",
        "- **Independence**: $P(A \\cap B) = P(A) \\times P(B)$\n",
        "- **Bayes'**: $P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Problem-Solving Strategy\n",
        "\n",
        ":::{.note}\n",
        "1. **Identify** the sample space and events\n",
        "2. **Determine** if events are independent or mutually exclusive\n",
        "3. **Choose** the appropriate rule or formula\n",
        "4. **Calculate** step by step\n",
        "5. **Check** if your answer makes sense\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Common Questions {.smaller}\n",
        "\n",
        ":::{.example}\n",
        "**Q1.**: **\"Why isn't $P(A \\cup B) = P(A) + P(B)$ always?\"**\n",
        "\n",
        "**A**: We'd double-count outcomes in both events\n",
        "\n",
        "**Q2.**: **\"How do I know if events are independent?\"**\n",
        "\n",
        "**A**: Check if $P(A|B) = P(A)$ or if $P(A \\cap B) = P(A) \\times P(B)$\n",
        "\n",
        "**Q3.**: **\"When do I use Bayes' theorem?\"**\n",
        "\n",
        "**A**: When you want to \"reverse\" a conditional probability\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.note}\n",
        "*Q3 note (Bayes Example)*\n",
        "\n",
        "- Forward: I know my test picks up disease 95% of the time ⇒ $P(+\\mid D)=0.95$.\n",
        "\n",
        "- Reverse: I want the chance I really have the disease when the test is positive ⇒ $P(D\\mid +)$.\n",
        ":::\n",
        "---\n",
        "\n",
        "\n",
        "## Looking Ahead\n",
        "\n",
        "**Next lecture**: \n",
        "\n",
        "- Counting\n",
        "\n",
        "- Random Variables and Probability Distributions\n",
        "  \n",
        "- Discrete vs. continuous random variables\n",
        "  \n",
        "- Expected value and variance\n",
        "  \n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Final Thoughts\n",
        "\n",
        ":::{.note}\n",
        "Probability is the foundation of statistics:\n",
        "\n",
        "- Helps us quantify uncertainty\n",
        "  \n",
        "- Provides tools for making decisions with incomplete information\n",
        "  \n",
        "- Essential for understanding statistical inference\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        "**Practice**: The key to mastering probability is working through many problems!\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Questions? {.center}\n",
        "\n",
        "**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)\n",
        "\n",
        "**Email**: nmathlouthi@ucsb.edu\n",
        "\n",
        "**Next Class**: Conditional Probability & Bayes Theorem\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Resources\n",
        "\n",
        "- [Read Chapter 3 in course textbook]((/files/Book/os4_for_screen_reader.pdf))\n",
        "  \n",
        "- [Elements of Set Theory for Probability](https://bookdown.org/daniel_flores_agreda/Prob1-GSEM-UNIGE/settheory.html#the-venn-diagram)\n",
        "\n",
        "- [Probability Models and Axioms](https://ocw.mit.edu/courses/res-6-012-introduction-to-probability-spring-2018/resources/mitres_6_012s18_l01as/)\n",
        "\n",
        "- [Interactive Set Theory & Conditional Probability](https://seeing-theory.brown.edu/compound-probability/index.html)"
      ],
      "id": "390ef043"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}