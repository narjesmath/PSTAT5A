---
title: "PSTAT 5A: Introduction to Probability"
subtitle: "Lecture 4: Fundamentals of Probability, Rules , Axioms & Properties"
author: "Narjes Mathlouthi"
date: 07/01/2025
format: 
  revealjs:
    logo: /img/logo.png
    theme: default
    css: /files/lecture_notes/theme/lecture-styles.css
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: "Understanding Data - Introduction to Probability ¬© 2025 Narjes Mathlouthi"
    transition: slide
    background-transition: fade
jupyter: python3
---

## Today's Learning Objectives {#sec-objectives .smaller}

By the end of this lecture, you will be able to:

- [Define probability and understand its basic properties](#sec-prob)
- [Identify sample spaces and events](#sample-space)
- [Apply fundamental probability rules](#set-operations-overview)

---

## What is Probability? {#sec-prob}

::: {.concept-box}
#### üéØ Definition
**Probability** is a measure of the likelihood that an event will occur
:::

---

## Probability Range {.smaller}
:::{.columns}
:::{.column width="40%"}
- Ranges from **0 to 1** (or **0% to 100%**)
  
- **0**: Event will never occur (impossible)
  
- **1**: Event will certainly occur (certain)
  
- **0.5**: Event has equal chance of occurring or not
:::

:::{.column width="60%"}
:::{.fragment}

![](/files/lecture_notes/lecture4/img/prob.png){fig-align="right"}
:::


:::
:::
  
## Three Ways to Express Probability

- **Fraction**: $\frac{1}{2}$, $\frac{3}{4}$, $\frac{2}{6}$
- **Decimal**: 0.5, 0.75, 0.33
- **Percentage**: 50%, 75%, 33%







---



## Example

When we roll a die, there are six possible outcomes:

1, 2, 3, 4, 5, 6.

The probability of any of them turning up is 1/6 or 16%.

![](/files/lecture_notes/lecture4/img/die.png){width="80%" fig-align="right" }

## Why Study Probability?{.smaller}

Probability helps us:

- Make decisions under uncertainty
- Understand random processes
- Analyze data and draw conclusions
- Model real-world phenomena
- Assess risk and likelihood

:::{.fragment}
:::{.note}
*Applications*: Weather forecasting, medical diagnosis, finance, quality control, gaming, insurance
:::
:::

---

## Random Experiments {.smaller}

A **random experiment** is a process that:

1. Can be repeated under similar conditions
2. Has multiple possible outcomes
3. The outcome cannot be predicted with certainty

:::{.fragment}
:::{.example}
**Examples**

- ü™ô Flipping a coin
  
- üé≤ Rolling a die
  
- üÉè Drawing a card from a deck
  
- üí° Measuring the lifetime of a light bulb
:::
:::

---

## Sample Space

::: {.definition}
**üéØ Definition**
The **sample space** (denoted $S$ or $\Omega$) is the **set** of all possible outcomes of a random experiment
:::

```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# Create a blank canvas with a rectangle representing the sample space
fig, ax = plt.subplots(figsize=(6, 4))
rect = patches.Rectangle(
    (0.1, 0.1), 0.8, 0.8,
    linewidth=3, edgecolor='black', facecolor='none'
)
ax.add_patch(rect)

# Label the sample space inside the rectangle
ax.text(0.5, 0.88, r'$\Omega$', fontsize=24, fontweight='bold', ha='center', va='top')
ax.text(0.5, 0.5, 'All possible outcomes', fontsize=14, ha='center')

# Clean up axes
ax.set_xticks([])
ax.set_yticks([])
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.axis('off')

plt.title('Sample Space (Œ©)', fontsize=16, pad=20)
plt.show()


```

---

## Sample Space Examples

- Coin flip: $S = \{H, T\}$
- Two coin flips: $S = \{HH, HT, TH, TT\}$
  
![](/files/lecture_notes/lecture4/img/coin.png){width="80%" fig-align="right" } 

---

- üé≤ Die roll: $S = \{1, 2, 3, 4, 5, 6\}$
- Two die rolls
  ![](/files/lecture_notes/lecture4/img/die_rolls.png){width="80%" fig-align="right" }

---

- $S = \{A\heartsuit,\ 2\heartsuit,\ \dots,\ K\heartsuit,\\
\phantom{S = \{}A\diamondsuit,\ 2\diamondsuit,\ \dots,\ K\diamondsuit,\\
\phantom{S = \{}A\clubsuit,\ 2\clubsuit,\ \dots,\ K\clubsuit,\\
\phantom{S = \{}A\spadesuit,\ 2\spadesuit,\ \dots,\ K\spadesuit\}$

![](/files/lecture_notes/lecture4/img/card_deck.png){width="80%" }

---

## Types of Sample Spaces{.smaller}

:::{.columns}
:::{.column width="50%"}
**Finite Sample Space**

- Limited number of outcomes  
  - Example: Rolling a die


:::
:::{.column width="50%"}
![](/files/lecture_notes/lecture4/img/ss_die.png){width="100%" fig-align="right"}
:::
:::

:::{.columns}
:::{.column width="50%"}
**Infinite Sample Space** 

- Unlimited outcomes (countable or uncountable)  
  - Example: Measuring exact height of students

:::
:::{.column width="50%"}
![](/files/lecture_notes/lecture4/img/inf.jpg){width="70%" fig-align="right"}
:::
:::

---

## Events {.smaller}

:::{.definition}
**üéØ Definition**
An **event** is a subset of the sample space

- **Simple event**: Contains exactly one outcome (Ex: $A = \{3\}$ (rolling a 3))
  
- **Compound event**: Contains multiple outcomes (Ex: $B = \{2, 4, 6\}$ (rolling an even number))
:::


```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.lines as mlines

# Coordinates and styling
outcomes = list(range(1, 7))
y = 0.5
radius = 0.3
dot_y = y
fig, ax = plt.subplots(figsize=(8, 4))
ax.axis('off')

# Rectangle bounds to fit all circles
min_x = min(outcomes) - radius
max_x = max(outcomes) + radius
min_y = dot_y - radius
max_y = dot_y + radius
rect = patches.Rectangle((min_x, min_y), max_x-min_x, max_y-min_y,
                         linewidth=2, edgecolor='black', facecolor='none')
ax.add_patch(rect)

# Label the sample space inside
ax.text((min_x+max_x)/2, max_y + 0.05, r'$\Omega$', fontsize=20, fontweight='bold', ha='center')

# Plot all outcomes marked by gray crosses
ax.scatter(outcomes, [dot_y]*6, s=200, color='gray', marker='x', linewidths=3, zorder=2)

# Highlight simple event {3} in red
circle_simple = patches.Circle((3, dot_y), radius, facecolor='red', alpha=0.3,
                               edgecolor='black', linewidth=2, zorder=1)
ax.add_patch(circle_simple)

# Highlight compound event {2,4,6} in blue
for x in [2, 4, 6]:
    circle = patches.Circle((x, dot_y), radius, facecolor='blue', alpha=0.3,
                            edgecolor='black', linewidth=2, zorder=1)
    ax.add_patch(circle)

# Legend for events
legend_handles = [
    mlines.Line2D([], [], color='red', marker='o', linestyle='None',
                  markersize=15, label='Simple event {3}', alpha=0.3),
    mlines.Line2D([], [], color='blue', marker='o', linestyle='None',
                  markersize=15, label='Compound event {2,4,6}', alpha=0.3)
]
ax.legend(handles=legend_handles, loc='lower center', ncol=2, frameon=False, bbox_to_anchor=(0.5, -0.3))

# Adjust limits
ax.set_xlim(min_x - 0.5, max_x + 0.5)
ax.set_ylim(min_y - 0.2, max_y + 0.2)

plt.title('Sample Space and Events', fontsize=16, pad=20)
plt.show()


```


---

## Event Notation

For a die roll with $S = \{1, 2, 3, 4, 5, 6\}$:

- $A = \{1, 3, 5\}$ (rolling an odd number)
- $B = \{4, 5, 6\}$ (rolling 4 or higher)
- $C = \{6\}$ (rolling a six)

![](/files/lecture_notes/lecture4/img/die.png){width="100%" fig-align="right" }

:::{.fragment}
*We can describe events in words or using set notation*
:::

---

## Set Operations Overview{.smaller}



:::: {.columns}

::: {.column width="60%"}

::: {.definition}
:::{.smaller}
**üéØ Definition:**

- **Set**: Collection of distinct objects
- **Union**: A OR B occurs  
- **Intersection**: A AND B occurs
- **Complement**: A does NOT occur
- **Sample Space**: All possible outcomes
:::
:::
:::

::: {.column width="40%"}
```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

fig, ax = plt.subplots(figsize=(6, 4))

# 1) Draw the Venn, but format subset labels to be blank
v = venn2(
    subsets=(1, 1, 1),
    set_labels=('A', 'B'),
    ax=ax,
    subset_label_formatter=lambda x: ""     # removes the "1" labels
)

# 2) Color each region (optional)
v.get_patch_by_id('10').set_color('lightblue')
v.get_patch_by_id('01').set_color('lightcoral')
v.get_patch_by_id('11').set_color('lightgreen')

# 3) Add a dashed universe rectangle around S, with high z‚Äêorder
rect = patches.Rectangle(
    (-1, -1),    # lower‚Äêleft corner
    2, 2,        # width, height
    linewidth=2,
    edgecolor='black',
    facecolor='none',
    linestyle='--',
    zorder=10     # put on top of the circles
)
ax.add_patch(rect)

# 4) Label the universe "S"
ax.text(-.95,  0.95, 'S', fontsize=14, fontweight='bold',
        va='top', ha='left', zorder=11)

# 5) Tidy up
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.set_axis_off()

plt.title('Sample Space $S$ with Events $A$ and $B$')
plt.show()
```
:::

::::

---

## What is a Set?

:::: {.columns}

::: {.column width="60%"}
::: {.definition}
:::{.smaller}
**üéØ Definition:**
A collection of things that share common characteristics. They can be elements, members, objects or similar terms.

**Examples:**

- Set of even numbers: 
  - {2, 4, 6, 8, ...}
  
- Set of vowels: {a, e, i, o, u}
:::
:::
:::

::: {.column width="40%"}
```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

# Create the figure and axes
fig, ax = plt.subplots(figsize=(6, 4))

# Draw the Venn with no default set labels and blank subset labels
v = venn2(
    subsets=(1, 0, 0),
    set_labels=('', ''),                       # no set labels
    subset_label_formatter=lambda x: "",       # hide subset‚Äêsize labels
    ax=ax
)

# Color and shade the A region
patch = v.get_patch_by_id('10')
patch.set_color('lightblue')
patch.set_alpha(0.7)

# Add the dashed universe rectangle for S
rect = patches.Rectangle(
    (-1, -1),   # lower‚Äêleft corner
    2,          # width
    2,          # height
    linewidth=2,
    edgecolor='black',
    facecolor='none',
    linestyle='--',
    zorder=2     # above the circles
)
ax.add_patch(rect)

# Label the universe "S"
ax.text(
    -0.95, 0.95, 'S',
    fontsize=14, fontweight='bold',
    va='top', ha='left',
    zorder=3
)

# Label set A inside the circle
ax.text(
    0, 0, 'SET A',
    fontsize=14, fontweight='bold',
    ha='center',
    zorder=3
)

# Adjust limits and styling
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

plt.title('A Single Set $A$ within Sample Space $S$')
plt.show()
```
:::

::::

---

## Union: A ‚à™ B

:::: {.columns}

::: {.column width="70%"}
::: {.definition}
:::{.smaller}
**üéØ Definition:**
Contains all set elements, including intersections.

**In Probability:**
The event that A **OR** B occurs (or both).

:::{.formula-box}
$$P(A \cup B) = P(A) + P(B) - P(A \cap B)$$
:::
:::
:::
:::


::: {.column width="30%"}
```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

# Create figure and axes
fig, ax = plt.subplots(figsize=(6, 6))

# Draw Venn without default numeric labels
v = venn2(
    subsets=(1, 1, 1),
    set_labels=('A', 'B'),
    subset_label_formatter=lambda x: "",
    ax=ax
)

# Fill entire circles for A and B with semi-transparent colors
for region in ('10', '11'):  # parts of A
    patch = v.get_patch_by_id(region)
    patch.set_facecolor('skyblue')
    patch.set_alpha(0.5)
    patch.set_edgecolor('black')
    patch.set_linewidth(2)
for region in ('01', '11'):  # parts of B
    patch = v.get_patch_by_id(region)
    patch.set_facecolor('lightcoral')
    patch.set_alpha(0.5)
    patch.set_edgecolor('black')
    patch.set_linewidth(2)

# Union label at center
ax.text(
    0, 0, r'$\mathbf{A \cup B}$',
    fontsize=18, fontweight='bold', ha='center', va='center'
)

# Add the universe rectangle (sample space)
rect = patches.Rectangle(
    (-1.1, -1.1), 2.2, 2.2,
    linewidth=2, edgecolor='black', facecolor='none', linestyle='--'
)
ax.add_patch(rect)

# Label the universe "Œ©"
ax.text(
    -1.05, 1.05, 'Œ©',
    fontsize=16, fontweight='bold', va='top', ha='left'
)

# Increase set label font size
v.get_label_by_id('A').set_fontsize(14)
v.get_label_by_id('B').set_fontsize(14)

# Title and styling
ax.set_title('Union of Events: $A \\cup B$', fontsize=16, pad=20)
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

plt.show()
```
:::

::::

---

## Intersection: A ‚à© B

:::: {.columns}

::: {.column width="60%"}
::: {.definition}
:::{.smaller}
**üéØ Definition:**
Area where two or more sets overlap.

**In Probability:**
The event that A **AND** B occurs.

**Properties:**

- Always smaller than or equal to individual sets
  
- Can be empty (disjoint sets)
:::
:::
:::

::: {.column width="40%"}
```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

# Create figure and axes
fig, ax = plt.subplots(figsize=(6, 4))

# Draw Venn without subset‚Äêsize labels
v = venn2(
    subsets=(1, 1, 1),
    set_labels=('A', 'B'),
    subset_label_formatter=lambda x: "",  # hide the "1" labels
    ax=ax
)

# Shade the non‚Äêintersection regions light gray
for region in ('10', '01'):
    patch = v.get_patch_by_id(region)
    patch.set_color('lightgray')
    patch.set_alpha(0.8)

# Shade the intersection region red
patch = v.get_patch_by_id('11')
patch.set_color('red')
patch.set_alpha(0.8)

# Add the universe rectangle
rect = patches.Rectangle(
    (-1, -1),    # lower‚Äêleft corner
    2,           # width
    2,           # height
    linewidth=2,
    edgecolor='black',
    facecolor='none',
    linestyle='--',
    zorder=2      # above circles
)
ax.add_patch(rect)

# Label the universe "S"
ax.text(
    -0.95, 0.95, 'S',
    fontsize=14, fontweight='bold',
    va='top', ha='left',
    zorder=3
)

# Label the intersection inside
ax.text(
    0, 0, 'A ‚à© B',
    fontsize=14, fontweight='bold',
    ha='center', va='center',
    zorder=3
)

# Tidy up
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

plt.title('Intersection: $A \\cap B$ (A AND B)')
plt.show()
```
:::

::::

---

## Absolute Complement: $A^c$

:::: {.columns}

::: {.column width="60%"}

::: {.definition}
**üéØ Definition:**
All elements that do not belong to the set.

**In Probability:**
The event that A does **NOT** occur.
  
- $P(A^c) = 1 - P(A)$

**Key Property:**

:::{.formula-box}
$A \cup A^c = S$ (Sample Space)
:::
:::
:::

::: {.column width="40%"}
```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2, venn2_circles

# 1) Create figure and axes
fig, ax = plt.subplots(figsize=(6, 4))

# 2) Draw the universe rectangle (purple background)
rect = patches.Rectangle(
    (-1, -1),  # lower-left corner
    2, 2,      # width, height
    linewidth=2,
    edgecolor='black',
    facecolor='purple',
    alpha=0.3,
    zorder=1
)
ax.add_patch(rect)

# 3) Draw Venn diagram with blank subset labels
v = venn2(
    subsets=(1, 1, 1),
    set_labels=('A', 'B'),
    subset_label_formatter=lambda x: "",
    ax=ax
)

# 4) Mask out A (both A‚Äêonly and intersection) with white
for region in ('10', '11'):
    p = v.get_patch_by_id(region)
    p.set_facecolor('white')
    p.set_edgecolor('none')
    p.set_alpha(1)

# 5) Hide the B‚Äêonly region so purple shows through
p_b = v.get_patch_by_id('01')
p_b.set_facecolor('none')
p_b.set_edgecolor('none')
p_b.set_alpha(1)

# 6) Draw crisp circle outlines on top
venn2_circles((1, 1, 1), ax=ax, linestyle='solid', linewidth=2, color='black')

# 7) Label universe and complement
ax.text(-0.95, 0.95, 'S', fontsize=14, fontweight='bold', va='top', ha='left', zorder=3)
ax.text(-.6, 0.75, r'$A^c$', fontsize=14, fontweight='bold', ha='center', va='center', zorder=3)

# 8) Final styling
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')
plt.title('Complement: $A^c$ (NOT A)')
plt.show()
```
:::

::::

---

## Summary Table

| Operation   | Symbol       | Meaning                     | Probability                             |
|:-----------------|:----------------:|:--------------------------------|:--------------------------------------------|
| **Union**        | $A \cup B$       | Occurs if $A$ *or* $B$          | $P(A \cup B) = P(A) + P(B) - P(A \cap B)$   |
| **Intersection** | $A \cap B$       | Occurs if $A$ *and* $B$         | $P(A \cap B)$                               |
| **Complement**   | $A^c$            | Occurs if $A$ *does **not*** occur | $P(A^c) = 1 - P(A)$                       |


## Probability Axioms: Commutative {.smaller}

::: {.formula-box}
**Commutative**

$A \cup B = B \cup A$

$A \cap B = B \cap A$
:::

---

## Probability Axioms: Associative {.smaller}

::: {.formula-box}
**Associative**

$(A \cup B) \cup C = A \cup (B \cup C)$

$(A \cap B) \cap C = A \cap (B \cap C)$
:::

---

## Probability Axioms: Distributive {.smaller}

::: {.formula-box}
**Distributive**

$A \cup (B \cap C) = (A \cup B) \cap (A \cup C)$

$A \cap (B \cup C) = (A \cap B) \cup (A \cap C)$
:::

---

## Probability Axioms: De Morgan's Laws {.smaller}

::: {.formula-box}
**De Morgan's Laws**

$(A \cup B)^c = A^c \cap B^c$

$(A \cap B)^c = A^c \cup B^c$
:::

---



## Practice Examples{.smaller}

:::{.example}
**Example 1:** In a class of students:

- Set A = Students who like Math
  
- Set B = Students who like Science

**Q: What does A ‚à™ B represent?**
:::

::: {.fragment}
:::{.solution}
Students who like Math **OR** Science (or both)
:::
:::

---

:::{.example}
**Example 2:** What does A ‚à© B represent?
:::

:::{.fragment}
:::{.solution}
Students who like **BOTH** Math **AND** Science
:::
:::

---

:::{.example}
**Example 3:** What does $A^c$ represent?
:::

:::{.fragment}
:::{.solution}
Students who do **NOT** like Math
:::
:::

---





## Example: Set Operations {.smaller}
:::{.columns}
:::{.column}
For die roll $S = \{1, 2, 3, 4, 5, 6\}$:

- $A = \{1, 3, 5\}$ (odd numbers)
  
- $B = \{4, 5, 6\}$ (4 or higher)

```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

# Create the figure and axes
fig, ax = plt.subplots(figsize=(6, 4))

# Correct subset sizes: A only = 2, B only = 2, A ‚à© B = 1
v = venn2(
    subsets=(2, 2, 1),
    set_labels=('A', 'B'),
    subset_label_formatter=lambda x: "",  # hide the count labels
    ax=ax
)

# Label each region
v.get_label_by_id('10').set_text('A ‚àñ B\n{1, 3}')
v.get_label_by_id('01').set_text('B ‚àñ A\n{4, 6}')
v.get_label_by_id('11').set_text('A ‚à© B\n{5}')

# Draw the universe rectangle for S
rect = patches.Rectangle(
    (-1, -1),   # lower-left corner
    2, 2,       # width, height
    linewidth=2,
    edgecolor='black',
    facecolor='none',
    linestyle='--',
    zorder=1
)
ax.add_patch(rect)

# Label the universe
ax.text(
    -0.95, 0.95, 'S = {1,2,3,4,5,6}',
    fontsize=12, fontweight='bold',
    va='top', ha='left',
    zorder=2
)

# Final styling
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

plt.title('Odd Numbers vs. 4 or Higher')
plt.show()
```
:::

:::{.column}
:::{.fragment}
:::{.example}
Find:

- $A \cup B$
  
- $A \cap B$
  
- $A^c$
:::
:::

:::{.fragment}
:::{.solution}

- $A \cup B = \{1, 3, 4, 5, 6\}$
  
- $A \cap B = \{5\}$
  
- $A^c = \{2, 4, 6\}$
:::
:::

:::
:::

---

## Mutually Exclusive Events {.smaller}
:::{.columns}
:::{.column width="50%"}
Events $A$ and $B$ are **mutually exclusive** (or disjoint) if they cannot occur simultaneously

$$A \cap B = \emptyset$$

```{python}
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib_venn import venn2

# Create figure and axes
fig, ax = plt.subplots(figsize=(6, 4))

# Draw Venn diagram with blank subset labels
v = venn2(
    subsets=(3, 3, 0),
    set_labels=('A', 'B'),
    subset_label_formatter=lambda x: "",
    ax=ax
)

# Color and shade regions
v.get_patch_by_id('10').set_color('lightblue')
v.get_patch_by_id('01').set_color('lightcoral')
v.get_patch_by_id('10').set_alpha(0.7)
v.get_patch_by_id('01').set_alpha(0.7)

# Label each region explicitly
v.get_label_by_id('10').set_text('A: {1,3,5}')
v.get_label_by_id('01').set_text('B: {2,4,6}')

# Add universe rectangle for S
rect = patches.Rectangle(
    (-1, -1), 2, 2,
    linewidth=2,
    edgecolor='black',
    facecolor='none',
    linestyle='--',
    zorder=1
)
ax.add_patch(rect)

# Label the universe
ax.text(
    -0.95, 0.95, 'S = {1, 2, 3, 4, 5, 6}',
    fontsize=12, fontweight='bold',
    va='top', ha='left',
    zorder=2
)

# Final styling
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_aspect('equal')
ax.axis('off')

plt.title('Mutually Exclusive: Odd vs. Even')
plt.show()
```
:::


:::{.column width="50%"}
:::{.fragment}
:::{.example} 
When rolling a die

- $A = \{1, 3, 5\}$ (odd)
  
- $B = \{2, 4, 6\}$ (even)

$A$ and $B$ are mutually exclusive
:::
:::
:::
:::

---

## The Classical Definition of Probability{.smaller}

::: {.definition}
**üéØ Definition:** For equally likely outcomes:

$$P(A) = \frac{\text{Number of outcomes in } A}{\text{Total number of outcomes in } S}$$
:::

:::{.example}
Probability of rolling an even number on a fair die
:::

:::{.fragment}
$$P(\text{even}) = \frac{3}{6} = \frac{1}{2}$$
:::

---

## Properties of Probability

1. **Non-negativity**: $P(A) \geq 0$ for any event $A$

2. **Normalization**: $P(S) = 1$

3. **Additivity**: If $A$ and $B$ are mutually exclusive, then

:::{.formula-box}
   $$P(A \cup B) = P(A) + P(B)$$
:::

---

## The Complement Rule {.smaller}

:::{.formula-box}
$$P(A) + P(A^c) = 1$$

$$P(A^c) = 1 - P(A)$$
:::


:::{.fragment}
:::{.example}
If the probability of rain is 0.3, what's the probability of no rain?
:::
:::

:::{.fragment}
:::{.solution}
$$P(\text{no rain}) = 1 - P(\text{rain}) = 1 - 0.3 = 0.7$$
:::
:::


## Questions? {.center}

**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)

**Email**: nmathlouthi@ucsb.edu

**Next Class**: Conditional Probabilities & Independence



---

## Resources

- [Read Chapter 3 in course textbook]((/files/Book/os4_for_screen_reader.pdf))
  
- [Elements of Set Theory for Probability](https://bookdown.org/daniel_flores_agreda/Prob1-GSEM-UNIGE/settheory.html#the-venn-diagram)

- [Probability Models and Axioms](https://ocw.mit.edu/courses/res-6-012-introduction-to-probability-spring-2018/resources/mitres_6_012s18_l01as/)