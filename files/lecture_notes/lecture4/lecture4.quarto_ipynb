{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A: Introduction to Probability\"\n",
        "subtitle: \"Lecture 4: Fundamentals of Probability, Rules , Axioms & Properties\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: 07/01/2025\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data - Introduction to Probability ¬© 2025 Narjes Mathlouthi\"\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Today's Learning Objectives {#sec-objectives .smaller}\n",
        "\n",
        "By the end of this lecture, you will be able to:\n",
        "\n",
        "- [Define probability and understand its basic properties](#sec-prob)\n",
        "- [Identify sample spaces and events](#sample-space)\n",
        "- [Apply fundamental probability rules](#set-operations-overview)\n",
        "\n",
        "---\n",
        "\n",
        "## What is Probability? {#sec-prob}\n",
        "\n",
        "::: {.concept-box}\n",
        "#### üéØ Definition\n",
        "**Probability** is a measure of the likelihood that an event will occur\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Probability Range {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column width=\"40%\"}\n",
        "- Ranges from **0 to 1** (or **0% to 100%**)\n",
        "  \n",
        "- **0**: Event will never occur (impossible)\n",
        "  \n",
        "- **1**: Event will certainly occur (certain)\n",
        "  \n",
        "- **0.5**: Event has equal chance of occurring or not\n",
        ":::\n",
        "\n",
        ":::{.column width=\"60%\"}\n",
        ":::{.fragment}\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/prob.png){fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "  \n",
        "## Three Ways to Express Probability\n",
        "\n",
        "- **Fraction**: $\\frac{1}{2}$, $\\frac{3}{4}$, $\\frac{2}{6}$\n",
        "- **Decimal**: 0.5, 0.75, 0.33\n",
        "- **Percentage**: 50%, 75%, 33%\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Example\n",
        "\n",
        "When we roll a die, there are six possible outcomes:\n",
        "\n",
        "1, 2, 3, 4, 5, 6.\n",
        "\n",
        "The probability of any of them turning up is 1/6 or 16%.\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/die.png){width=\"80%\" fig-align=\"right\" }\n",
        "\n",
        "## Why Study Probability?{.smaller}\n",
        "\n",
        "Probability helps us:\n",
        "\n",
        "- Make decisions under uncertainty\n",
        "- Understand random processes\n",
        "- Analyze data and draw conclusions\n",
        "- Model real-world phenomena\n",
        "- Assess risk and likelihood\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.note}\n",
        "*Applications*: Weather forecasting, medical diagnosis, finance, quality control, gaming, insurance\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Random Experiments {.smaller}\n",
        "\n",
        "A **random experiment** is a process that:\n",
        "\n",
        "1. Can be repeated under similar conditions\n",
        "2. Has multiple possible outcomes\n",
        "3. The outcome cannot be predicted with certainty\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.example}\n",
        "**Examples**\n",
        "\n",
        "- ü™ô Flipping a coin\n",
        "  \n",
        "- üé≤ Rolling a die\n",
        "  \n",
        "- üÉè Drawing a card from a deck\n",
        "  \n",
        "- üí° Measuring the lifetime of a light bulb\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Sample Space\n",
        "\n",
        "::: {.definition}\n",
        "**üéØ Definition**\n",
        "The **sample space** (denoted $S$ or $\\Omega$) is the **set** of all possible outcomes of a random experiment\n",
        ":::\n"
      ],
      "id": "411dd182"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "\n",
        "# Create a blank canvas with a rectangle representing the sample space\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "rect = patches.Rectangle(\n",
        "    (0.1, 0.1), 0.8, 0.8,\n",
        "    linewidth=3, edgecolor='black', facecolor='none'\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the sample space inside the rectangle\n",
        "ax.text(0.5, 0.88, r'$\\Omega$', fontsize=24, fontweight='bold', ha='center', va='top')\n",
        "ax.text(0.5, 0.5, 'All possible outcomes', fontsize=14, ha='center')\n",
        "\n",
        "# Clean up axes\n",
        "ax.set_xticks([])\n",
        "ax.set_yticks([])\n",
        "ax.set_xlim(0, 1)\n",
        "ax.set_ylim(0, 1)\n",
        "ax.axis('off')\n",
        "\n",
        "plt.title('Sample Space (Œ©)', fontsize=16, pad=20)\n",
        "plt.show()\n"
      ],
      "id": "2a0a905c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Sample Space Examples\n",
        "\n",
        "- Coin flip: $S = \\{H, T\\}$\n",
        "- Two coin flips: $S = \\{HH, HT, TH, TT\\}$\n",
        "  \n",
        "![](/files/lecture_notes/lecture4/img/coin.png){width=\"80%\" fig-align=\"right\" } \n",
        "\n",
        "---\n",
        "\n",
        "- üé≤ Die roll: $S = \\{1, 2, 3, 4, 5, 6\\}$\n",
        "- Two die rolls\n",
        "  ![](/files/lecture_notes/lecture4/img/die_rolls.png){width=\"80%\" fig-align=\"right\" }\n",
        "\n",
        "---\n",
        "\n",
        "- $S = \\{A\\heartsuit,\\ 2\\heartsuit,\\ \\dots,\\ K\\heartsuit,\\\\\n",
        "\\phantom{S = \\{}A\\diamondsuit,\\ 2\\diamondsuit,\\ \\dots,\\ K\\diamondsuit,\\\\\n",
        "\\phantom{S = \\{}A\\clubsuit,\\ 2\\clubsuit,\\ \\dots,\\ K\\clubsuit,\\\\\n",
        "\\phantom{S = \\{}A\\spadesuit,\\ 2\\spadesuit,\\ \\dots,\\ K\\spadesuit\\}$\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/card_deck.png){width=\"80%\" }\n",
        "\n",
        "---\n",
        "\n",
        "## Types of Sample Spaces{.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column width=\"50%\"}\n",
        "**Finite Sample Space**\n",
        "\n",
        "- Limited number of outcomes  \n",
        "  - Example: Rolling a die\n",
        "\n",
        "\n",
        ":::\n",
        ":::{.column width=\"50%\"}\n",
        "![](/files/lecture_notes/lecture4/img/ss_die.png){width=\"100%\" fig-align=\"right\"}\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column width=\"50%\"}\n",
        "**Infinite Sample Space** \n",
        "\n",
        "- Unlimited outcomes (countable or uncountable)  \n",
        "  - Example: Measuring exact height of students\n",
        "\n",
        ":::\n",
        ":::{.column width=\"50%\"}\n",
        "![](/files/lecture_notes/lecture4/img/inf.jpg){width=\"70%\" fig-align=\"right\"}\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Events {.smaller}\n",
        "\n",
        ":::{.definition}\n",
        "**üéØ Definition**\n",
        "An **event** is a subset of the sample space\n",
        "\n",
        "- **Simple event**: Contains exactly one outcome (Ex: $A = \\{3\\}$ (rolling a 3))\n",
        "  \n",
        "- **Compound event**: Contains multiple outcomes (Ex: $B = \\{2, 4, 6\\}$ (rolling an even number))\n",
        ":::\n"
      ],
      "id": "bc1ac2ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "import matplotlib.lines as mlines\n",
        "\n",
        "# Coordinates and styling\n",
        "outcomes = list(range(1, 7))\n",
        "y = 0.5\n",
        "radius = 0.3\n",
        "dot_y = y\n",
        "fig, ax = plt.subplots(figsize=(8, 4))\n",
        "ax.axis('off')\n",
        "\n",
        "# Rectangle bounds to fit all circles\n",
        "min_x = min(outcomes) - radius\n",
        "max_x = max(outcomes) + radius\n",
        "min_y = dot_y - radius\n",
        "max_y = dot_y + radius\n",
        "rect = patches.Rectangle((min_x, min_y), max_x-min_x, max_y-min_y,\n",
        "                         linewidth=2, edgecolor='black', facecolor='none')\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the sample space inside\n",
        "ax.text((min_x+max_x)/2, max_y + 0.05, r'$\\Omega$', fontsize=20, fontweight='bold', ha='center')\n",
        "\n",
        "# Plot all outcomes marked by gray crosses\n",
        "ax.scatter(outcomes, [dot_y]*6, s=200, color='gray', marker='x', linewidths=3, zorder=2)\n",
        "\n",
        "# Highlight simple event {3} in red\n",
        "circle_simple = patches.Circle((3, dot_y), radius, facecolor='red', alpha=0.3,\n",
        "                               edgecolor='black', linewidth=2, zorder=1)\n",
        "ax.add_patch(circle_simple)\n",
        "\n",
        "# Highlight compound event {2,4,6} in blue\n",
        "for x in [2, 4, 6]:\n",
        "    circle = patches.Circle((x, dot_y), radius, facecolor='blue', alpha=0.3,\n",
        "                            edgecolor='black', linewidth=2, zorder=1)\n",
        "    ax.add_patch(circle)\n",
        "\n",
        "# Legend for events\n",
        "legend_handles = [\n",
        "    mlines.Line2D([], [], color='red', marker='o', linestyle='None',\n",
        "                  markersize=15, label='Simple event {3}', alpha=0.3),\n",
        "    mlines.Line2D([], [], color='blue', marker='o', linestyle='None',\n",
        "                  markersize=15, label='Compound event {2,4,6}', alpha=0.3)\n",
        "]\n",
        "ax.legend(handles=legend_handles, loc='lower center', ncol=2, frameon=False, bbox_to_anchor=(0.5, -0.3))\n",
        "\n",
        "# Adjust limits\n",
        "ax.set_xlim(min_x - 0.5, max_x + 0.5)\n",
        "ax.set_ylim(min_y - 0.2, max_y + 0.2)\n",
        "\n",
        "plt.title('Sample Space and Events', fontsize=16, pad=20)\n",
        "plt.show()\n"
      ],
      "id": "9d01d02e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Event Notation\n",
        "\n",
        "For a die roll with $S = \\{1, 2, 3, 4, 5, 6\\}$:\n",
        "\n",
        "- $A = \\{1, 3, 5\\}$ (rolling an odd number)\n",
        "- $B = \\{4, 5, 6\\}$ (rolling 4 or higher)\n",
        "- $C = \\{6\\}$ (rolling a six)\n",
        "\n",
        "![](/files/lecture_notes/lecture4/img/die.png){width=\"100%\" fig-align=\"right\" }\n",
        "\n",
        ":::{.fragment}\n",
        "*We can describe events in words or using set notation*\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Set Operations Overview{.smaller}\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "\n",
        "::: {.definition}\n",
        ":::{.smaller}\n",
        "**üéØ Definition:**\n",
        "\n",
        "- **Set**: Collection of distinct objects\n",
        "- **Union**: A OR B occurs  \n",
        "- **Intersection**: A AND B occurs\n",
        "- **Complement**: A does NOT occur\n",
        "- **Sample Space**: All possible outcomes\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}"
      ],
      "id": "8ff6421e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# 1) Draw the Venn, but format subset labels to be blank\n",
        "v = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    ax=ax,\n",
        "    subset_label_formatter=lambda x: \"\"     # removes the \"1\" labels\n",
        ")\n",
        "\n",
        "# 2) Color each region (optional)\n",
        "v.get_patch_by_id('10').set_color('lightblue')\n",
        "v.get_patch_by_id('01').set_color('lightcoral')\n",
        "v.get_patch_by_id('11').set_color('lightgreen')\n",
        "\n",
        "# 3) Add a dashed universe rectangle around S, with high z‚Äêorder\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1),    # lower‚Äêleft corner\n",
        "    2, 2,        # width, height\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='none',\n",
        "    linestyle='--',\n",
        "    zorder=10     # put on top of the circles\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# 4) Label the universe \"S\"\n",
        "ax.text(-.95,  0.95, 'S', fontsize=14, fontweight='bold',\n",
        "        va='top', ha='left', zorder=11)\n",
        "\n",
        "# 5) Tidy up\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.set_axis_off()\n",
        "\n",
        "plt.title('Sample Space $S$ with Events $A$ and $B$')\n",
        "plt.show()"
      ],
      "id": "4eea814d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## What is a Set?\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "::: {.definition}\n",
        ":::{.smaller}\n",
        "**üéØ Definition:**\n",
        "A collection of things that share common characteristics. They can be elements, members, objects or similar terms.\n",
        "\n",
        "**Examples:**\n",
        "\n",
        "- Set of even numbers: \n",
        "  - {2, 4, 6, 8, ...}\n",
        "  \n",
        "- Set of vowels: {a, e, i, o, u}\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}"
      ],
      "id": "f74fcdc2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create the figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# Draw the Venn with no default set labels and blank subset labels\n",
        "v = venn2(\n",
        "    subsets=(1, 0, 0),\n",
        "    set_labels=('', ''),                       # no set labels\n",
        "    subset_label_formatter=lambda x: \"\",       # hide subset‚Äêsize labels\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# Color and shade the A region\n",
        "patch = v.get_patch_by_id('10')\n",
        "patch.set_color('lightblue')\n",
        "patch.set_alpha(0.7)\n",
        "\n",
        "# Add the dashed universe rectangle for S\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1),   # lower‚Äêleft corner\n",
        "    2,          # width\n",
        "    2,          # height\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='none',\n",
        "    linestyle='--',\n",
        "    zorder=2     # above the circles\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the universe \"S\"\n",
        "ax.text(\n",
        "    -0.95, 0.95, 'S',\n",
        "    fontsize=14, fontweight='bold',\n",
        "    va='top', ha='left',\n",
        "    zorder=3\n",
        ")\n",
        "\n",
        "# Label set A inside the circle\n",
        "ax.text(\n",
        "    0, 0, 'SET A',\n",
        "    fontsize=14, fontweight='bold',\n",
        "    ha='center',\n",
        "    zorder=3\n",
        ")\n",
        "\n",
        "# Adjust limits and styling\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "plt.title('A Single Set $A$ within Sample Space $S$')\n",
        "plt.show()"
      ],
      "id": "2dd80803",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Union: A ‚à™ B\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"70%\"}\n",
        "::: {.definition}\n",
        ":::{.smaller}\n",
        "**üéØ Definition:**\n",
        "Contains all set elements, including intersections.\n",
        "\n",
        "**In Probability:**\n",
        "The event that A **OR** B occurs (or both).\n",
        "\n",
        ":::{.formula-box}\n",
        "$$P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$$\n",
        ":::\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.column width=\"30%\"}"
      ],
      "id": "2056ceda"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 6))\n",
        "\n",
        "# Draw Venn without default numeric labels\n",
        "v = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    subset_label_formatter=lambda x: \"\",\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# Fill entire circles for A and B with semi-transparent colors\n",
        "for region in ('10', '11'):  # parts of A\n",
        "    patch = v.get_patch_by_id(region)\n",
        "    patch.set_facecolor('skyblue')\n",
        "    patch.set_alpha(0.5)\n",
        "    patch.set_edgecolor('black')\n",
        "    patch.set_linewidth(2)\n",
        "for region in ('01', '11'):  # parts of B\n",
        "    patch = v.get_patch_by_id(region)\n",
        "    patch.set_facecolor('lightcoral')\n",
        "    patch.set_alpha(0.5)\n",
        "    patch.set_edgecolor('black')\n",
        "    patch.set_linewidth(2)\n",
        "\n",
        "# Union label at center\n",
        "ax.text(\n",
        "    0, 0, r'$\\mathbf{A \\cup B}$',\n",
        "    fontsize=18, fontweight='bold', ha='center', va='center'\n",
        ")\n",
        "\n",
        "# Add the universe rectangle (sample space)\n",
        "rect = patches.Rectangle(\n",
        "    (-1.1, -1.1), 2.2, 2.2,\n",
        "    linewidth=2, edgecolor='black', facecolor='none', linestyle='--'\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the universe \"Œ©\"\n",
        "ax.text(\n",
        "    -1.05, 1.05, 'Œ©',\n",
        "    fontsize=16, fontweight='bold', va='top', ha='left'\n",
        ")\n",
        "\n",
        "# Increase set label font size\n",
        "v.get_label_by_id('A').set_fontsize(14)\n",
        "v.get_label_by_id('B').set_fontsize(14)\n",
        "\n",
        "# Title and styling\n",
        "ax.set_title('Union of Events: $A \\\\cup B$', fontsize=16, pad=20)\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "plt.show()"
      ],
      "id": "cb994f1b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Intersection: A ‚à© B\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "::: {.definition}\n",
        ":::{.smaller}\n",
        "**üéØ Definition:**\n",
        "Area where two or more sets overlap.\n",
        "\n",
        "**In Probability:**\n",
        "The event that A **AND** B occurs.\n",
        "\n",
        "**Properties:**\n",
        "\n",
        "- Always smaller than or equal to individual sets\n",
        "  \n",
        "- Can be empty (disjoint sets)\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}"
      ],
      "id": "0d3e45e0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# Draw Venn without subset‚Äêsize labels\n",
        "v = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    subset_label_formatter=lambda x: \"\",  # hide the \"1\" labels\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# Shade the non‚Äêintersection regions light gray\n",
        "for region in ('10', '01'):\n",
        "    patch = v.get_patch_by_id(region)\n",
        "    patch.set_color('lightgray')\n",
        "    patch.set_alpha(0.8)\n",
        "\n",
        "# Shade the intersection region red\n",
        "patch = v.get_patch_by_id('11')\n",
        "patch.set_color('red')\n",
        "patch.set_alpha(0.8)\n",
        "\n",
        "# Add the universe rectangle\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1),    # lower‚Äêleft corner\n",
        "    2,           # width\n",
        "    2,           # height\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='none',\n",
        "    linestyle='--',\n",
        "    zorder=2      # above circles\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the universe \"S\"\n",
        "ax.text(\n",
        "    -0.95, 0.95, 'S',\n",
        "    fontsize=14, fontweight='bold',\n",
        "    va='top', ha='left',\n",
        "    zorder=3\n",
        ")\n",
        "\n",
        "# Label the intersection inside\n",
        "ax.text(\n",
        "    0, 0, 'A ‚à© B',\n",
        "    fontsize=14, fontweight='bold',\n",
        "    ha='center', va='center',\n",
        "    zorder=3\n",
        ")\n",
        "\n",
        "# Tidy up\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "plt.title('Intersection: $A \\\\cap B$ (A AND B)')\n",
        "plt.show()"
      ],
      "id": "3103a31d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Absolute Complement: $A^c$\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "\n",
        "::: {.definition}\n",
        "**üéØ Definition:**\n",
        "All elements that do not belong to the set.\n",
        "\n",
        "**In Probability:**\n",
        "The event that A does **NOT** occur.\n",
        "  \n",
        "- $P(A^c) = 1 - P(A)$\n",
        "\n",
        "\n",
        ":::{.important}\n",
        "**Key Property:**\n",
        "\n",
        "**$A \\cup A^c = S$ (Sample Space**)\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}\n"
      ],
      "id": "ddd21e7a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2, venn2_circles\n",
        "\n",
        "# 1) Create figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# 2) Draw the universe rectangle (purple background)\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1),  # lower-left corner\n",
        "    2, 2,      # width, height\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='purple',\n",
        "    alpha=0.3,\n",
        "    zorder=1\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# 3) Draw Venn diagram with blank subset labels\n",
        "v = venn2(\n",
        "    subsets=(1, 1, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    subset_label_formatter=lambda x: \"\",\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# 4) Mask out A (both A‚Äêonly and intersection) with white\n",
        "for region in ('10', '11'):\n",
        "    p = v.get_patch_by_id(region)\n",
        "    p.set_facecolor('white')\n",
        "    p.set_edgecolor('none')\n",
        "    p.set_alpha(1)\n",
        "\n",
        "# 5) Hide the B‚Äêonly region so purple shows through\n",
        "p_b = v.get_patch_by_id('01')\n",
        "p_b.set_facecolor('none')\n",
        "p_b.set_edgecolor('none')\n",
        "p_b.set_alpha(1)\n",
        "\n",
        "# 6) Draw crisp circle outlines on top\n",
        "venn2_circles((1, 1, 1), ax=ax, linestyle='solid', linewidth=2, color='black')\n",
        "\n",
        "# 7) Label universe and complement\n",
        "ax.text(-0.95, 0.95, 'S', fontsize=14, fontweight='bold', va='top', ha='left', zorder=3)\n",
        "ax.text(-.6, 0.75, r'$A^c$', fontsize=14, fontweight='bold', ha='center', va='center', zorder=3)\n",
        "\n",
        "# 8) Final styling\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "plt.title('Complement: $A^c$ (NOT A)')\n",
        "plt.show()"
      ],
      "id": "ea95cb7e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Summary Table\n",
        "\n",
        "| Operation   | Symbol       | Meaning                     | Probability                             |\n",
        "|:-----------------|:----------------:|:--------------------------------|:--------------------------------------------|\n",
        "| **Union**        | $A \\cup B$       | Occurs if $A$ *or* $B$          | $P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$   |\n",
        "| **Intersection** | $A \\cap B$       | Occurs if $A$ *and* $B$         | $P(A \\cap B)$                               |\n",
        "| **Complement**   | $A^c$            | Occurs if $A$ *does **not*** occur | $P(A^c) = 1 - P(A)$                       |\n",
        "\n",
        "\n",
        "## Probability Axioms: Commutative {.smaller}\n",
        "\n",
        "::: {.formula-box}\n",
        "**Commutative**\n",
        "\n",
        "$A \\cup B = B \\cup A$\n",
        "\n",
        "$A \\cap B = B \\cap A$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Probability Axioms: Associative {.smaller}\n",
        "\n",
        "::: {.formula-box}\n",
        "**Associative**\n",
        "\n",
        "$(A \\cup B) \\cup C = A \\cup (B \\cup C)$\n",
        "\n",
        "$(A \\cap B) \\cap C = A \\cap (B \\cap C)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Probability Axioms: Distributive {.smaller}\n",
        "\n",
        "::: {.formula-box}\n",
        "**Distributive**\n",
        "\n",
        "$A \\cup (B \\cap C) = (A \\cup B) \\cap (A \\cup C)$\n",
        "\n",
        "$A \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Probability Axioms: De Morgan's Laws {.smaller}\n",
        "\n",
        "::: {.formula-box}\n",
        "**De Morgan's Laws**\n",
        "\n",
        "$(A \\cup B)^c = A^c \\cap B^c$\n",
        "\n",
        "$(A \\cap B)^c = A^c \\cup B^c$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Practice Examples{.smaller}\n",
        "\n",
        ":::{.example}\n",
        "**Example 1:** In a class of students:\n",
        "\n",
        "- Set A = Students who like Math\n",
        "  \n",
        "- Set B = Students who like Science\n",
        "\n",
        "**Q: What does A ‚à™ B represent?**\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        ":::{.solution}\n",
        "Students who like Math **OR** Science (or both)\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        ":::{.example}\n",
        "**Example 2:** What does A ‚à© B represent?\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "Students who like **BOTH** Math **AND** Science\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        ":::{.example}\n",
        "**Example 3:** What does $A^c$ represent?\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "Students who do **NOT** like Math\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Example: Set Operations {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "For die roll $S = \\{1, 2, 3, 4, 5, 6\\}$:\n",
        "\n",
        "- $A = \\{1, 3, 5\\}$ (odd numbers)\n",
        "  \n",
        "- $B = \\{4, 5, 6\\}$ (4 or higher)\n"
      ],
      "id": "0b7f2d47"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create the figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# Correct subset sizes: A only = 2, B only = 2, A ‚à© B = 1\n",
        "v = venn2(\n",
        "    subsets=(2, 2, 1),\n",
        "    set_labels=('A', 'B'),\n",
        "    subset_label_formatter=lambda x: \"\",  # hide the count labels\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# Label each region\n",
        "v.get_label_by_id('10').set_text('A ‚àñ B\\n{1, 3}')\n",
        "v.get_label_by_id('01').set_text('B ‚àñ A\\n{4, 6}')\n",
        "v.get_label_by_id('11').set_text('A ‚à© B\\n{5}')\n",
        "\n",
        "# Draw the universe rectangle for S\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1),   # lower-left corner\n",
        "    2, 2,       # width, height\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='none',\n",
        "    linestyle='--',\n",
        "    zorder=1\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the universe\n",
        "ax.text(\n",
        "    -0.95, 0.95, 'S = {1,2,3,4,5,6}',\n",
        "    fontsize=12, fontweight='bold',\n",
        "    va='top', ha='left',\n",
        "    zorder=2\n",
        ")\n",
        "\n",
        "# Final styling\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "plt.title('Odd Numbers vs. 4 or Higher')\n",
        "plt.show()"
      ],
      "id": "062a185e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::{.column}\n",
        ":::{.fragment}\n",
        ":::{.example}\n",
        "Find:\n",
        "\n",
        "- $A \\cup B$\n",
        "  \n",
        "- $A \\cap B$\n",
        "  \n",
        "- $A^c$\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "\n",
        "- $A \\cup B = \\{1, 3, 4, 5, 6\\}$\n",
        "  \n",
        "- $A \\cap B = \\{5\\}$\n",
        "  \n",
        "- $A^c = \\{2, 4, 6\\}$\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Mutually Exclusive Events {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column width=\"50%\"}\n",
        "Events $A$ and $B$ are **mutually exclusive** (or disjoint) if they cannot occur simultaneously\n",
        "\n",
        "$$A \\cap B = \\emptyset$$\n"
      ],
      "id": "15d8bbe0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Create figure and axes\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "# Draw Venn diagram with blank subset labels\n",
        "v = venn2(\n",
        "    subsets=(3, 3, 0),\n",
        "    set_labels=('A', 'B'),\n",
        "    subset_label_formatter=lambda x: \"\",\n",
        "    ax=ax\n",
        ")\n",
        "\n",
        "# Color and shade regions\n",
        "v.get_patch_by_id('10').set_color('lightblue')\n",
        "v.get_patch_by_id('01').set_color('lightcoral')\n",
        "v.get_patch_by_id('10').set_alpha(0.7)\n",
        "v.get_patch_by_id('01').set_alpha(0.7)\n",
        "\n",
        "# Label each region explicitly\n",
        "v.get_label_by_id('10').set_text('A: {1,3,5}')\n",
        "v.get_label_by_id('01').set_text('B: {2,4,6}')\n",
        "\n",
        "# Add universe rectangle for S\n",
        "rect = patches.Rectangle(\n",
        "    (-1, -1), 2, 2,\n",
        "    linewidth=2,\n",
        "    edgecolor='black',\n",
        "    facecolor='none',\n",
        "    linestyle='--',\n",
        "    zorder=1\n",
        ")\n",
        "ax.add_patch(rect)\n",
        "\n",
        "# Label the universe\n",
        "ax.text(\n",
        "    -0.95, 0.95, 'S = {1, 2, 3, 4, 5, 6}',\n",
        "    fontsize=12, fontweight='bold',\n",
        "    va='top', ha='left',\n",
        "    zorder=2\n",
        ")\n",
        "\n",
        "# Final styling\n",
        "ax.set_xlim(-1.2, 1.2)\n",
        "ax.set_ylim(-1.2, 1.2)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "\n",
        "plt.title('Mutually Exclusive: Odd vs. Even')\n",
        "plt.show()"
      ],
      "id": "28a692cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        ":::{.column width=\"50%\"}\n",
        ":::{.fragment}\n",
        ":::{.example} \n",
        "When rolling a die\n",
        "\n",
        "- $A = \\{1, 3, 5\\}$ (odd)\n",
        "  \n",
        "- $B = \\{2, 4, 6\\}$ (even)\n",
        "\n",
        "$A$ and $B$ are mutually exclusive\n",
        ":::\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Classical Definition of Probability{.smaller}\n",
        "\n",
        "::: {.definition}\n",
        "**üéØ Definition:** For equally likely outcomes:\n",
        "\n",
        "$$P(A) = \\frac{\\text{Number of outcomes in } A}{\\text{Total number of outcomes in } S}$$\n",
        ":::\n",
        "\n",
        ":::{.example}\n",
        "Probability of rolling an even number on a fair die\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        "$$P(\\text{even}) = \\frac{3}{6} = \\frac{1}{2}$$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Properties of Probability\n",
        "\n",
        "1. **Non-negativity**: $P(A) \\geq 0$ for any event $A$\n",
        "\n",
        "2. **Normalization**: $P(S) = 1$\n",
        "\n",
        "3. **Additivity**: If $A$ and $B$ are mutually exclusive, then\n",
        "\n",
        ":::{.formula-box}\n",
        "   $$P(A \\cup B) = P(A) + P(B)$$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Complement Rule {.smaller}\n",
        "\n",
        ":::{.formula-box}\n",
        "$$P(A) + P(A^c) = 1$$\n",
        "\n",
        "$$P(A^c) = 1 - P(A)$$\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.example}\n",
        "If the probability of rain is 0.3, what's the probability of no rain?\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.fragment}\n",
        ":::{.solution}\n",
        "$$P(\\text{no rain}) = 1 - P(\\text{rain}) = 1 - 0.3 = 0.7$$\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "## Questions? {.center}\n",
        "\n",
        "**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)\n",
        "\n",
        "**Email**: nmathlouthi@ucsb.edu\n",
        "\n",
        "**Next Class**: Conditional Probabilities & Independence\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Resources\n",
        "\n",
        "- [Read Chapter 3 in course textbook]((/files/Book/os4_for_screen_reader.pdf))\n",
        "  \n",
        "- [Elements of Set Theory for Probability](https://bookdown.org/daniel_flores_agreda/Prob1-GSEM-UNIGE/settheory.html#the-venn-diagram)\n",
        "\n",
        "- [Probability Models and Axioms](https://ocw.mit.edu/courses/res-6-012-introduction-to-probability-spring-2018/resources/mitres_6_012s18_l01as/)\n",
        "\n",
        "- [Probability Animations](https://seeing-theory.brown.edu/basic-probability/index.html)"
      ],
      "id": "062aabc2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}