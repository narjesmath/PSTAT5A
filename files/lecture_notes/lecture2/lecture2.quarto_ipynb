{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lecture 2: Descriptive Statistics I \"\n",
        "subtitle: \"Understanding Data (PSTAT 5A) – Week 1\"\n",
        "date: 6/25/2025\n",
        "author: \"Narjes Mathlouthi\"\n",
        "format:\n",
        "  revealjs:\n",
        "   logo: /img/logo.png\n",
        "   footer: \"Understanding Data - Descriptive Statistics I © 2025 Narjes Mathlouthi\"\n",
        "   transition: slide\n",
        "   chalkboard: true\n",
        "   preview-links: auto\n",
        "   background-transition: fade\n",
        "   theme: default\n",
        "   css: /files/lecture_notes/theme/lecture-styles.css\n",
        "   slide-number: true\n",
        "   number-sections: false\n",
        "jupyter: python3\n",
        "   \n",
        "---\n",
        "\n",
        "## Today's Agenda {.smaller}\n",
        "1. **Introduction to Descriptive Statistics** (10 minutes)\n",
        "   - What *is* descriptive statistics?\n",
        "   -  Why it matters before any modeling\n",
        "2. **Types of Data and Measurement Scales** (15 minutes)\n",
        "3. **Measures of Central Tendency** (35 minutes)\n",
        "   - Mean (12 minutes)\n",
        "   - Median (12 minutes)\n",
        "   - Mode (11 minutes)\n",
        "4. **Python Implementation** (15 minutes)\n",
        "5. **Real-world Applications and Interpretation** (5 minutes)\n",
        "\n",
        "\n",
        "::: {.notes}\n",
        "Quick ice-breaker: ask students for one dataset they’ve looked at recently and what first question they asked about it.\n",
        ":::\n",
        "---\n",
        "\n",
        "## Learning Objectives (LOs) {.smaller}\n",
        "\n",
        "\n",
        "By the end of this lecture you should be able to:\n",
        "\n",
        "- Define descriptive statistics and explain its importance in data analysis (@sec-descriptive)\n",
        "  \n",
        "- Distinguish between different types of data and measurement scales (@sec-data-types)\n",
        "  \n",
        "- Calculate and interpret measures of central tendency (mean, median, mode)(@sec-central-tendency)\n",
        "  \n",
        "- Understand when to use each measure of central tendency\n",
        "  \n",
        "- Apply Python to compute descriptive statistics(@sec-python-implementation)\n",
        "  \n",
        "- Interpret basic descriptive statistics in real-world contexts(@sec-real-world-ex)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Introduction to Descriptive Statistics {#sec-descriptive}\n",
        "*10 minutes*\n",
        "\n",
        "## Statistics\n",
        "\n",
        "::: {.incremental}\n",
        "<q>Facts are stubborn, but statistics are more pliable.</q>\n",
        "\n",
        "Mark Twain\n",
        "\n",
        "- Statistics refers to the mathematics and techniques with which we understand data. ^[[(source)](https://learning.oreilly.com/library/view/data-science-from/9781491901410/ch05.html)]\n",
        ":::\n",
        "\n",
        "\n",
        "<!-- end columns -->\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## What are Descriptive Statistics? \n",
        "::: {.incremental}\n",
        "**Descriptive statistics** are numerical and graphical methods used to summarize, organize, and describe data in a meaningful way.\n",
        "\n",
        "::: {.fragment}\n",
        "### Purpose of Descriptive Statistics\n",
        "- **Summarize large datasets** into manageable information\n",
        "- **Identify patterns** and trends in data\n",
        "- **Communicate findings** clearly to others\n",
        "- **Prepare data** for further analysis\n",
        "- **Make initial assessments** about data quality\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Descriptive vs. Inferential Statistics {.smaller}\n",
        "\n",
        "\n",
        "| Descriptive Statistics | Inferential Statistics |\n",
        "|----------------------|----------------------|\n",
        "| Describes what the data shows | Makes predictions about populations |\n",
        "| Summarizes sample data | Uses sample data to make generalizations |\n",
        "| No conclusions beyond the data | Draws conclusions beyond the immediate data |\n",
        "| Examples: mean, median, graphs | Examples: hypothesis testing, confidence intervals |\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Descriptive vs. Inferential Statistics\n",
        "\n",
        "![](/files/lecture_notes/lecture2/img/stat_diag.png)\n",
        "\n",
        "# Types of Data and Measurement Scales {#sec-data-types}\n",
        "*15 minutes*\n",
        "\n",
        "## Why Data Types Matter\n",
        "\n",
        "Understanding data types is crucial because:\n",
        "\n",
        "::: {.incremental}\n",
        "- Different statistics are appropriate for different data types\n",
        "- Statistical methods depend on the level of measurement\n",
        "- Misapplying statistics can lead to incorrect conclusions\n",
        ":::\n",
        "\n",
        "## Types of Data\n",
        "\n",
        "```{mermaid}\n",
        "graph TD\n",
        "    A[Variable Types]\n",
        "    A --> B[Categorical]\n",
        "    A --> C[Numerical]\n",
        "    B --> B1[\"Nominal<br/>e.g., gender, major\"]\n",
        "    B --> B2[\"Ordinal<br/>e.g., rating, education level\"]\n",
        "    C --> C1[\"Discrete<br/>e.g., count (# of students)\"]\n",
        "    C --> C2[\"Continuous<br/>e.g., measurements like height, weight\"]\n",
        "    \n",
        "    classDef root fill:#e1f5fe,stroke:#01579b,stroke-width:3px\n",
        "    classDef categorical fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n",
        "    classDef numerical fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n",
        "    classDef nominal fill:#fce4ec,stroke:#880e4f,stroke-width:2px\n",
        "    classDef ordinal fill:#fff3e0,stroke:#e65100,stroke-width:2px\n",
        "    classDef discrete fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n",
        "    classDef continuous fill:#f1f8e9,stroke:#33691e,stroke-width:2px\n",
        "    \n",
        "    class A root\n",
        "    class B categorical\n",
        "    class C numerical\n",
        "    class B1 nominal\n",
        "    class B2 ordinal\n",
        "    class C1 discrete\n",
        "    class C2 continuous\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "::: {.notes}\n",
        "Prompt: Which summary stat would you pick for “major”? For “gpa”?\n",
        ":::\n",
        "\n",
        "\n",
        "## Categorical Data (Qualitative) {.smaller}\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### Nominal Data\n",
        "- Categories with no natural order\n",
        "- Examples: gender, color, brand names, marital status\n",
        "- Appropriate statistics: mode, frequency counts, proportions\n",
        ":::\n",
        "::: {.column}\n",
        "### Ordinal Data\n",
        "- Categories with a natural order or ranking\n",
        "- Examples: education level, satisfaction ratings, letter grades\n",
        "- Appropriate statistics: mode, median, percentiles\n",
        ":::\n",
        "::::  \n",
        "<!-- end columns -->\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Numerical Data (Quantitative)\n",
        ":::{.fragment}\n",
        "### Discrete Data\n",
        "- Countable values, often integers\n",
        "- Examples: number of children, cars sold, defective items\n",
        "- Can take on finite or countably infinite values\n",
        ":::\n",
        "\n",
        ":::{.fragment .fade-up}\n",
        "### Continuous Data\n",
        "- Can take any value within a range\n",
        "- Examples: height, weight, temperature, time\n",
        "- Measured rather than counted\n",
        ":::\n",
        "\n",
        "## Measurement Scales Summary {.smaller}\n",
        "\n",
        "| Scale | Type | Properties | Examples | Appropriate Statistics |\n",
        "|-------|------|------------|----------|----------------------|\n",
        "| Nominal | Categorical | Categories only | Gender, Color | Mode, Frequency |\n",
        "| Ordinal | Categorical | Order matters | Rankings, Grades | Mode, Median |\n",
        "| Interval | Numerical | Equal intervals, no true zero | Temperature (°C) | Mean, Median, Mode |\n",
        "| Ratio | Numerical | Equal intervals, true zero | Height, Weight, Income | All statistics |\n",
        "\n",
        "# Measures of Central Tendency {#sec-central-tendency}\n",
        "*35 minutes*\n",
        "\n",
        "# Overview {.smaller}\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "%%{init: {\n",
        "  \"flowchart\": { \"nodeSpacing\": 300, \"rankSpacing\": 300 },\n",
        "  \"themeVariables\": {\n",
        "    \"fontSize\": \"50px\",      /* <-- bump this up as needed */\n",
        "    \"fontFamily\": \"Arial\"\n",
        "  },\n",
        "  \"width\": 1200,\n",
        "  \"height\": 900\n",
        "}}%%\n",
        "graph TD\n",
        "    A[\"Measures of Central Tendency\"]\n",
        "    A --> B[\"Mean (Average)\"]\n",
        "    A --> C[\"Median (Middle Value)\"]\n",
        "    A --> D[\"Mode (Most Frequent)\"]\n",
        "    \n",
        "    B --> B1[\"Sum of all values ÷<br/>Number of values\"]\n",
        "    B --> B2[\"Best for:<br/>Symmetric distributions\"]\n",
        "    B --> B3[\"Affected by:<br/>Outliers\"]\n",
        "    \n",
        "    C --> C1[\"Middle value when<br/>data is ordered\"]\n",
        "    C --> C2[\"Best for:<br/>Skewed distributions\"]\n",
        "    C --> C3[\"Resistant to:<br/>Outliers\"]\n",
        "    \n",
        "    D --> D1[\"Value that appears<br/>most frequently\"]\n",
        "    D --> D2[\"Best for:<br/>Categorical data\"]\n",
        "    D --> D3[\"Can have: Multiple modes<br/>or no mode\"]\n",
        "    \n",
        "    classDef main fill:#e3f2fd,stroke:#0d47a1,stroke-width:4px\n",
        "    classDef mean fill:#fff3e0,stroke:#e65100,stroke-width:4px\n",
        "    classDef median fill:#e8f5e8,stroke:#2e7d32,stroke-width:4px\n",
        "    classDef mode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:4px\n",
        "    classDef details fill:#fafafa,stroke:#616161,stroke-width:4px\n",
        "    \n",
        "    class A main\n",
        "    class B mean\n",
        "    class C median\n",
        "    class D mode\n",
        "    class B1,B2,B3,C1,C2,C3,D1,D2,D3 details\n",
        " ```\n",
        "\n",
        "</br>\n",
        "\n",
        "## What is Central Tendency?\n",
        "\n",
        "Central tendency describes the center or typical value of a dataset. \n",
        "\n",
        "It answers the question: **\"What is a representative value for this data?\"**\n",
        "\n",
        "# The Mean (Arithmetic Average)\n",
        "*12 minutes*\n",
        "\n",
        "## Definition and Formula {.smaller}\n",
        "\n",
        "::: {.definition}\n",
        "**🎯 Definition:** The **mean** is the sum of all values divided by the number of values.\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "### Formula\n",
        "- For a sample: $\\bar{x} = \\frac{\\sum x}{n}$\n",
        "- For a population: $\\mu = \\frac{\\sum x}{N}$\n",
        "\n",
        "Where:\n",
        "\n",
        "- $\\bar{x}$ (x-bar) = sample mean\n",
        "- $\\mu$ (mu) = population mean\n",
        "- $\\sum x$ = sum of all values\n",
        "- $n$ = sample size, $N$ = population size\n",
        "\n",
        "## Example Calculation\n",
        "\n",
        "Student test scores: 85, 90, 78, 92, 88\n",
        "\n",
        ". . .\n",
        "\n",
        "Mean = $\\frac{85 + 90 + 78 + 92 + 88}{5} = \\frac{433}{5} = 86.6$\n",
        "\n",
        "## Properties of the Mean\n",
        "\n",
        "- **Uses all data points** - every value affects the mean\n",
        "- **Sensitive to outliers** - extreme values can distort the mean\n",
        "- **Unique** - there is only one mean for a dataset\n",
        "- **Can be calculated** for interval and ratio data\n",
        "- **Balancing point** - sum of deviations from mean equals zero\n",
        "\n",
        "## When to Use the Mean\n",
        "\n",
        "✅ **Use the mean when:**\n",
        "\n",
        "- Data is **approximately symmetric**\n",
        "- **No extreme outliers** present\n",
        "- Working with **interval or ratio data**\n",
        "- Need to use the value in **further calculations**\n",
        "\n",
        "## Advantages and Disadvantages {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "### Advantages\n",
        "- Uses all information in the dataset\n",
        "- Algebraically defined and mathematically tractable\n",
        "- Widely understood and accepted\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "### Disadvantages\n",
        "- Affected by outliers and skewed distributions\n",
        "- May not represent a typical value in skewed data\n",
        "- Cannot be used with nominal or ordinal data\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "# The Median\n",
        "*12 minutes*\n",
        "\n",
        "## Definition\n",
        "\n",
        "::: {.definition}\n",
        "**🎯 Definition:** The **median** is the middle value when data is arranged in ascending or descending order.\n",
        ":::\n",
        "\n",
        "## Calculation Steps\n",
        "\n",
        "1. **Arrange data** in ascending order\n",
        "2. **Find the middle position:**\n",
        "   - If n is odd: position = $\\frac{n + 1}{2}$\n",
        "   - If n is even: average of positions $\\frac{n}{2}$ and $\\frac{n}{2} + 1$\n",
        "\n",
        "## Examples{.smaller}\n",
        ":::{.fragment}\n",
        "### Odd number of values:\n",
        ":::{.incremental}\n",
        "- Data: 12, 15, 18, 20, 25\n",
        "\n",
        "- What is the median here ?\n",
        "\n",
        "- **Median = 18** (middle value)\n",
        ":::\n",
        ":::\n",
        ":::{.fragment}\n",
        "### Even number of values:\n",
        ":::{.incremental}\n",
        "- Data: 10, 15, 20, 25, 30, 35\n",
        "  \n",
        "- What is the median here ?\n",
        "  \n",
        "- **Median = $\\frac{20 + 25}{2} = 22.5$**\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Properties of the Median\n",
        ":::{.incremental}\n",
        "- **Not affected by outliers** - resistant measure\n",
        "- **Represents the 50th percentile**\n",
        "- **May not be an actual data value** (when n is even)\n",
        "- **Appropriate for ordinal, interval, and ratio data**\n",
        "- **Divides data into two equal halves**\n",
        ":::\n",
        "\n",
        "## When to Use the Median\n",
        "\n",
        "✅ **Use the median when:**\n",
        "\n",
        "- Data is **skewed** (not symmetric)\n",
        "- **Outliers** are present\n",
        "- Working with **ordinal data**\n",
        "- Want a **robust measure** of central tendency\n",
        "- Data represents **income, housing prices**, or similar distributions\n",
        "\n",
        "## Median vs Mean with Outliers\n",
        "\n",
        "Consider household incomes: $30,000, $32,000, $35,000, $38,000, $2,000,000\n",
        "\n",
        ". . .\n",
        "\n",
        "- **Mean = $427,000** (not representative of typical household)\n",
        "- **Median = $35,000** (better represents typical household)\n",
        "\n",
        "# The Mode\n",
        "*11 minutes*\n",
        "\n",
        "## Definition\n",
        "\n",
        "::: {.definition}\n",
        "**🎯 Definition:** The **mode** is the value that appears most frequently in a dataset.\n",
        ":::\n",
        "\n",
        "```{mermaid}\n",
        "%%{init: {'flowchart': {'nodeSpacing': 100, 'rankSpacing': 100}, 'width': 600, 'height': 400}}%%\n",
        "graph TD\n",
        "    A[\"Mode Types\"]\n",
        "    A --> B[\"Unimodal<br/>One peak\"]\n",
        "    A --> C[\"Bimodal<br/>Two peaks\"]\n",
        "    A --> D[\"Multimodal<br/>Multiple peaks\"]\n",
        "    A --> E[\"No Mode<br/>No repeated values\"]\n",
        "    \n",
        "    classDef main fill:#e1f5fe,stroke:#01579b,stroke-width:3px,font-size:16px\n",
        "    classDef types fill:#f5f5f5,stroke:#424242,stroke-width:2px,font-size:14px\n",
        "    \n",
        "    class A main\n",
        "    class B,C,D,E types\n",
        "```\n",
        "## Types of Distributions by Mode\n",
        "\n",
        "- **Unimodal**: One mode\n",
        "- **Bimodal**: Two modes  \n",
        "- **Multimodal**: More than two modes\n",
        "- **No mode**: All values appear with equal frequency\n",
        "\n",
        "\n",
        "\n",
        "# Mode Examples\n",
        "\n",
        "## Example 1:\n",
        "\n",
        "Data: 2, 3, 3, 4, 5, 5, 5, 6, 7\n",
        "\n",
        ":::{.fragment}\n",
        "\n",
        "Analysis:\n",
        "\n",
        ":::{.incremental}\n",
        "- Count each value: 2(1), 3(2), 4(1), 5(3), 6(1), 7(1)\n",
        "- Most frequent value: 5 appears 3 times\n",
        "- Mode = 5\n",
        "- Type: **Unimodal (one mode)**\n",
        ":::\n",
        ":::\n",
        "---\n",
        "\n",
        "## Example 2:\n",
        "Data: 1, 2, 2, 3, 4, 4, 5\n",
        "\n",
        ":::{.fragment}\n",
        "\n",
        "Analysis:\n",
        "\n",
        ":::{.incremental}\n",
        "- Count each value: 1(1), 2(2), 3(1), 4(2), 5(1)\n",
        "- Most frequent values: 2 and 4 both appear twice\n",
        "- Modes = 2 and 4\n",
        "- Type: **Bimodal (two modes)**\n",
        ":::\n",
        ":::\n",
        "---\n",
        "\n",
        "## Example 3: \n",
        "Data: 1, 2, 3, 4, 5\n",
        "\n",
        ":::{.fragment}\n",
        "\n",
        "Analysis:\n",
        "\n",
        ":::{.incremental}\n",
        "- Count each value: 1(1), 2(1), 3(1), 4(1), 5(1)\n",
        "- All values appear exactly once\n",
        "- No mode (no value repeats)\n",
        "- Type: **No mode**\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Mode for Different Data Types{.smaller}\n",
        "\n",
        "### Categorical Data:\n",
        "Favorite colors: Red, Blue, Blue, Green, Blue, Red, Blue\n",
        "**Mode = Blue**\n",
        "\n",
        "\n",
        "### Continuous Data:\n",
        "Often requires grouping into intervals or bins\n",
        "Example: Heights grouped into ranges\n",
        "\n",
        "## Properties of the Mode\n",
        "\n",
        "- **Can be used with any type of data** (nominal, ordinal, interval, ratio)\n",
        "- **Not affected by outliers**\n",
        "- **May not exist** or may not be unique\n",
        "- **Represents the most common value**\n",
        "- **Easy to identify** in frequency distributions\n",
        "\n",
        "## When to Use the Mode\n",
        "\n",
        "✅ **Use the mode when:**\n",
        "\n",
        "- Working with **categorical (nominal) data**\n",
        "- Want to identify the **most popular** or **common** choice\n",
        "- Data has clear **peaks** in frequency\n",
        "- **Quality control** applications (most common defect type)\n",
        "- **Business applications** (best-selling product, most common customer complaint)\n",
        "\n",
        "## Comparing Measures of Central Tendency {.smaller}\n",
        "\n",
        "| Measure | Best for Data Type | Strengths | Weaknesses | Affected by Outliers? |\n",
        "|---------|-------------------|-----------|------------|---------------------|\n",
        "| Mean | Interval, Ratio | Uses all data, mathematically tractable | Sensitive to outliers | Yes |\n",
        "| Median | Ordinal, Interval, Ratio | Robust to outliers, represents middle | Ignores extreme values | No |\n",
        "| Mode | All types | Works with categorical, identifies most common | May not exist/be unique | No |\n",
        "\n",
        "## Shape of Distribution Effects {.smaller}\n",
        "\n",
        "- **Symmetric distribution**: Mean ≈ Median ≈ Mode\n",
        "- **Right-skewed (positively skewed)**: Mean > Median > Mode  \n",
        "- **Left-skewed (negatively skewed)**: Mode > Median > Mean\n",
        "\n",
        "![](/files/lecture_notes/lecture2/img/mean_mod_median.png)\n",
        "\n",
        "\n",
        "# Python Implementation {#sec-python-implementation}\n",
        "*15 minutes*\n",
        "\n",
        "---\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### Important Python  Libraries"
      ],
      "id": "938a8855"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "import numpy as np # for data manipulation \n",
        "import pandas as pd # for data manipulation \n",
        "from scipy import stats # for advanced statistics\n",
        "import matplotlib.pyplot as plt # for visulization\n",
        "import seaborn as sns # for advanced visulization"
      ],
      "id": "30bf655c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Library Overview {.smaller}\n",
        "\n",
        "::: {.smaller}\n",
        "| Library     | Purpose               | Key Functions                                         |\n",
        "|:------------|:----------------------|:------------------------------------------------------|\n",
        "| **NumPy**   | Numerical computing   | `np.mean()`, `np.median()`, `np.std()`                |\n",
        "| **Pandas**  | Data manipulation     | `df.describe()`, `df.mean()`, `df.median()`           |\n",
        "| **SciPy**   | Scientific computing  | `stats.mode()`, `stats.describe()`                    |\n",
        "| **Matplotlib** | Basic plotting     | `plt.plot()`, `plt.hist()`, `plt.boxplot()`           |\n",
        "| **Seaborn** | Statistical viz       | `sns.histplot()`, `sns.boxplot()`                     |\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "## Central Measures {.smaller}\n",
        "<style>\n",
        "/* shrink the entire tabset content */\n",
        ".smaller .panel-tabset {\n",
        "  font-size: 0.8em;    /* adjust this */\n",
        "}\n",
        "/* shrink just the tab labels */\n",
        ".smaller .panel-tabset > .tabset-nav .nav-link {\n",
        "  font-size: 0.75em;   /* adjust this too if you like */\n",
        "  padding: 0.25rem 0.5rem;\n",
        "}\n",
        "</style>\n",
        "\n",
        ":::{.smaller}\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### Mean Calculation"
      ],
      "id": "38708800"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "# Import numpy library for numeric operations\n",
        "import numpy as np \n",
        "\n",
        "# Import pandas library for data structures\n",
        "import pandas as pd\n",
        "\n",
        "# Define sample data as a list of test scores\n",
        "data = [85, 90, 78, 92, 88, 91, 85, 87, 89, 86]\n",
        "\n",
        "# Compute the arithmetic mean using NumPy\n",
        "mean_np = np.mean(data)\n",
        "print(f\"Mean (NumPy): {mean_np:.2f}\")\n",
        "\n",
        "# Convert the data list into a pandas DataFrame\n",
        "df = pd.DataFrame({'scores': data})\n",
        "\n",
        "# Compute the arithmetic mean using Pandas\n",
        "mean_pd = df['scores'].mean()\n",
        "print(f\"Mean (Pandas): {mean_pd:.2f}\")\n",
        "\n",
        "# Manually sum all scores and divide by count\n",
        "manual_mean = sum(data) / len(data)\n",
        "print(f\"Mean (Manual): {manual_mean:.2f}\")"
      ],
      "id": "2e7eedd2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Median Calculation"
      ],
      "id": "7a94c0f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "# Compute the median value using NumPy\n",
        "median_np = np.median(data)\n",
        "print(f\"Median (NumPy): {median_np:.2f}\")\n",
        "\n",
        "# Compute the median value using Pandas\n",
        "median_pd = df['scores'].median()\n",
        "print(f\"Median (Pandas): {median_pd:.2f}\")\n",
        "\n",
        "# Sort the data list in ascending order\n",
        "sorted_data = sorted(data)\n",
        "\n",
        "# Determine the number of elements\n",
        "n = len(sorted_data)\n",
        "\n",
        "# If even count, average the two middle elements; else take middle element\n",
        "if n % 2 == 0:\n",
        "    manual_median = (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2\n",
        "else:\n",
        "    manual_median = sorted_data[n//2]\n",
        "\n",
        "print(f\"Median (Manual): {manual_median:.2f}\")"
      ],
      "id": "1d2fa84f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Mode Calculation"
      ],
      "id": "9adadb50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "# Import SciPy stats module to compute mode\n",
        "from scipy import stats\n",
        "\n",
        "# Use SciPy to find the most common value and its count\n",
        "mode_result = stats.mode(data, keepdims=True)\n",
        "print(f\"Mode (SciPy): {mode_result.mode[0]}, Count: {mode_result.count[0]}\")\n",
        "\n",
        "# Use Pandas to get mode(s) from the DataFrame\n",
        "mode_pd = df['scores'].mode()\n",
        "print(f\"Mode (Pandas): {mode_pd.values}\")\n",
        "\n",
        "# Import Counter for manual frequency counting\n",
        "from collections import Counter\n",
        "\n",
        "# Count occurrences of each score\n",
        "counter = Counter(data)\n",
        "\n",
        "# Find the highest frequency\n",
        "max_count = max(counter.values())\n",
        "\n",
        "# Identify all values that appear with that frequency\n",
        "modes = [k for k, v in counter.items() if v == max_count]\n",
        "\n",
        "print(f\"Mode (Manual): {modes}, Count: {max_count}\")"
      ],
      "id": "a9717fe2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: \n",
        "\n",
        "## Mean, Mode and Median Visualization {.smaller}\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### Code"
      ],
      "id": "9ed2a0ab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "# import libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from collections import Counter\n",
        "import matplotlib.pyplot as plt\n",
        "# define your data and compute statistics here\n",
        "data = [85, 90, 78, 92, 88, 91, 85, 87, 89, 86]\n",
        "mean_np   = np.mean(data)\n",
        "median_np = np.median(data)\n",
        "# for mode, use Counter\n",
        "counter   = Counter(data)\n",
        "max_count = max(counter.values())\n",
        "modes     = [k for k,v in counter.items() if v==max_count]\n",
        "mode_val  = modes[0]"
      ],
      "id": "40b07aaf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Visualization"
      ],
      "id": "20baef34"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-cap: \"Distribution of Test Scores with Central Tendency Measures\"\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n",
        "\n",
        "# Histogram with central tendencies\n",
        "ax1.hist(data, bins=8, alpha=0.7, edgecolor='black')\n",
        "ax1.axvline(mean_np,   color='red',    linestyle='--', linewidth=2, label=f'Mean: {mean_np:.1f}')\n",
        "ax1.axvline(median_np, color='green',  linestyle='--', linewidth=2, label=f'Median: {median_np:.1f}')\n",
        "ax1.axvline(mode_val,  color='orange', linestyle='--', linewidth=2, label=f'Mode: {mode_val}')\n",
        "ax1.set(title='Distribution with Central Tendency', xlabel='Test Scores', ylabel='Frequency')\n",
        "ax1.legend(); ax1.grid(alpha=0.3)\n",
        "\n",
        "# Box plot\n",
        "ax2.boxplot(data, patch_artist=True,\n",
        "            boxprops=dict(facecolor='lightblue', alpha=0.7),\n",
        "            medianprops=dict(color='red', linewidth=2))\n",
        "ax2.set(title='Box Plot of Test Scores', ylabel='Test Scores')\n",
        "ax2.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "a913bfad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "# Real-world Applications{#sec-real-world-ex}\n",
        "*5 minutes*\n",
        "\n",
        "## Business Applications\n",
        "\n",
        "- **Customer Satisfaction**: Mean rating shows overall satisfaction, median shows typical experience\n",
        "- **Sales Data**: Mode identifies best-selling products, median shows typical sale amount  \n",
        "- **Employee Performance**: Mean for overall team performance, median for typical employee\n",
        "\n",
        "## Educational Applications\n",
        "\n",
        "- **Test Scores**: Mean for class average, median for typical student performance\n",
        "- **Grade Distribution**: Mode shows most common grade\n",
        "- **Attendance**: Mean for overall attendance rate\n",
        "\n",
        "## Healthcare Applications\n",
        "\n",
        "- **Patient Wait Times**: Median often preferred due to skewed distributions\n",
        "- **Treatment Outcomes**: Mean for overall effectiveness, mode for most common result\n",
        "- **Vital Signs**: All three measures provide different insights\n",
        "\n",
        "## Interpretation Guidelines\n",
        "\n",
        "1. **Always consider the context** of your data\n",
        "2. **Report multiple measures** when appropriate  \n",
        "3. **Be aware of data distribution shape**\n",
        "4. **Consider the presence of outliers**\n",
        "5. **Choose the most appropriate measure** for your specific question\n",
        "\n",
        "# Key Takeaways\n",
        "\n",
        "## Remember These Points\n",
        "\n",
        "- **Data type determines** which statistics are appropriate\n",
        "- **Mean** uses all data but is sensitive to outliers\n",
        "- **Median** is robust and represents the middle value\n",
        "- **Mode** identifies the most common value and works with all data types\n",
        "- **Context matters** when choosing and interpreting measures\n",
        "- **Python provides powerful tools** for calculating descriptive statistics\n",
        "\n",
        "## Next Lecture Preview\n",
        "\n",
        "**Descriptive Statistics Part II** will cover:\n",
        "\n",
        "- Measures of variability (range, variance, standard deviation)\n",
        "- Measures of position (percentiles, quartiles, z-scores)\n",
        "- Shape of distributions (skewness and kurtosis)\n",
        "- Advanced Python visualization techniques\n",
        "\n",
        "# Practice Problems\n",
        "\n",
        "## Try These Problems\n",
        "\n",
        "1. Calculate mean, median, and mode for: 12, 15, 18, 12, 20, 25, 12, 30\n",
        "\n",
        "2. A dataset has mean = 50 and median = 45. What does this tell you about the distribution?\n",
        "\n",
        "3. Why might median be preferred over mean for reporting household income?\n",
        "\n",
        "4. Create a Python function to identify the most appropriate measure of central tendency for a given dataset.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Questions?\n",
        "\n",
        "Thank you for your attention!\n",
        "\n",
        "\n",
        "# References & Further Reading {.smaller}\n",
        "\n",
        "- [*OpenIntro Statistics*, Ch. 1 & 2](/files/Book/os4_for_screen_reader.pdf)\n",
        "  \n",
        "- [*Python for Data Analysis* (McKinney), Ch. 5](https://learning.oreilly.com/library/view/data-science-from/9781491901410/ch05.html#idp14953264)\n",
        "  \n",
        "- [UCSB Library Data Lab workshops ](https://carpentry.library.ucsb.edu/2025-01-14-python-ecology-lesson/04-data-types-and-format.html)\n",
        "  \n",
        "- [pandas DataFrame.describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html)\n",
        "  \n",
        "- [NumPy statistical functions](https://numpy.org/doc/2.1/reference/routines.statistics.html)\n",
        "  \n",
        "- [SciPy stats module reference](https://docs.scipy.org/doc/scipy/reference/stats.html) \n"
      ],
      "id": "011d7c45"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/narjesmathlouthi/Desktop/PSTAT5A/web/PSTAT5A/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}