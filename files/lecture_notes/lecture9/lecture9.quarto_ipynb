{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"From Random Variables to Sampling & Confidence Intervals\"\n",
        "subtitle: \"Review of Concepts, Applications & Confidence Intervals Intro\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/lecture7/new-style.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data – Random Variables  © 2025 Narjes Mathlouthi\"\n",
        "    controls-layout: edges\n",
        "    controls-tutorial: false\n",
        "    hash: true\n",
        "    history: true\n",
        "    hash-one-based-index: false\n",
        "    fragment-in-url: false\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "    pdf-separate-fragments: false\n",
        "    lang: en\n",
        "    auto-stretch: true\n",
        "    includes:\n",
        "      after_body: home-button.html\n",
        "execute:\n",
        "  echo: true\n",
        "  warning: false\n",
        "jupyter: pstat5a\n",
        "---\n",
        "\n",
        "## Today's Learning Objectives\n",
        "\n",
        "By the end of this session, you will be able to:\n",
        "\n",
        "- Define what a random variable is\n",
        "- Distinguish between different types of random variables\n",
        "- Identify examples of random variables in your field of study\n",
        "- Connect probability concepts to real-world applications\n",
        "\n",
        "## What is a Random Variable?\n",
        "\n",
        "::: {.incremental}\n",
        "- A **random variable (r.v.)** is a function that assigns numerical values to the outcomes of a random experiment\n",
        "- Notation: Usually denoted by capital letters (X, Y, Z)\n",
        "- It's a bridge between the sample space and real numbers\n",
        "- Think of it as a \"rule\" that translates outcomes into numbers\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "**Key Point:** It's not actually \"random\", it's a deterministic function applied to random outcomes!\n",
        ":::\n",
        "\n",
        "## Real-World Connection"
      ],
      "id": "2d74cb40"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "import seaborn as sns\n",
        "\n",
        "# Set style\n",
        "plt.style.use('seaborn-v0_8')\n",
        "sns.set_palette(\"husl\")\n",
        "\n",
        "# Create a simple illustration\n",
        "outcomes = [\"Neither\", \"Floods\", \"Droughts\"]\n",
        "probabilities = [0.45, 0.3, 0.25]\n",
        "x_values = [0, 1, 2]\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "bars = ax.bar(x_values, probabilities, alpha=0.7, color=['lightblue', 'orange', 'lightcoral'])\n",
        "\n",
        "# Add labels\n",
        "for i, (outcome, prob, x_val) in enumerate(zip(outcomes, probabilities, x_values)):\n",
        "    ax.text(x_val, prob/2, f'{outcome}\\nX = {x_val}', \n",
        "            ha='center', va='center', fontweight='bold', fontsize=12)\n",
        "\n",
        "ax.set_title('Random Variable Example: Weather Conditions', fontsize=16, fontweight='bold')\n",
        "ax.set_xlabel('Random Variable X', fontsize=14)\n",
        "ax.set_ylabel('Probability', fontsize=14)\n",
        "ax.set_xticks(x_values)\n",
        "ax.set_ylim(0, 0.5)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "5bf964ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Activity: Your Research Field\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "\n",
        "::: {.callout-tip}\n",
        "## Think About Your Major/Research Area\n",
        "\n",
        "Take 2 minutes to brainstorm:\n",
        "\n",
        "1. What random phenomena occur in your field?\n",
        "2. How might you assign numbers to these outcomes?\n",
        "3. What questions could you answer with this data?\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        ":::{.fragment}\n",
        ":::{.callout-tip}\n",
        "### Examples by Field\n",
        "\n",
        "- **Psychology:** Reaction times, survey responses\n",
        "  \n",
        "- **Biology:** Species counts, gene expression levels \n",
        "   \n",
        "- **Economics:** Stock prices, unemployment rates\n",
        "  \n",
        "- **Engineering:** System failures, signal strength\n",
        ":::\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "# Types of Random Variables\n",
        "\n",
        "## Discrete Random Variables {.smaller}\n",
        "\n",
        "::: {.incremental}\n",
        "- **Definition:** Takes on countable values (finite or countably infinite)\n",
        "- **Examples:**\n",
        "  - Number of emails received per day\n",
        "  - Number of defective products in a batch\n",
        "  - Student enrollment in courses\n",
        "  - Number of research papers published per year\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "**Note:** If X is discrete, then **X** can take values $x_1, x_2, x_3, \\cdot$ where we can list all possible values.\n",
        ":::\n",
        "\n",
        "## Continuous Random Variables {.smaller}\n",
        "\n",
        "::: {.incremental}\n",
        "- **Definition:** Takes on uncountably infinite values (any value in an interval)\n",
        "- **Examples:**\n",
        "  - Height of students\n",
        "  - Time until equipment failure\n",
        "  - Temperature measurements\n",
        "  - GPA (technically discrete, but often treated as continuous)\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "**Note:** If $X$ is continuous, then $X$ can take any value in an interval $[a,b]$ or $(-\\infty, \\infty)$.\n",
        ":::\n",
        "\n",
        "## Sampling and Random Variables"
      ],
      "id": "f12f5a2c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Simulate the UCSB example\n",
        "np.random.seed(456)\n",
        "population_size = 10000\n",
        "sample_size = 30\n",
        "num_samples = 100\n",
        "\n",
        "# Generate population heights (normally distributed)\n",
        "population_heights = np.random.normal(loc=68, scale=4, size=population_size)\n",
        "\n",
        "# Function to take samples and calculate means\n",
        "sample_means = []\n",
        "for _ in range(num_samples):\n",
        "    sample_data = np.random.choice(population_heights, size=sample_size, replace=False)\n",
        "    sample_means.append(np.mean(sample_data))\n",
        "\n",
        "# Create the visualization\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))\n",
        "\n",
        "# Population distribution\n",
        "ax1.hist(population_heights, bins=50, alpha=0.7, color='lightblue', edgecolor='black')\n",
        "ax1.axvline(np.mean(population_heights), color='red', linestyle='--', linewidth=2, label=f'μ = {np.mean(population_heights):.2f}')\n",
        "ax1.set_title(f'Population: All UCSB Students\\nN = {population_size}', fontsize=14, fontweight='bold')\n",
        "ax1.set_xlabel('Height (inches)', fontsize=12)\n",
        "ax1.set_ylabel('Frequency', fontsize=12)\n",
        "ax1.legend()\n",
        "\n",
        "# Sample means distribution\n",
        "ax2.hist(sample_means, bins=20, alpha=0.7, color='lightgreen', edgecolor='black')\n",
        "ax2.axvline(np.mean(sample_means), color='red', linestyle='--', linewidth=2, label=f'X̄ = {np.mean(sample_means):.2f}')\n",
        "ax2.set_title(f'Sample Means Distribution\\n{num_samples} samples of n = {sample_size}', fontsize=14, fontweight='bold')\n",
        "ax2.set_xlabel('Sample Mean Height', fontsize=12)\n",
        "ax2.set_ylabel('Frequency', fontsize=12)\n",
        "ax2.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "57d5b1d6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Central Limit Theorem Connection {.smaller}\n",
        "\n",
        "\n",
        "::: {.incremental}\n",
        "- When we repeatedly sample from a population, the **sample mean** becomes a random variable\n",
        "- Formula: $\\bar{X} = \\frac{1}{n}\\sum_{i=1}^{n} X_i$\n",
        "- Each time we sample, we get a different $\\bar{X}$\n",
        "- The distribution of $\\bar{X}$ has special properties!\n",
        ":::\n",
        "\n",
        "\n",
        "## Central Limit Theorem Connection {.smaller}\n",
        ":::{.columns}\n",
        ":::{.column .smaller}\n",
        "::: {.incremental}\n",
        "These properties are :\n",
        "\n",
        "- **Center (Unbiased):** $E[\\bar{X}] = \\mu$.\n",
        "- **Spread Shrinks with $n$:** $\\mathrm{Var}(\\bar{X}) = \\sigma^2/n$; $\\mathrm{SE}(\\bar{X}) = \\sigma/\\sqrt{n}$ (estimate with $s/\\sqrt{n}$).\n",
        "- **Shape:**  \n",
        "  - If the population is Normal, then $\\bar{X} \\sim \\text{Normal}(\\mu, \\sigma^2/n)$ *exactly*.  \n",
        "  - Otherwise, **CLT:** for large $n$, $\\bar{X}$ is *approximately Normal* even when the data aren’t.\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        "::: {.incremental}\n",
        "- **Consistency / Law of Large Numbers:** $\\bar{X} \\xrightarrow{P} \\mu$ as $n \\to \\infty$ (estimates get closer to the truth with more data).\n",
        "- **(If sampling w/out replacement, pop size $N$):** Apply finite population correction (FPC):  \n",
        "$\\mathrm{SE}(\\bar{X}) = \\dfrac{\\sigma}{\\sqrt{n}}\\sqrt{\\dfrac{N-n}{N-1}}$.\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Common Discrete Distributions\n",
        "\n",
        "### Binomial Distribution - Characteristics {.smaller}\n",
        "\n",
        "::: columns\n",
        "::: {.column width=\"60%\" }\n",
        ":::{.smaller}\n",
        "\n",
        "- **Fixed** number of trials (n)\n",
        "  \n",
        "- Each trial has two outcomes\n",
        "  \n",
        "- Constant probability of success\n",
        "  \n",
        "- Trials are **independent**\n",
        "\n",
        "**Example:** Number of successful research grants out of 10 applications\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}"
      ],
      "id": "e1dcb0dc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Binomial distribution example\n",
        "n = 10\n",
        "p = 0.3\n",
        "x = np.arange(0, n+1)\n",
        "prob = stats.binom.pmf(x, n, p)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 5))\n",
        "bars = ax.bar(x, prob, alpha=0.7, color='steelblue', edgecolor='black')\n",
        "\n",
        "# Add probability labels on bars\n",
        "for i, (xi, pi) in enumerate(zip(x, prob)):\n",
        "    ax.text(xi, pi + 0.01, f'{pi:.3f}', ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "ax.set_title('Binomial Distribution\\nn = 10, p = 0.3', fontsize=14, fontweight='bold')\n",
        "ax.set_xlabel('Number of Successes', fontsize=12)\n",
        "ax.set_ylabel('Probability', fontsize=12)\n",
        "ax.set_xticks(x)\n",
        "ax.set_ylim(0, max(prob) * 1.2)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "f5bc466b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "## Poisson Distribution - Characteristics {.smaller}\n",
        "\n",
        "::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "\n",
        "- Models rare events\n",
        "  \n",
        "- Events occur independently\n",
        "  \n",
        "- Constant average rate\n",
        "  \n",
        "- Useful for counts over <i>time/space</i>\n",
        "\n",
        "**Example:** Number of emails received per hour, number of mutations in DNA sequences\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "5c0f1a72"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Poisson distribution example\n",
        "lambda_param = 3\n",
        "x = np.arange(0, 13)\n",
        "prob = stats.poisson.pmf(x, lambda_param)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 5))\n",
        "bars = ax.bar(x, prob, alpha=0.7, color='coral', edgecolor='black')\n",
        "\n",
        "# Add probability labels on bars\n",
        "for i, (xi, pi) in enumerate(zip(x, prob)):\n",
        "    ax.text(xi, pi + 0.01, f'{pi:.3f}', ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "ax.set_title('Poisson Distribution\\nλ = 3', fontsize=14, fontweight='bold')\n",
        "ax.set_xlabel('Number of Events', fontsize=12)\n",
        "ax.set_ylabel('Probability', fontsize=12)\n",
        "ax.set_xticks(x)\n",
        "ax.set_ylim(0, max(prob) * 1.2)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "4e4507ba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "## Common Continuous Distributions\n",
        "\n",
        "### Normal Distribution - Characteristics {.smaller}\n",
        "\n",
        "::: columns\n",
        "::: {.column .smaller width=\"50%\"}\n",
        "\n",
        "\n",
        "- Bell-shaped curve\n",
        "  \n",
        "- Symmetric around mean\n",
        "  \n",
        "- Parameters: $\\mu$ (mean), $\\sigma$ (standard deviation)\n",
        "  \n",
        "- Many natural phenomena follow this pattern\n",
        "\n",
        "**Example:** Heights, test scores, measurement errors\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "69d6ee56"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Normal distribution example\n",
        "x = np.linspace(-4, 4, 1000)\n",
        "y = stats.norm.pdf(x, loc=0, scale=1)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 5))\n",
        "ax.plot(x, y, color='darkblue', linewidth=2, label='PDF')\n",
        "ax.fill_between(x, y, alpha=0.3, color='lightblue')\n",
        "ax.axvline(0, color='red', linestyle='--', linewidth=2, label='μ = 0')\n",
        "\n",
        "ax.set_title('Standard Normal Distribution\\nμ = 0, σ = 1', fontsize=14, fontweight='bold')\n",
        "ax.set_xlabel('Value', fontsize=12)\n",
        "ax.set_ylabel('Density', fontsize=12)\n",
        "ax.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "1c3b767e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "## Exponential Distribution - Characteristics {.smaller}\n",
        "\n",
        "::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "- Models waiting times\n",
        "  \n",
        "- Memoryless property\n",
        "  \n",
        "- Parameter: $\\lambda$ (rate)\n",
        "  \n",
        "- Right-skewed\n",
        "\n",
        "**Example:** Time between arrivals, equipment lifespan, time to next earthquake\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "2a498570"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Exponential distribution example\n",
        "x = np.linspace(0, 5, 1000)\n",
        "lambda_param = 1.5\n",
        "y = stats.expon.pdf(x, scale=1/lambda_param)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 5))\n",
        "ax.plot(x, y, color='darkgreen', linewidth=2, label='PDF')\n",
        "ax.fill_between(x, y, alpha=0.3, color='lightgreen')\n",
        "\n",
        "ax.set_title('Exponential Distribution\\nλ = 1.5', fontsize=14, fontweight='bold')\n",
        "ax.set_xlabel('Time', fontsize=12)\n",
        "ax.set_ylabel('Density', fontsize=12)\n",
        "ax.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "451a8831",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "## Interactive Activity: Choose Your Distribution\n",
        "\n",
        "::: {.callout-important}\n",
        "## Group Discussion (5 minutes)\n",
        "\n",
        "For each scenario, identify:\n",
        "1. Is the random variable discrete or continuous?\n",
        "2. What distribution might it follow?\n",
        "3. What are the parameters?\n",
        "\n",
        "**Scenarios:**\n",
        "- Number of students attending office hours per week\n",
        "- Time spent studying for an exam\n",
        "- Number of typos in a research paper\n",
        "- Body temperature of patients in a hospital\n",
        ":::\n",
        "\n",
        "## Application: Research Design {.smaller}\n",
        "\n",
        "::: {.incremental}\n",
        "**Consider your research question:**\n",
        "\n",
        "1. **Identify your random variable(s)**\n",
        "   - What are you measuring?\n",
        "   - What values can it take?\n",
        "\n",
        "2. **Choose appropriate distribution**\n",
        "   - Based on the nature of your data\n",
        "   - Consider the underlying process\n",
        "\n",
        "3. **Plan your analysis**\n",
        "   - How will you collect data?\n",
        "   - What statistical tests are appropriate?\n",
        ":::\n",
        "\n",
        "## Probability Mass vs. Density Functions {.smaller}\n",
        "\n",
        "::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "**Discrete: Probability Mass Function (PMF)**\n",
        "\n",
        "- $P(X = x)$ for specific values\n",
        "  \n",
        "- Sums to **1** over all possible values\n",
        "  \n",
        "- Can find exact probabilities\n",
        "\n",
        "Example: $P(X = 3) = 0.2$\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "**Continuous: Probability Density Function (PDF)**\n",
        "\n",
        "- $f(x)$ represents density\n",
        "  \n",
        "- Area under curve = **1**\n",
        "  \n",
        "- $P(X = x) = 0$ for any specific value\n",
        "  \n",
        "- Find probabilities over intervals\n",
        "\n",
        "Example: $P(a < X < b) =  \\int_{a}^{b} f(x)dx$\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Comparing Distributions Side-by-Side"
      ],
      "id": "e7112317"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Create a comparison of all distributions\n",
        "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
        "\n",
        "# Binomial\n",
        "n, p = 10, 0.3\n",
        "x_binom = np.arange(0, n+1)\n",
        "prob_binom = stats.binom.pmf(x_binom, n, p)\n",
        "axes[0,0].bar(x_binom, prob_binom, alpha=0.7, color='steelblue')\n",
        "axes[0,0].set_title('Binomial Distribution\\n(n=10, p=0.3)', fontweight='bold')\n",
        "axes[0,0].set_xlabel('Number of Successes')\n",
        "axes[0,0].set_ylabel('Probability')\n",
        "\n",
        "# Poisson\n",
        "lambda_param = 3\n",
        "x_poisson = np.arange(0, 13)\n",
        "prob_poisson = stats.poisson.pmf(x_poisson, lambda_param)\n",
        "axes[0,1].bar(x_poisson, prob_poisson, alpha=0.7, color='coral')\n",
        "axes[0,1].set_title('Poisson Distribution\\n(λ=3)', fontweight='bold')\n",
        "axes[0,1].set_xlabel('Number of Events')\n",
        "axes[0,1].set_ylabel('Probability')\n",
        "\n",
        "# Normal\n",
        "x_norm = np.linspace(-4, 4, 1000)\n",
        "y_norm = stats.norm.pdf(x_norm, 0, 1)\n",
        "axes[1,0].plot(x_norm, y_norm, color='darkblue', linewidth=2)\n",
        "axes[1,0].fill_between(x_norm, y_norm, alpha=0.3, color='lightblue')\n",
        "axes[1,0].set_title('Normal Distribution\\n(μ=0, σ=1)', fontweight='bold')\n",
        "axes[1,0].set_xlabel('Value')\n",
        "axes[1,0].set_ylabel('Density')\n",
        "\n",
        "# Exponential\n",
        "x_exp = np.linspace(0, 5, 1000)\n",
        "y_exp = stats.expon.pdf(x_exp, scale=1/1.5)\n",
        "axes[1,1].plot(x_exp, y_exp, color='darkgreen', linewidth=2)\n",
        "axes[1,1].fill_between(x_exp, y_exp, alpha=0.3, color='lightgreen')\n",
        "axes[1,1].set_title('Exponential Distribution\\n(λ=1.5)', fontweight='bold')\n",
        "axes[1,1].set_xlabel('Time')\n",
        "axes[1,1].set_ylabel('Density')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7b98112b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Confidence Intervals for Means {.smaller}\n",
        "\n",
        "::: {.incremental}\n",
        "- **Problem:** We have one sample mean, but want to estimate the population mean\n",
        "- **Solution:** Use the sampling distribution to create a **confidence interval**\n",
        "- **Key Insight:** If we know how $\\bar{X}$ varies, we can make probabilistic statements about μ\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "**95% Confidence Interval Formula:**\n",
        "$\\bar{x} \\pm 1.96 \\times \\frac{\\sigma}{\\sqrt{n}}$\n",
        "\n",
        "**Interpretation:** \"We are 95% confident that the true population mean lies within this interval\"\n",
        ":::\n",
        "\n",
        "## Visualizing Confidence Intervals"
      ],
      "id": "ae51ab6f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Demonstrate confidence intervals\n",
        "np.random.seed(42)\n",
        "true_population_mean = 68  # True height\n",
        "population_std = 4\n",
        "sample_size = 30\n",
        "num_samples = 20\n",
        "\n",
        "# Generate multiple samples and their confidence intervals\n",
        "sample_means = []\n",
        "ci_lower = []\n",
        "ci_upper = []\n",
        "covers_true_mean = []\n",
        "\n",
        "for i in range(num_samples):\n",
        "    # Take a sample\n",
        "    sample = np.random.normal(true_population_mean, population_std, sample_size)\n",
        "    sample_mean = np.mean(sample)\n",
        "    \n",
        "    # Calculate 95% confidence interval\n",
        "    margin_error = 1.96 * (population_std / np.sqrt(sample_size))\n",
        "    lower = sample_mean - margin_error\n",
        "    upper = sample_mean + margin_error\n",
        "    \n",
        "    sample_means.append(sample_mean)\n",
        "    ci_lower.append(lower)\n",
        "    ci_upper.append(upper)\n",
        "    \n",
        "    # Check if CI covers true mean\n",
        "    covers_true_mean.append(lower <= true_population_mean <= upper)\n",
        "\n",
        "# Create visualization\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "# Plot confidence intervals\n",
        "for i in range(num_samples):\n",
        "    color = 'green' if covers_true_mean[i] else 'red'\n",
        "    alpha = 0.8 if covers_true_mean[i] else 1.0\n",
        "    \n",
        "    # Plot the confidence interval\n",
        "    ax.plot([ci_lower[i], ci_upper[i]], [i, i], color=color, alpha=alpha, linewidth=3)\n",
        "    # Plot the sample mean\n",
        "    ax.plot(sample_means[i], i, 'o', color=color, markersize=8, alpha=alpha)\n",
        "\n",
        "# Add vertical line for true population mean\n",
        "ax.axvline(true_population_mean, color='blue', linestyle='--', linewidth=3, \n",
        "           label=f'True Population Mean (μ = {true_population_mean})')\n",
        "\n",
        "# Formatting\n",
        "ax.set_xlabel('Height (inches)', fontsize=14)\n",
        "ax.set_ylabel('Sample Number', fontsize=14)\n",
        "ax.set_title('95% Confidence Intervals from 20 Different Samples\\n' + \n",
        "             f'{sum(covers_true_mean)} out of {num_samples} intervals contain the true mean', \n",
        "             fontsize=16, fontweight='bold')\n",
        "ax.legend(fontsize=12)\n",
        "ax.grid(True, alpha=0.3)\n",
        "\n",
        "# Add text explanation\n",
        "coverage_rate = sum(covers_true_mean) / num_samples * 100\n",
        "ax.text(0.02, 0.98, f'Coverage Rate: {coverage_rate:.0f}%\\nExpected: ~95%', \n",
        "        transform=ax.transAxes, fontsize=12, verticalalignment='top',\n",
        "        bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "969361a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Confidence Interval Interpretation {.smaller}\n",
        "\n",
        "::: {.callout-important}\n",
        "## Common Misconceptions\n",
        "\n",
        "**❌ WRONG:** \"There's a 95% probability that μ is in this specific interval\"\n",
        "\n",
        "**✅ CORRECT:** \"If we repeated this process many times, 95% of the intervals we construct would contain the true μ\"\n",
        ":::\n",
        "\n",
        "::: {.incremental}\n",
        ":::{.callout-note}\n",
        "- The **interval** is random, not the population parameter\n",
        "- **Before** collecting data: 95% chance our method will work\n",
        "- **After** collecting data: The interval either contains μ or it doesn't\n",
        "- **Confidence level** = Long-run success rate of the method\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "## Factors Affecting Confidence Interval Width"
      ],
      "id": "3f3790c2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| fig-align: center\n",
        "\n",
        "# Show how different factors affect CI width\n",
        "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
        "\n",
        "# Factor 1: Sample size\n",
        "sample_sizes = [10, 30, 50, 100, 200]\n",
        "ci_widths_n = []\n",
        "for n in sample_sizes:\n",
        "    width = 2 * 1.96 * (4 / np.sqrt(n))  # 2 * margin of error\n",
        "    ci_widths_n.append(width)\n",
        "\n",
        "axes[0].plot(sample_sizes, ci_widths_n, 'bo-', linewidth=2, markersize=8)\n",
        "axes[0].set_xlabel('Sample Size (n)', fontsize=12)\n",
        "axes[0].set_ylabel('CI Width', fontsize=12)\n",
        "axes[0].set_title('Effect of Sample Size\\n(σ=4, 95% confidence)', fontweight='bold')\n",
        "axes[0].grid(True, alpha=0.3)\n",
        "\n",
        "# Factor 2: Confidence level\n",
        "confidence_levels = [90, 95, 99]\n",
        "z_values = [1.645, 1.96, 2.576]\n",
        "ci_widths_conf = []\n",
        "for z in z_values:\n",
        "    width = 2 * z * (4 / np.sqrt(30))\n",
        "    ci_widths_conf.append(width)\n",
        "\n",
        "axes[1].bar([str(cl)+'%' for cl in confidence_levels], ci_widths_conf, \n",
        "            color=['lightblue', 'orange', 'lightcoral'], alpha=0.7)\n",
        "axes[1].set_xlabel('Confidence Level', fontsize=12)\n",
        "axes[1].set_ylabel('CI Width', fontsize=12)\n",
        "axes[1].set_title('Effect of Confidence Level\\n(n=30, σ=4)', fontweight='bold')\n",
        "\n",
        "# Factor 3: Population standard deviation\n",
        "std_devs = [1, 2, 4, 6, 8]\n",
        "ci_widths_std = []\n",
        "for sigma in std_devs:\n",
        "    width = 2 * 1.96 * (sigma / np.sqrt(30))\n",
        "    ci_widths_std.append(width)\n",
        "\n",
        "axes[2].plot(std_devs, ci_widths_std, 'go-', linewidth=2, markersize=8)\n",
        "axes[2].set_xlabel('Population Std Dev (σ)', fontsize=12)\n",
        "axes[2].set_ylabel('CI Width', fontsize=12)\n",
        "axes[2].set_title('Effect of Variability\\n(n=30, 95% confidence)', fontweight='bold')\n",
        "axes[2].grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "0648ae09",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Key Takeaways {.smaller}\n",
        "\n",
        "::: {.incremental}\n",
        "1. **Random variables** translate random outcomes into numbers\n",
        "2. **Discrete** variables have countable values; **continuous** variables have uncountable values\n",
        "3. **Distributions** describe the probability patterns of random variables\n",
        "4. **Choosing the right distribution** depends on understanding your data's nature\n",
        "5. **Real applications** exist in every field - think about your research!\n",
        ":::\n",
        "\n",
        "## Next Steps\n",
        "\n",
        "::: {.callout-tip}\n",
        "## For Your Research/Interests \n",
        "\n",
        "1. **Identify random variables** in your field\n",
        "2. **Think about appropriate distributions**\n",
        "3. **Consider data collection methods**\n",
        "4. **Plan statistical analyses**\n",
        "5. **Connect theory to practice**\n",
        ":::\n",
        "\n",
        "## Questions and Discussion\n",
        "\n",
        "::: {.fragment}\n",
        "**Share with the class:**\n",
        "\n",
        "- What random variables are important in your field of study/major?\n",
        "  \n",
        "- Which distributions might be most relevant?\n",
        "  \n",
        "- What challenges do you anticipate in data collection?\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "**Thank you for your participation!**\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Appendix: Python Code Examples {.smaller .scrollable}"
      ],
      "id": "e56a75ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "import seaborn as sns\n",
        "\n",
        "# Generate random samples from different distributions\n",
        "\n",
        "# Binomial\n",
        "binom_data = np.random.binomial(n=10, p=0.3, size=100)\n",
        "\n",
        "# Poisson  \n",
        "poisson_data = np.random.poisson(lam=3, size=100)\n",
        "\n",
        "# Normal\n",
        "normal_data = np.random.normal(loc=0, scale=1, size=100)\n",
        "\n",
        "# Exponential\n",
        "exp_data = np.random.exponential(scale=1/1.5, size=100)\n",
        "\n",
        "# Create histograms\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n",
        "\n",
        "axes[0,0].hist(binom_data, bins=11, alpha=0.7, color='steelblue')\n",
        "axes[0,0].set_title('Binomial Sample')\n",
        "\n",
        "axes[0,1].hist(poisson_data, bins=15, alpha=0.7, color='coral')\n",
        "axes[0,1].set_title('Poisson Sample')\n",
        "\n",
        "axes[1,0].hist(normal_data, bins=20, alpha=0.7, color='lightblue')\n",
        "axes[1,0].set_title('Normal Sample')\n",
        "\n",
        "axes[1,1].hist(exp_data, bins=20, alpha=0.7, color='lightgreen')\n",
        "axes[1,1].set_title('Exponential Sample')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "1c3d0213",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Additional Resources {.smaller .scrollable}"
      ],
      "id": "55c0e13c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "# Useful Python libraries for statistics and probability\n",
        "import numpy as np           # Numerical computing\n",
        "import scipy.stats as stats  # Statistical functions\n",
        "import matplotlib.pyplot as plt  # Plotting\n",
        "import seaborn as sns        # Statistical visualization\n",
        "import pandas as pd          # Data manipulation\n",
        "\n",
        "# Quick reference for common distributions:\n",
        "# stats.binom.pmf(k, n, p)     # Binomial PMF\n",
        "# stats.poisson.pmf(k, lam)    # Poisson PMF  \n",
        "# stats.norm.pdf(x, mu, sigma) # Normal PDF\n",
        "# stats.expon.pdf(x, scale)    # Exponential PDF\n",
        "\n",
        "# Generate random samples:\n",
        "# np.random.binomial(n, p, size)\n",
        "# np.random.poisson(lam, size)\n",
        "# np.random.normal(mu, sigma, size)\n",
        "# np.random.exponential(scale, size)"
      ],
      "id": "c70c4474",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#\n",
        "\n",
        "```{=html}\n",
        "<a href=\"https://pstat5a.com/schedule.html\" class=\"main-page-btn\">🏠 Back to Main Page</a>\n",
        "```"
      ],
      "id": "c20f7ce1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "pstat5a",
      "language": "python",
      "display_name": "Python (pstat5a)",
      "path": "/Users/narjesmathlouthi/Library/Jupyter/kernels/pstat5a"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}