{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A: Sampling and Confidence Intervals\"\n",
        "subtitle: \"Lecture 11 - Making Sense of Uncertainty\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: 07/22/2025\n",
        "format:\n",
        "  revealjs:\n",
        "    slide-level: 2\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/lecture10/new-style.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data ‚Äì Sampling and Confidence Intervals ¬© 2025\"\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n"
      ],
      "id": "a02e08d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "from plotly.subplots import make_subplots\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import norm, t\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Set style\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "sns.set_palette(\"husl\")\n",
        "\n",
        "# Custom color palette\n",
        "colors = {\n",
        "    'primary': '#3b82f6',\n",
        "    'secondary': '#f59e0b', \n",
        "    'success': '#10b981',\n",
        "    'danger': '#ef4444',\n",
        "    'info': '#8b5cf6',\n",
        "    'light': '#f8fafc',\n",
        "    'dark': '#1f2937'\n",
        "}"
      ],
      "id": "bcc2ca6d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<a href=\"https://pstat5a.com/schedule.html\" class=\"main-page-btn\">üè† Back to Main Page</a>\n",
        "```\n",
        "\n",
        "# Welcome to Lecture 11 {.center}\n",
        "\n",
        "**From Samples to Populations: Understanding Uncertainty**\n",
        "\n",
        "<!-- <i>**\"In statistics, we make educated guesses about the whole by looking at a part\"** </i> -->\n",
        "\n",
        "---\n",
        "\n",
        "## üì¢ Important Announcements\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "### üìù Quiz 2 Details\n",
        "**When:**  \n",
        "- üìÖ **Date:** Friday, July 25  \n",
        "- ‚è∞ **Window:** 7 AM ‚Äì 12 AM  \n",
        "- ‚è≥ **Duration:** 1 hour once started\n",
        "\n",
        "**Where:** üíª Online via Canvas\n",
        "\n",
        "**Covers:** Material from Weeks 3-4\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "### üìö What to Expect\n",
        "- Discrete & continuous distributions\n",
        "- Probability calculations\n",
        "- Expected value & variance\n",
        "- Normal distribution applications\n",
        "- **Note:** Upload photos of written work for calculation problems\n",
        ":::\n",
        "::::\n",
        "\n",
        "## What We'll Learn Today üéØ \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "**Big Ideas:**\n",
        "\n",
        "- How **sample means** behave (they're surprisingly predictable!)\n",
        "- Why we use **intervals** instead of *single* numbers\n",
        "- How confident we can be in our estimates\n",
        "- Planning studies for the right precision\n",
        ":::\n",
        "::: {.column}\n",
        "**Skills You'll Gain:**\n",
        "\n",
        "- Build **confidence intervals** step-by-step\n",
        "- Interpret what confidence really means\n",
        "- Choose appropriate **sample sizes**\n",
        "- Avoid common mistakes in interpretation\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## From Observation ‚û°Ô∏è Experimentation: Why Design¬†Matters {.smaller}\n",
        "\n",
        ":::: {.incremental}\n",
        "- **Observational Study:** Passively record what already happens ‚Äî good for spotting patterns, but hidden *confounders* can fool us.\n",
        "- **Controlled Experiment:** Actively assign treatments; **randomization** balances the lurking variables so we can talk about *cause*.\n",
        "- **Randomization¬†& Replication:** Twin shields that protect us from bias and one‚Äëoff flukes.\n",
        "- **Probability Framework:** Sample space, events, and probabilities let us *quantify* uncertainty.\n",
        "::::"
      ],
      "id": "7e7c0d8f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 5
      },
      "source": [
        "# Create experiment design visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"Observational Pattern\", \"Controlled Experiment (Randomized)\",\n",
        "                   \"Anatomy of a Random Experiment\", \"Impact of Randomization\"),\n",
        "    specs=[[{\"type\": \"scatter\"}, {\"type\": \"scatter\"}],\n",
        "           [{\"type\": \"table\"}, {\"type\": \"scatter\"}]],\n",
        "    vertical_spacing=0.3,\n",
        "    horizontal_spacing=0.08\n",
        ")\n",
        "\n",
        "# Observational Study\n",
        "np.random.seed(42)\n",
        "study_groups = ['Low Exercise', 'Medium Exercise', 'High Exercise']\n",
        "health_scores = [65, 75, 85]\n",
        "\n",
        "for i, (group, score) in enumerate(zip(study_groups, health_scores)):\n",
        "    data = np.random.normal(score, 7, 25)\n",
        "    fig.add_trace(\n",
        "        go.Scatter(\n",
        "            x=[i] * 25 + np.random.normal(0, 0.08, 25),\n",
        "            y=data,\n",
        "            mode='markers',\n",
        "            marker=dict(size=6, color=colors['primary'], opacity=0.6),\n",
        "            showlegend=False\n",
        "        ),\n",
        "        row=1, col=1\n",
        "    )\n",
        "\n",
        "# Controlled Experiment\n",
        "treatment_groups = ['Control', 'Treatment A', 'Treatment B']\n",
        "treatment_effects = [50, 65, 72]\n",
        "for i, (group, effect) in enumerate(zip(treatment_groups, treatment_effects)):\n",
        "    data = np.random.normal(effect, 5, 20)\n",
        "    fig.add_trace(\n",
        "        go.Scatter(\n",
        "            x=[i] * 20 + np.random.normal(0, 0.08, 20),\n",
        "            y=data,\n",
        "            mode='markers',\n",
        "            marker=dict(size=6, color=colors['success'], opacity=0.7),\n",
        "            showlegend=False\n",
        "        ),\n",
        "        row=1, col=2\n",
        "    )\n",
        "\n",
        "# Fixed Table - Random Experiment Components\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(\n",
        "            values=[\"Component\", \"Definition\", \"Example\"],\n",
        "            fill_color='#f8fafc',\n",
        "            font=dict(size=10, color='#1e293b'),\n",
        "            align=\"left\"\n",
        "        ),\n",
        "        cells=dict(\n",
        "            values=[\n",
        "                [\"Sample Space (S)\", \"Event (E)\", \"Probability P(E)\", \"Randomization\", \"Replication\"],\n",
        "                [\"All possible outcomes\", \"Subset of sample space\", \"Likelihood of event\", \"Random assignment\", \"Repeated trials\"],\n",
        "                [\"Coin: {H, T}\", \"Getting heads: {H}\", \"P(Heads) = 0.5\", \"Random treatment assignment\", \"Flip coin 100 times\"]\n",
        "            ],\n",
        "            fill_color='white',\n",
        "            font=dict(size=9),\n",
        "            align=\"left\",\n",
        "            height=22\n",
        "        )\n",
        "    ),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Better visualization: Randomization effect demonstration\n",
        "np.random.seed(123)\n",
        "# Without randomization - biased groups\n",
        "without_rand_control = np.random.normal(45, 8, 30)  # Sicker patients\n",
        "without_rand_treatment = np.random.normal(75, 6, 30)  # Healthier patients\n",
        "\n",
        "# With randomization - balanced groups  \n",
        "with_rand_control = np.random.normal(60, 7, 30)\n",
        "with_rand_treatment = np.random.normal(70, 7, 30)\n",
        "\n",
        "# Plot without randomization\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=[-0.2] * 30 + np.random.normal(0, 0.05, 30),\n",
        "        y=without_rand_control,\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color=colors['danger'], opacity=0.6),\n",
        "        name='Without Randomization',\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=[0.2] * 30 + np.random.normal(0, 0.05, 30),\n",
        "        y=without_rand_treatment,\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color=colors['danger'], opacity=0.6),\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Plot with randomization\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=[0.8] * 30 + np.random.normal(0, 0.05, 30),\n",
        "        y=with_rand_control,\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color=colors['success'], opacity=0.6),\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=[1.2] * 30 + np.random.normal(0, 0.05, 30),\n",
        "        y=with_rand_treatment,\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color=colors['success'], opacity=0.6),\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    height=500,\n",
        "    showlegend=False,\n",
        "    margin=dict(t=40, b=40, l=40, r=40)\n",
        ")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Exercise Level\", tickvals=[0,1,2], \n",
        "                ticktext=['Low', 'Medium', 'High'], row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Health Score\", row=1, col=1)\n",
        "\n",
        "fig.update_xaxes(title_text=\"Treatment Group\", tickvals=[0,1,2], \n",
        "                ticktext=['Control', 'Treatment A', 'Treatment B'], row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Outcome\", row=1, col=2)\n",
        "\n",
        "fig.update_xaxes(title_text=\"Randomization Approach\", \n",
        "                tickvals=[0, 1], \n",
        "                ticktext=['Without<br>Randomization', 'With<br>Randomization'], \n",
        "                row=2, col=2)\n",
        "fig.update_yaxes(title_text=\"Health Outcome\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "5c40881b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## The Big Picture: From Sample to Population \n",
        "\n",
        ":::: {.columns }\n",
        "::: {.column}\n",
        "\n",
        "Think of this like **trying to understand a huge library by reading just a few books**"
      ],
      "id": "6ddabfa8"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 20,
        "fig-height": 5
      },
      "source": [
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "# Example color palette\n",
        "#colors = {'primary': '#636EFA', 'danger': '#EF553B'}\n",
        "\n",
        "# Create figure with two subplots\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Population (What we want to know)\", \"Sample (What we actually see)\"),\n",
        "    specs=[[{\"type\": \"scatter\"}, {\"type\": \"scatter\"}]]\n",
        ")\n",
        "\n",
        "# Population - large scattered points\n",
        "np.random.seed(42)\n",
        "pop_x = np.random.normal(50, 15, 1000)\n",
        "pop_y = np.random.normal(50, 15, 1000)\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=pop_x, y=pop_y,\n",
        "        mode='markers',\n",
        "        marker=dict(size=3, color=colors['primary'], opacity=0.6),\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Sample - highlighted subset\n",
        "sample_indices = np.random.choice(1000, 50, replace=False)\n",
        "sample_x = pop_x[sample_indices]\n",
        "sample_y = pop_y[sample_indices]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=sample_x, y=sample_y,\n",
        "        mode='markers',\n",
        "        marker=dict(size=5, color=colors['danger'], opacity=0.9),\n",
        "        showlegend=False\n",
        "    ),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Add mean lines with styled annotations\n",
        "fig.add_hline(\n",
        "    y=50, line_dash=\"dash\", line_color=colors['primary'], \n",
        "    annotation_text=\"Population Mean (Œº) = 50\",\n",
        "    annotation_font_size=14,\n",
        "    annotation_font_family=\"Arial Black\",\n",
        "    row=1, col=1\n",
        ")\n",
        "fig.add_hline(\n",
        "    y=np.mean(sample_x), line_dash=\"dash\", line_color=colors['danger'], \n",
        "    annotation_text=f\"Sample Mean (xÃÑ) = {np.mean(sample_x):.1f}\",\n",
        "    annotation_font_size=14,\n",
        "    annotation_font_family=\"Arial Black\",\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Bold and enlarge subplot titles\n",
        "for annotation in fig.layout.annotations:\n",
        "    annotation.font.size = 12\n",
        "    annotation.font.family = \"Arial Black\"\n",
        "\n",
        "# Update overall layout for fit and font\n",
        "fig.update_layout(\n",
        "    font=dict(size=12, family=\"Arial Black\"),\n",
        "    margin=dict(l=30, r=30, t=30, b=30),\n",
        "    width=900,\n",
        "    height=500,\n",
        "    autosize=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "6ef15e03",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column}\n",
        "**Key Terms Made Simple:**\n",
        "\n",
        "- **Population ($\\mu$)**: Everyone we care about (like all students at UCSB)\n",
        "- **Sample ($\\bar x$)**: The people we actually measured (like 100 students we surveyed)\n",
        "- **Parameter**: The true answer we want (population mean)\n",
        "- **Statistic**: Our best guess (sample mean)\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Why Point Estimates Aren't Enough \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "**Imagine asking:** \"What's the average height of UCSB students?\""
      ],
      "id": "e016a5c7"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 5
      },
      "source": [
        "# Simulate multiple samples\n",
        "np.random.seed(123)\n",
        "true_mean = 68  # inches\n",
        "true_std = 4\n",
        "\n",
        "sample_means = []\n",
        "for i in range(20):\n",
        "    sample = np.random.normal(true_mean, true_std, 30)\n",
        "    sample_means.append(np.mean(sample))\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add true population mean\n",
        "fig.add_hline(y=true_mean, line_dash=\"solid\", line_color=colors['success'], \n",
        "              line_width=3, annotation_text=\"True Population Mean = 68 inches\")\n",
        "\n",
        "# Add sample means\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=list(range(1, 21)),\n",
        "        y=sample_means,\n",
        "        mode='markers+lines',\n",
        "        marker=dict(size=10, color=colors['danger']),\n",
        "        line=dict(color=colors['danger'], width=2),\n",
        "        name='Sample Means'\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"20 Different Samples Give 20 Different Answers!\",\n",
        "    xaxis_title=\"Sample Number\",\n",
        "    yaxis_title=\"Sample Mean Height (inches)\",\n",
        "    height=500,\n",
        "    width = 900,\n",
        "    showlegend=False\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "1e046520",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column }\n",
        "**The Problem:** Each sample gives a slightly different answer! \n",
        "\n",
        ":::{.fragment}\n",
        "**The Solution:** Use **confidence intervals** to show the range of reasonable values.\n",
        ":::\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Sampling Distributions \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "\n",
        "Think of sampling distributions like \n",
        "**\"What if we repeated our study 1000 times?\"**"
      ],
      "id": "ae37a81f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 13,
        "fig-height": 5
      },
      "source": [
        "# Create sampling distribution demonstration\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\n",
        "        \"Population Distribution\", \"One Sample (n=30)\",\n",
        "        \"Many Sample Means\", \"Sampling Distribution of xÃÑ\"\n",
        "    ),\n",
        "    specs=[[{\"type\": \"histogram\"}, {\"type\": \"histogram\"}],\n",
        "           [{\"type\": \"histogram\"}, {\"type\": \"histogram\"}]]\n",
        ")\n",
        "\n",
        "# Population\n",
        "np.random.seed(42)\n",
        "population = np.random.exponential(2, 10000)  # Skewed population\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Histogram(x=population, nbinsx=50, name=\"Population\", \n",
        "                marker_color=colors['primary'], opacity=0.7),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# One sample\n",
        "one_sample = np.random.choice(population, 30)\n",
        "fig.add_trace(\n",
        "    go.Histogram(x=one_sample, nbinsx=15, name=\"One Sample\", \n",
        "                marker_color=colors['danger'], opacity=0.7),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Many samples visualization\n",
        "sample_means = []\n",
        "for i in range(1000):\n",
        "    sample = np.random.choice(population, 30)\n",
        "    sample_means.append(np.mean(sample))\n",
        "\n",
        "# Show first 100 sample means\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=list(range(1, 101)),\n",
        "        y=sample_means[:100],\n",
        "        mode='markers',\n",
        "        marker=dict(size=6, color=colors['secondary']),\n",
        "        name=\"First 100 Sample Means\"\n",
        "    ),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Sampling distribution\n",
        "fig.add_trace(\n",
        "    go.Histogram(x=sample_means, nbinsx=40, name=\"Sampling Distribution\", \n",
        "                marker_color=colors['success'], opacity=0.7),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "fig.update_layout(height=500, width = 900, showlegend=False)\n",
        "fig.show()"
      ],
      "id": "b5ceaca7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column }\n",
        "**Key Insights:**\n",
        "\n",
        "1. **Population** can be any shape (skewed, normal, weird)\n",
        "   \n",
        "2. **One sample** might not look like the population\n",
        "   \n",
        "3. **Sample means** vary from sample to sample\n",
        "   \n",
        "4. **Many sample means** form a beautiful normal distribution!\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## The Central Limit Theorem (CLT) üéØ \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }"
      ],
      "id": "bb6703e1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 8
      },
      "source": [
        "#| fig-cap: 'Central Limit Theorem: Larger Samples ‚Üí More Normal!'\n",
        "\n",
        "# Interactive CLT demonstration\n",
        "def create_clt_demo(population_type=\"uniform\", sample_size=30):\n",
        "    np.random.seed(42)\n",
        "    \n",
        "    # Generate different population shapes\n",
        "    if population_type == \"uniform\":\n",
        "        population = np.random.uniform(0, 10, 5000)\n",
        "        pop_title = \"Uniform Population\"\n",
        "    elif population_type == \"exponential\":\n",
        "        population = np.random.exponential(2, 5000)\n",
        "        pop_title = \"Right-Skewed Population\"\n",
        "    elif population_type == \"bimodal\":\n",
        "        pop1 = np.random.normal(3, 1, 2500)\n",
        "        pop2 = np.random.normal(7, 1, 2500)\n",
        "        population = np.concatenate([pop1, pop2])\n",
        "        pop_title = \"Bimodal Population\"\n",
        "    \n",
        "    # Generate sampling distribution\n",
        "    sample_means = []\n",
        "    for i in range(1000):\n",
        "        sample = np.random.choice(population, sample_size)\n",
        "        sample_means.append(np.mean(sample))\n",
        "    \n",
        "    return population, sample_means, pop_title\n",
        "\n",
        "# Create demo for different sample sizes\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=3,\n",
        "    subplot_titles=(\n",
        "        \"Population\", \"n=5 Sample Means\", \"n=30 Sample Means\",\n",
        "        \"Population\", \"n=10 Sample Means\", \"n=50 Sample Means\"\n",
        "    )\n",
        ")\n",
        "\n",
        "# Uniform population examples\n",
        "pop_uniform, means_5, _ = create_clt_demo(\"uniform\", 5)\n",
        "pop_uniform, means_30, _ = create_clt_demo(\"uniform\", 30)\n",
        "\n",
        "fig.add_trace(go.Histogram(x=pop_uniform, nbinsx=50, name=\"Population\", \n",
        "                          marker_color=colors['primary'], opacity=0.7), row=1, col=1)\n",
        "fig.add_trace(go.Histogram(x=means_5, nbinsx=30, name=\"n=5\", \n",
        "                          marker_color=colors['danger'], opacity=0.7), row=1, col=2)\n",
        "fig.add_trace(go.Histogram(x=means_30, nbinsx=30, name=\"n=30\", \n",
        "                          marker_color=colors['success'], opacity=0.7), row=1, col=3)\n",
        "\n",
        "# Exponential population examples\n",
        "pop_exp, means_10, _ = create_clt_demo(\"exponential\", 10)\n",
        "pop_exp, means_50, _ = create_clt_demo(\"exponential\", 50)\n",
        "\n",
        "fig.add_trace(go.Histogram(x=pop_exp, nbinsx=50, name=\"Population\", \n",
        "                          marker_color=colors['primary'], opacity=0.7), row=2, col=1)\n",
        "fig.add_trace(go.Histogram(x=means_10, nbinsx=30, name=\"n=10\", \n",
        "                          marker_color=colors['secondary'], opacity=0.7), row=2, col=2)\n",
        "fig.add_trace(go.Histogram(x=means_50, nbinsx=30, name=\"n=50\", \n",
        "                          marker_color=colors['info'], opacity=0.7), row=2, col=3)\n",
        "\n",
        "fig.update_layout(height=500, width=900, showlegend=False, \n",
        "                 #title=\"Central Limit Theorem: Larger Samples ‚Üí More Normal!\"\n",
        "                 )\n",
        "fig.show()"
      ],
      "id": "22e6cdaf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column }\n",
        "**The Magic Rule:** No matter what shape your population is, sample means will be approximately normal!\n",
        "\n",
        "**The Rule of Thumb:** With **n ‚â• 30**, sample means will be approximately normal, regardless of population shape!\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Standard Error {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "**What it measures**\n",
        "\n",
        "- **Standard deviation¬†($\\sigma$ or $s$):** spread of *individual* data points  \n",
        "- **Standard error¬†(SE):** spread of *sample means*\n",
        "\n",
        "$$\n",
        "SE = \\frac{\\sigma}{\\sqrt{n}}\n",
        "\\qquad(\\text{if } \\sigma \\text{ is known})\n",
        "$$\n",
        "\n",
        "$$\n",
        "SE = \\frac{s}{\\sqrt{n}}\n",
        "\\qquad(\\text{usual case, } \\sigma \\text{ unknown})\n",
        "$$\n",
        "\n",
        "**Key facts**\n",
        "\n",
        "- SE shrinks at rate¬†$1/\\sqrt{n}$¬†‚Äî every **4√ó** more observations ‚áí **¬Ω** the SE  \n",
        "- Smaller SE ‚áí narrower confidence intervals and more powerful tests  \n",
        "<!-- - SE appears in the denominator of every $t$‚Äëstatistic you‚Äôll meet -->\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.column }"
      ],
      "id": "4f5a4a7e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 8,
        "fig-height": 6
      },
      "source": [
        "# Demonstrate effect of sample size on standard error\n",
        "sample_sizes = np.array([5, 10, 20, 30, 50, 100, 200])\n",
        "sigma = 10\n",
        "standard_errors = sigma / np.sqrt(sample_sizes)\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(\n",
        "        x=sample_sizes,\n",
        "        y=standard_errors,\n",
        "        mode='markers+lines',\n",
        "        marker=dict(size=12, color=colors['primary']),\n",
        "        line=dict(color=colors['primary'], width=3),\n",
        "        name='Standard Error'\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Bigger Samples = Smaller Standard Error\",\n",
        "    xaxis_title=\"Sample Size (n)\",\n",
        "    yaxis_title=\"Standard Error\",\n",
        "    height=400,\n",
        "    showlegend=False\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    x=100, y=3,\n",
        "    text=\"The bigger the sample,<br>the more precise our estimate!\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowcolor=colors['danger'],\n",
        "    font=dict(size=12, color=colors['danger'])\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "d660acaf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-important}\n",
        "Doubling your sample size doesn't halve the error - you need 4 times the sample for half the error!\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: \n",
        "\n",
        "\n",
        "## Confidence Intervals: The Intuitive Idea \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "**Imagine you're trying to guess someone's height just by looking at their shadow...**"
      ],
      "id": "48bb6171"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "\n",
        "\n",
        "# Simulation parameters\n",
        "np.random.seed(42)\n",
        "true_mean    = 68\n",
        "sample_mean  = 67.2\n",
        "se           = 1.5\n",
        "ci_lower     = sample_mean - 1.96 * se\n",
        "ci_upper     = sample_mean + 1.96 * se\n",
        "\n",
        "# X-axis values\n",
        "x = np.linspace(60, 76, 1000)\n",
        "# Sampling distribution PDF\n",
        "y = norm.pdf(x, sample_mean, se)\n",
        "\n",
        "# Build figure\n",
        "fig = go.Figure()\n",
        "\n",
        "# 1) Sampling distribution curve\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x, y=y,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Sampling Dist.'\n",
        "))\n",
        "\n",
        "# 2) Shaded 95% CI region\n",
        "ci_mask = (x >= ci_lower) & (x <= ci_upper)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([x[ci_mask], [ci_upper, ci_lower]]),\n",
        "    y=np.concatenate([y[ci_mask], [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(59, 130, 246, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='95% CI'\n",
        "))\n",
        "\n",
        "# 3) Vertical lines (no inline annotation_text)\n",
        "for value, dash, color in [\n",
        "    (ci_lower,    'dot',    colors['secondary']),\n",
        "    (sample_mean, 'solid',  colors['danger']),\n",
        "    (true_mean,   'dash',   colors['success']),\n",
        "    (ci_upper,    'dot',    colors['secondary'])\n",
        "]:\n",
        "    fig.add_vline(x=value, line_dash=dash, line_color=color)\n",
        "\n",
        "# 4) Annotations above plot for clear, bold labels\n",
        "annotations = [\n",
        "    dict(x=ci_lower,    y=1.05, yref='paper',\n",
        "         text=f\"<b>CI Lower = {ci_lower:.1f}</b>\",\n",
        "         showarrow=False, xanchor='center'),\n",
        "    dict(x=sample_mean, y=1.10, yref='paper',\n",
        "         text=f\"<b>Sample Mean = {sample_mean:.1f}</b>\",\n",
        "         showarrow=False, xanchor='center'),\n",
        "    dict(x=true_mean,   y=1.05, yref='paper',\n",
        "         text=f\"<b>True Mean = {true_mean}</b>\",\n",
        "         showarrow=False, xanchor='center'),\n",
        "    dict(x=ci_upper,    y=1.10, yref='paper',\n",
        "         text=f\"<b>CI Upper = {ci_upper:.1f}</b>\",\n",
        "         showarrow=False, xanchor='center'),\n",
        "]\n",
        "fig.update_layout(annotations=annotations)\n",
        "\n",
        "# 5) Layout tweaks\n",
        "fig.update_layout(\n",
        "    title=dict(text=\"95% CI: We're 95% Sure the True Mean is in This Range\", x=0.3, xanchor='center'),\n",
        "    xaxis=dict(title='Height (inches)', range=[60, 76], tick0=60, dtick=2),\n",
        "    yaxis=dict(title='Probability Density'),\n",
        "    width=950,\n",
        "    height=500,\n",
        "    margin=dict(t=120, b=40, l=40, r=40),\n",
        "    showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "fcda9277",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column .smaller .fragment}\n",
        "**Simple Interpretation:** \"We're $95\\\\%$ confident the true average height is between $64.3$ and $70.1$¬†inches.\"\n",
        "\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## What Exactly *Is* a Confidence Interval? ü§ì {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column .smaller .semi-fade-out}\n",
        "- A **confidence interval (CI)** is *point estimate*¬†$\\pm$ *margin of error*  \n",
        "$$\n",
        "    \\text{CI} = \\text{statistic} \\;\\pm\\; \\bigl(\\text{critical value}\\bigr)\\times\\bigl(\\text{SE}\\bigr)\n",
        "$$\n",
        "\n",
        "- The ‚Äúcritical value‚Äù comes from a probability model (e.g., $z^{\\star}$ or $t^{\\star}$).  \n",
        "  \n",
        "- The **standard error (SE)** captures sampling variation.\n",
        "\n",
        "**Frequentist meaning**\n",
        "\n",
        "> If we repeated the study infinitely many times and built a $95‚ÄØ\\%$ CI each time, about $95‚ÄØ\\%$ of those intervals would cover the true parameter.\n",
        "\n",
        "(For any one computed interval the parameter is fixed, the *process* has a $95‚ÄØ\\%$ success rate, not the individual interval.)\n",
        "\n",
        "<!-- ```{python}\n",
        "#| fig-width: 5\n",
        "#| fig-height: 3\n",
        "#| echo: false\n",
        "import numpy as np, plotly.graph_objects as go\n",
        "np.random.seed(7)\n",
        "# quick visual: 10 intervals, half miss intentionally\n",
        "true_mu = 10\n",
        "means = np.random.normal(true_mu, 2, 10)\n",
        "ses   = np.repeat(1.2, 10)\n",
        "ci_l  = means - 1.96*ses\n",
        "ci_u  = means + 1.96*ses\n",
        "fig   = go.Figure()\n",
        "for i,(l,u,m) in enumerate(zip(ci_l,ci_u,means)):\n",
        "    color = \"#10b981\" if l<=true_mu<=u else \"#ef4444\"\n",
        "    fig.add_trace(go.Scatter(x=[l,u],y=[i,i],mode=\"lines\",line=dict(color=color,width=4)))\n",
        "    fig.add_trace(go.Scatter(x=[m],y=[i],mode=\"markers\",marker=dict(color=color,size=6)))\n",
        "fig.add_vline(x=true_mu,line_color=\"#3b82f6\",line_width=3)\n",
        "fig.update_xaxes(title_text=\"Value\")\n",
        "fig.update_yaxes(visible=False)\n",
        "fig.update_layout(height=220,margin=dict(l=20,r=20,t=10,b=10),showlegend=False)\n",
        "fig.show()\n",
        "``` -->\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.column .smaller .fragment}\n",
        "\n",
        "\n",
        ":::{.callout-tip}\n",
        "### What controls the width?\n",
        "\n",
        "- **Variability** in the data: larger $\\sigma$ or $s$ ‚áí wider CI\n",
        "    \n",
        "- **Sample size** $n$: width shrinks at rate $1/\\sqrt{n}$ \n",
        "  \n",
        "- **Confidence level**: 99‚ÄØ% CIs are wider than 90‚ÄØ% CIs\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.callout-important}\n",
        "### Common pitfalls\n",
        "\n",
        "- Saying ‚Äúthere is a $95‚ÄØ\\%$ probability¬†that $\\mu$ lies in this interval‚Äù (wrong)  \n",
        "  \n",
        "- Interpreting the CI as covering $95‚ÄØ\\%$ of *future* observations (it does not)  \n",
        "  \n",
        "- Ignoring conditions (normality or CLT) before using the formulae  \n",
        ":::"
      ],
      "id": "ace2228a"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 5,
        "fig-height": 3
      },
      "source": [
        "#| echo: false\n",
        "import numpy as np, plotly.graph_objects as go\n",
        "np.random.seed(7)\n",
        "# quick visual: 10 intervals, half miss intentionally\n",
        "true_mu = 10\n",
        "means = np.random.normal(true_mu, 2, 10)\n",
        "ses   = np.repeat(1.2, 10)\n",
        "ci_l  = means - 1.96*ses\n",
        "ci_u  = means + 1.96*ses\n",
        "fig   = go.Figure()\n",
        "for i,(l,u,m) in enumerate(zip(ci_l,ci_u,means)):\n",
        "    color = \"#10b981\" if l<=true_mu<=u else \"#ef4444\"\n",
        "    fig.add_trace(go.Scatter(x=[l,u],y=[i,i],mode=\"lines\",line=dict(color=color,width=4)))\n",
        "    fig.add_trace(go.Scatter(x=[m],y=[i],mode=\"markers\",marker=dict(color=color,size=6)))\n",
        "fig.add_vline(x=true_mu,line_color=\"#3b82f6\",line_width=3)\n",
        "fig.update_xaxes(title_text=\"Value\")\n",
        "fig.update_yaxes(visible=False)\n",
        "fig.update_layout(height=220,width = 700, margin=dict(l=20,r=20,t=10,b=10),showlegend=False)\n",
        "fig.show()"
      ],
      "id": "31c4cc57",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Building Confidence Intervals Step-by-Step \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "\n",
        "For Population Means (Most Common Case)\n",
        "\n",
        "**When we DON'T know the population standard deviation ($\\sigma$):**"
      ],
      "id": "f31aad5c"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 6
      },
      "source": [
        "#| echo: false\n",
        "import numpy as np, plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "from scipy.stats import t, norm\n",
        "\n",
        "# ‚îÄ‚îÄ 0.  Generate one sample  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "np.random.seed(42)\n",
        "n        = 25\n",
        "mu_true  = 68          # just for reference (we never use œÉ)\n",
        "sigma    = 4\n",
        "sample   = np.random.normal(mu_true, sigma, n)\n",
        "xbar     = sample.mean()\n",
        "s        = sample.std(ddof=1)\n",
        "se       = s / np.sqrt(n)\n",
        "df       = n - 1\n",
        "t_crit   = t.ppf(0.975, df)          # 95 % two-sided\n",
        "ci_low, ci_high = xbar - t_crit*se, xbar + t_crit*se\n",
        "\n",
        "# ‚îÄ‚îÄ 1-4.  Build the four panels  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "fig = make_subplots(rows=2, cols=2,\n",
        "    subplot_titles=(\n",
        "        \"1Ô∏è‚É£  Your Random Sample\",\n",
        "        \"2Ô∏è‚É£  Sampling Distribution of $\\\\bar X$\",\n",
        "        \"3Ô∏è‚É£  $t$-Distribution (df = 24)\",\n",
        "        \"4Ô∏è‚É£  95 % Confidence Interval\"))\n",
        "\n",
        "# (1) Sample histogram\n",
        "fig.add_trace(\n",
        "    go.Histogram(x=sample, nbinsx=10,\n",
        "                 marker_color=\"#4285F4\", opacity=0.70, showlegend=False),\n",
        "    row=1, col=1)\n",
        "fig.add_vline(x=xbar, line_width=3, line_color=\"black\",\n",
        "              annotation_text=f\"$\\\\bar x$ = {xbar:0.1f}\", annotation_position=\"top left\",\n",
        "              row=1, col=1)\n",
        "\n",
        "# (2) Sampling distribution (normal curve with ¬±1 SE band)\n",
        "x_grid = np.linspace(xbar-4*se, xbar+4*se, 300)\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=x_grid, y=norm.pdf(x_grid, xbar, se),\n",
        "               mode=\"lines\", line_color=\"#34A853\", showlegend=False),\n",
        "    row=1, col=2)\n",
        "fig.add_vrect(x0=xbar-se, x1=xbar+se, fillcolor=\"#34A853\", opacity=0.25,\n",
        "              row=1, col=2)\n",
        "fig.add_annotation(x=xbar, y=norm.pdf(xbar, xbar, se)*1.1,\n",
        "                   text=\"¬±1 SE\", showarrow=False, row=1, col=2)\n",
        "\n",
        "# (3) t-distribution with shaded 2.5 % tails\n",
        "x_t = np.linspace(-4,4,400)\n",
        "y_t = t.pdf(x_t, df)\n",
        "fig.add_trace(go.Scatter(x=x_t, y=y_t, mode=\"lines\",\n",
        "                         line_color=\"#FBBC05\", showlegend=False),\n",
        "              row=2, col=1)\n",
        "# shade both tails\n",
        "fig.add_vrect(x0=t_crit,     x1= 4, fillcolor=\"#FBBC05\", opacity=0.25, row=2, col=1)\n",
        "fig.add_vrect(x0=-4, x1=-t_crit, fillcolor=\"#FBBC05\", opacity=0.25, row=2, col=1)\n",
        "fig.add_annotation(x=t_crit, y=t.pdf(t_crit, df)*1.05,\n",
        "                   text=f\"$t^*$ = {t_crit:0.2f}\", showarrow=False, row=2, col=1)\n",
        "\n",
        "# (4) Number line + CI\n",
        "fig.add_trace(go.Scatter(x=[ci_low, ci_high], y=[0,0],\n",
        "                         mode=\"markers+lines\", line=dict(color=\"#EA4335\", width=6),\n",
        "                         marker=dict(size=12,color=\"#EA4335\"), showlegend=False),\n",
        "              row=2, col=2)\n",
        "fig.add_trace(go.Scatter(x=[xbar], y=[0], mode=\"markers\",\n",
        "                         marker=dict(size=14, color=\"black\", symbol=\"x\"), showlegend=False),\n",
        "              row=2, col=2)\n",
        "fig.update_yaxes(visible=False, row=2, col=2)\n",
        "fig.add_annotation(x=xbar, y=0.1, text=f\"$\\\\bar x$\", showarrow=False, row=2, col=2)\n",
        "fig.add_annotation(x=ci_low,  y=-0.1, text=f\"{ci_low:0.1f}\", showarrow=False, row=2, col=2)\n",
        "fig.add_annotation(x=ci_high, y=-0.1, text=f\"{ci_high:0.1f}\", showarrow=False, row=2, col=2)\n",
        "\n",
        "# ‚îÄ‚îÄ  Cosmetic tweaks  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "fig.update_layout(height=460, width=820, margin=dict(t=60),\n",
        "                  title_text=\"Building a 95 % CI for a Mean (Unknown œÉ)\")\n",
        "fig.show()"
      ],
      "id": "40bf49f9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column }\n",
        "**The Formula:** $\\bar{x} \\pm t^* \\cdot \\frac{s}{\\sqrt{n}}$\n",
        "\n",
        "**Breaking it down:**\n",
        "\n",
        "- $\\bar{x}$ = our sample average (the center of our guess)\n",
        "  \n",
        "- $t^*$ = critical value (how many standard errors to go out)\n",
        "  \n",
        "- $\\frac{s}{\\sqrt{n}}$ = standard error (our uncertainty measure)\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## The t-Distribution: When $\\sigma$ is Unknown \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column }\n",
        "**Why not use the normal distribution?** Because when we estimate $\\sigma$ with $s$, we add extra uncertainty!"
      ],
      "id": "23dfab80"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 6
      },
      "source": [
        "# Compare normal vs t-distributions\n",
        "x = np.linspace(-4, 4, 1000)\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Standard normal\n",
        "y_normal = norm.pdf(x, 0, 1)\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=x, y=y_normal, mode='lines', name='Normal (œÉ known)',\n",
        "              line=dict(color=colors['primary'], width=3))\n",
        ")\n",
        "\n",
        "# t-distributions with different df\n",
        "for df, color, name in [(5, colors['danger'], 't (df=5)'), \n",
        "                       (10, colors['secondary'], 't (df=10)'),\n",
        "                       (30, colors['success'], 't (df=30)')]:\n",
        "    y_t = t.pdf(x, df)\n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=x, y=y_t, mode='lines', name=name,\n",
        "                  line=dict(color=color, width=2, dash='dash'))\n",
        "    )\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"t-Distribution vs Normal: More Uncertainty with Smaller Samples\",\n",
        "    xaxis_title=\"Value\",\n",
        "    yaxis_title=\"Probability Density\",\n",
        "    height=400\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    x=0, y=0.3,\n",
        "    text=\"As sample size increases,<br>t approaches normal\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowcolor=colors['info'],\n",
        "    font=dict(size=12, color=colors['info'])\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "b0c90812",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column }\n",
        "**Key Points:**\n",
        "\n",
        "- Small samples ($n < 30$): Use t-distribution\n",
        "  \n",
        "- Large samples ($n ‚â• 30$): $t$ ‚âà normal\n",
        "  \n",
        "- Degrees of freedom (df)= $n - 1$\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Confidence Intervals for Proportions \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "**For Yes/No questions like:** \"What percentage of students prefer online classes?\""
      ],
      "id": "262af34f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 5
      },
      "source": [
        "# Proportion confidence interval demonstration\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Sample Results\", \"Confidence Interval\")\n",
        ")\n",
        "\n",
        "# Sample data\n",
        "n = 200\n",
        "x = 120  # successes\n",
        "p_hat = x / n\n",
        "\n",
        "# Create sample visualization\n",
        "categories = ['Prefer Online', 'Prefer In-Person']\n",
        "counts = [x, n - x]\n",
        "colors_bar = [colors['success'], colors['danger']]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=categories, y=counts, marker_color=colors_bar, name=\"Sample Counts\"),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Confidence interval\n",
        "se_prop = np.sqrt(p_hat * (1 - p_hat) / n)\n",
        "z_critical = 1.96  # 95% confidence\n",
        "margin_error = z_critical * se_prop\n",
        "ci_lower = p_hat - margin_error\n",
        "ci_upper = p_hat + margin_error\n",
        "\n",
        "# CI visualization\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[ci_lower, p_hat, ci_upper], \n",
        "               y=[1, 1, 1],\n",
        "               mode='markers+lines',\n",
        "               marker=dict(size=[15, 20, 15], color=colors['primary']),\n",
        "               line=dict(color=colors['primary'], width=5),\n",
        "               name=\"95% CI\"),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "fig.update_xaxes(title_text=\"Response\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Proportion\", range=[0.5, 0.7], row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Count\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"\", showticklabels=False, row=1, col=2)\n",
        "\n",
        "fig.update_layout(height=400, showlegend=False)\n",
        "fig.show()"
      ],
      "id": "8fb25fe0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column}\n",
        "**The Formula:** $\\hat{p} \\pm z^* \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n}}$\n",
        "\n",
        "**Results:** Sample: 60% prefer online (120/200)  \n",
        "**95% CI:** (53.2%, 66.8%) - We're 95% confident the true percentage is in this range.\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## What Does \"95% Confident\" Really Mean? ü§î {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column .smaller}\n",
        "**The Biggest Misconception:** \"There's a 95% chance the true mean is in our interval\"\n",
        "\n",
        "**Actually:** \"If we repeated this study 100 times, about 95 of our intervals would contain the true mean\""
      ],
      "id": "c709b489"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 8
      },
      "source": [
        "# Simulate 100 confidence intervals\n",
        "np.random.seed(42)\n",
        "true_mean = 50\n",
        "true_std = 10\n",
        "n = 25\n",
        "num_intervals = 50\n",
        "\n",
        "intervals = []\n",
        "captures = []\n",
        "\n",
        "for i in range(num_intervals):\n",
        "    # Generate sample\n",
        "    sample = np.random.normal(true_mean, true_std, n)\n",
        "    x_bar = np.mean(sample)\n",
        "    s = np.std(sample, ddof=1)\n",
        "    se = s / np.sqrt(n)\n",
        "    \n",
        "    # 95% CI\n",
        "    t_crit = t.ppf(0.975, n-1)\n",
        "    margin = t_crit * se\n",
        "    ci_lower = x_bar - margin\n",
        "    ci_upper = x_bar + margin\n",
        "    \n",
        "    intervals.append((ci_lower, ci_upper, x_bar))\n",
        "    captures.append(ci_lower <= true_mean <= ci_upper)\n",
        "\n",
        "# Create visualization\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add intervals\n",
        "for i, ((lower, upper, mean), capture) in enumerate(zip(intervals, captures)):\n",
        "    color = colors['success'] if capture else colors['danger']\n",
        "    # Confidence interval line\n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=[lower, upper], y=[i, i], mode='lines',\n",
        "                  line=dict(color=color, width=3),\n",
        "                  showlegend=False)\n",
        "    )\n",
        "    # Sample mean point\n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=[mean], y=[i], mode='markers',\n",
        "                  marker=dict(size=6, color=color),\n",
        "                  showlegend=False)\n",
        "    )\n",
        "\n",
        "# Add true mean line\n",
        "fig.add_vline(x=true_mean, line_dash=\"solid\", line_color=colors['primary'], \n",
        "              line_width=4, annotation_text=f\"True Mean = {true_mean}\")\n",
        "\n",
        "# Count captures\n",
        "capture_rate = np.mean(captures) * 100\n",
        "\n",
        "fig.update_layout(\n",
        "    title=f\"50 Different 95% Confidence Intervals: {capture_rate:.0f}% Capture the True Mean\",\n",
        "    xaxis_title=\"Value\",\n",
        "    yaxis_title=\"Study Number\",\n",
        "    height=600\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    x=45, y=40,\n",
        "    text=f\"Green = Contains true mean<br>Red = Misses true mean<br>Rate = {capture_rate:.0f}%\",\n",
        "    showarrow=False,\n",
        "    bgcolor=\"white\",\n",
        "    bordercolor=\"black\",\n",
        "    borderwidth=1,\n",
        "    font=dict(size=12)\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "0acb9e40",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column}\n",
        "**Remember:** The interval either contains the true value or it doesn't - there's no probability involved for a single interval!\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Sample Size Planning: Getting the Precision You Want {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width = \"60%\"}\n",
        "**The Question:** \"How many people do we need to survey?\""
      ],
      "id": "844761e6"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 6
      },
      "source": [
        "# Sample size vs margin of error\n",
        "sigma = 10  # population standard deviation\n",
        "confidence_levels = [90, 95, 99]\n",
        "z_values = [1.645, 1.96, 2.576]\n",
        "\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Sample Size vs Margin of Error\", \"Required Sample Size\")\n",
        ")\n",
        "\n",
        "# Plot 1: Sample size vs margin of error for different confidence levels\n",
        "sample_sizes = np.arange(10, 201, 10)\n",
        "\n",
        "for conf, z_val, color in zip(confidence_levels, z_values, [colors['success'], colors['primary'], colors['danger']]):\n",
        "    margins = z_val * sigma / np.sqrt(sample_sizes)\n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=sample_sizes, y=margins, mode='lines+markers',\n",
        "                  name=f'{conf}% Confidence',\n",
        "                  line=dict(color=color, width=3)),\n",
        "        row=1, col=1\n",
        "    )\n",
        "\n",
        "# Plot 2: Required sample size for different margins\n",
        "desired_margins = np.arange(0.5, 5.1, 0.1)\n",
        "for conf, z_val, color in zip(confidence_levels, z_values, [colors['success'], colors['primary'], colors['danger']]):\n",
        "    required_n = (z_val * sigma / desired_margins) ** 2\n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=desired_margins, y=required_n, mode='lines',\n",
        "                  name=f'{conf}% Confidence',\n",
        "                  line=dict(color=color, width=3),\n",
        "                  showlegend=False),\n",
        "        row=1, col=2\n",
        "    )\n",
        "\n",
        "fig.update_xaxes(title_text=\"Sample Size\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Desired Margin of Error\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Margin of Error\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Required Sample Size\", row=1, col=2)\n",
        "\n",
        "fig.update_layout(height=500\n",
        "                #  title=\"Planning Your Study: The Trade-offs\"\n",
        "                )\n",
        "fig.show()"
      ],
      "id": "7f419930",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column .right width = \"40%\"}\n",
        "**Key Formula for Means:** $n = \\left(\\frac{z^* \\sigma}{ME}\\right)^2$\n",
        "\n",
        "**Trade-offs:**\n",
        "\n",
        "- Want smaller margin of error? Need bigger sample\n",
        "  \n",
        "- Want higher confidence? Need bigger sample \n",
        "   \n",
        "- Want to save money? Accept wider intervals\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Real Example: Student Sleep Study üò¥ {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width =\"60%\"}\n",
        "**Research Question:** How many hours do UCSB students sleep per night?"
      ],
      "id": "41ba8510"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 8
      },
      "source": [
        "# Simulate sleep study data\n",
        "np.random.seed(123)\n",
        "n = 50\n",
        "sleep_data = np.random.normal(7.2, 1.5, n)  # Mean 7.2 hours, SD 1.5\n",
        "\n",
        "# Calculate statistics\n",
        "x_bar = np.mean(sleep_data)\n",
        "s = np.std(sleep_data, ddof=1)\n",
        "se = s / np.sqrt(n)\n",
        "\n",
        "# 95% confidence interval\n",
        "df = n - 1\n",
        "t_crit = t.ppf(0.975, df)\n",
        "margin = t_crit * se\n",
        "ci_lower = x_bar - margin\n",
        "ci_upper = x_bar + margin\n",
        "\n",
        "# Create comprehensive visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"Sample Data Distribution\", \"Step-by-Step Calculation\",\n",
        "                   \"Confidence Interval Visualization\", \"Interpretation\"),\n",
        "    specs=[[{\"type\": \"histogram\"}, {\"type\": \"table\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"scatter\"}]]\n",
        ")\n",
        "\n",
        "# Sample distribution\n",
        "fig.add_trace(\n",
        "    go.Histogram(x=sleep_data, nbinsx=15, name=\"Sleep Hours\",\n",
        "                marker_color=colors['primary'], opacity=0.7),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Calculation table\n",
        "calc_data = [\n",
        "    [\"Sample Size (n)\", f\"{n}\"],\n",
        "    [\"Sample Mean (xÃÑ)\", f\"{x_bar:.2f} hours\"],\n",
        "    [\"Sample SD (s)\", f\"{s:.2f} hours\"],\n",
        "    [\"Standard Error\", f\"{se:.3f} hours\"],\n",
        "    [\"t* (95%, df={})\".format(df), f\"{t_crit:.3f}\"],\n",
        "    [\"Margin of Error\", f\"{margin:.3f} hours\"],\n",
        "    [\"95% CI Lower\", f\"{ci_lower:.2f} hours\"],\n",
        "    [\"95% CI Upper\", f\"{ci_upper:.2f} hours\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=[\"Statistic\", \"Value\"],\n",
        "                   fill_color=colors['light'],\n",
        "                   font=dict(size=12)),\n",
        "        cells=dict(values=list(zip(*calc_data)),\n",
        "                  fill_color='white',\n",
        "                  font=dict(size=11))\n",
        "    ),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# CI visualization\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[ci_lower, x_bar, ci_upper], \n",
        "               y=[1, 1, 1],\n",
        "               mode='markers+lines',\n",
        "               marker=dict(size=[20, 25, 20], \n",
        "                          color=[colors['danger'], colors['success'], colors['danger']]),\n",
        "               line=dict(color=colors['primary'], width=8),\n",
        "               name=\"95% Confidence Interval\"),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Add text annotations\n",
        "fig.add_annotation(x=ci_lower, y=1.1, text=f\"{ci_lower:.2f}\", \n",
        "                  showarrow=False, row=2, col=1)\n",
        "fig.add_annotation(x=x_bar, y=1.1, text=f\"{x_bar:.2f}\", \n",
        "                  showarrow=False, row=2, col=1)\n",
        "fig.add_annotation(x=ci_upper, y=1.1, text=f\"{ci_upper:.2f}\", \n",
        "                  showarrow=False, row=2, col=1)\n",
        "\n",
        "# Interpretation\n",
        "interpretation_text = [\n",
        "    f\"We are 95% confident that the true average sleep time\",\n",
        "    f\"for UCSB students is between {ci_lower:.2f} and {ci_upper:.2f} hours.\",\n",
        "    f\"\",\n",
        "    f\"This means if we repeated this study 100 times,\",\n",
        "    f\"about 95 of our intervals would contain the true mean.\"\n",
        "]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[0.5], y=[0.5], mode='text',\n",
        "              text=\"<br>\".join(interpretation_text),\n",
        "              textfont=dict(size=14),\n",
        "              showlegend=False),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "fig.update_layout(height=700, showlegend=False,\n",
        "                 title=\"Complete Analysis: UCSB Student Sleep Study\")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Hours of Sleep\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Hours of Sleep\", range=[6.5, 8], row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"\", showticklabels=False, range=[0.8, 1.2], row=2, col=1)\n",
        "fig.update_xaxes(showticklabels=False, row=2, col=2)\n",
        "fig.update_yaxes(showticklabels=False, row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "df7fce04",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width =\"40%\"}\n",
        "**Bottom Line:** We're 95% confident that UCSB students sleep between 6.73 and 7.47 hours per night on average.\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Common Mistakes to Avoid ‚ö†Ô∏è {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"40%\"}\n",
        "### ‚ùå Wrong Interpretations\n",
        "\n",
        "**\"95% of students sleep in this range\"**\n",
        "- NO! This is about the population mean, not individual students\n",
        "\n",
        "**\"There's a 95% chance Œº is in our interval\"**\n",
        "- NO! $\\mu$ is fixed; our interval varies\n",
        "\n",
        "**\"We can be 95% certain\"**\n",
        "- NO! Use \"confident\" not \"certain\"\n",
        ":::\n",
        "::: {.column}\n",
        "### ‚úÖ Correct Approach\n",
        "\n",
        "**\"We are 95% confident the population mean is in this interval\"**\n",
        "\n",
        "**Key Reminders:**\n",
        "\n",
        "- Check conditions before using formulas\n",
        "  \n",
        "- Use t-distribution when $\\sigma$ is unknown\n",
        "  \n",
        "- Larger samples give narrower intervals\n",
        "  \n",
        "- Higher confidence gives wider intervals\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "# Practice Problems üìù \n",
        "\n",
        "---\n",
        "\n",
        "## Problem 1: Coffee Shop Revenue {.scrollable}\n",
        "\n",
        "A coffee shop owner samples 36 days and finds average daily revenue of $850 with standard deviation $120.\n",
        "\n",
        "**Your turn:** Calculate a 90% confidence interval for the true average daily revenue.\n",
        "\n",
        "::: {#my-solution .collapsible-solution}\n",
        "<button class=\"solution-toggle\">\n",
        "  Show Solution\n",
        "</button>\n",
        "<div class=\"solution-content\">\n",
        "\n",
        "**Given (from the prompt)**  \n",
        "$n = 36,\\; \\bar{x} = \\$850,\\; s = \\$120,\\; \\text{confidence level} = 90\\%$\n",
        "\n",
        "---\n",
        "\n",
        "### Step¬†1¬†‚Äì Conditions  \n",
        "* $n \\ge 30$  ‚áí a $t$‚Äëinterval is justified by the Central Limit Theorem.  \n",
        "* Assume daily revenues are independent.\n",
        "\n",
        "### Step¬†2¬†‚Äì Critical value  \n",
        "$\\alpha = 1-0.90 = 0.10 \\;\\Rightarrow\\; \\alpha/2 = 0.05$  \n",
        "Degrees of freedom: $df = n-1 = 35$  \n",
        "$\\displaystyle t^{\\star}_{0.90,\\,35} \\approx 1.690$\n",
        "\n",
        "### Step¬†3¬†‚Äì Standard error  \n",
        "$$SE = \\frac{s}{\\sqrt{n}}\n",
        "        = \\frac{120}{\\sqrt{36}}\n",
        "        = \\frac{120}{6}\n",
        "        = \\$20$$\n",
        "\n",
        "### Step¬†4¬†‚Äì Margin of error  \n",
        "$$ME = t^{\\star}\\; SE\n",
        "       = 1.690 \\times \\$20\n",
        "       = \\$33.8$$\n",
        "\n",
        "### Step¬†5¬†‚Äì Confidence interval  \n",
        "$$\\bar{x} \\pm ME\n",
        "     = 850 \\pm 33.8\n",
        "     \\;\\Longrightarrow\\;\n",
        "     (\\$816.2,\\; \\$883.8)$$\n",
        "\n",
        "**Interpretation** ‚Äì We are **90‚ÄØ% confident** that the true mean daily revenue lies between \\$816.20 and \\$883.80.\n",
        "</div>\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Problem 2: Student Survey {.scrollable}\n",
        "\n",
        "In a survey of 400 students, 280 say they would recommend their major to a friend.\n",
        "\n",
        "**Your turn:** \n",
        "\n",
        "1. Calculate the sample proportion\n",
        "   \n",
        "2. Build a $95\\%$ confidence interval  \n",
        "   \n",
        "3. Check if conditions are met\n",
        "\n",
        "::: {#my-solution .collapsible-solution}\n",
        "<button class=\"solution-toggle\">\n",
        "  Show Solution\n",
        "</button>\n",
        "<div class=\"solution-content\">\n",
        "\n",
        "\n",
        "**Given (from the survey)**  \n",
        "$n = 400,\\; x = 280$ ‚Äúyes‚Äù responses\n",
        "\n",
        "---\n",
        "\n",
        "### Step¬†1¬†‚Äì Sample proportion  \n",
        "$$\\hat{p} = \\frac{x}{n} = \\frac{280}{400} = 0.70$$\n",
        "\n",
        "### Step¬†2¬†‚Äì Conditions for a $z$‚Äëinterval  \n",
        "$n\\hat{p} = 400(0.70)=280 \\ge 10$  \n",
        "$n(1-\\hat{p}) = 400(0.30)=120 \\ge 10$  \n",
        "Both counts ‚â•‚ÄØ10, so the normal approximation is appropriate.\n",
        "\n",
        "### Step¬†3¬†‚Äì Standard error  \n",
        "$$SE = \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n}}\n",
        "        = \\sqrt{\\frac{0.70(0.30)}{400}}\n",
        "        = \\sqrt{0.000525}\n",
        "        \\approx 0.0229$$\n",
        "\n",
        "### Step¬†4¬†‚Äì Critical value & margin of error  \n",
        "For 95‚ÄØ% confidence, $z^{\\star} = 1.96$  \n",
        "\n",
        "$$ME = z^{\\star}\\; SE\n",
        "       = 1.96 \\times 0.0229\n",
        "       \\approx 0.045$$\n",
        "\n",
        "### Step¬†5¬†‚Äì Confidence interval  \n",
        "$$\\hat{p} \\pm ME\n",
        "     = 0.70 \\pm 0.045\n",
        "     \\;\\Longrightarrow\\;\n",
        "     (0.655,\\; 0.745)$$\n",
        "\n",
        "**Interpretation** ‚Äì We are **95‚ÄØ% confident** that between **65.5‚ÄØ% and 74.5‚ÄØ%** of all students would recommend their major to a friend.\n",
        "</div>\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Looking Ahead: Hypothesis Testing üîÆ \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "**Next week we'll learn:**\n",
        "\n",
        "- How to test specific claims about populations\n",
        "  \n",
        "- When to reject or fail to reject hypotheses  \n",
        "  \n",
        "- The connection between confidence intervals and hypothesis tests\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column}"
      ],
      "id": "42ed9744"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 4
      },
      "source": [
        "#| eval: false\n",
        "\n",
        "# Preview of hypothesis testing\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Confidence Intervals\", \"Hypothesis Testing\")\n",
        ")\n",
        "\n",
        "# CI approach\n",
        "x = np.linspace(45, 55, 1000)\n",
        "y = norm.pdf(x, 50, 2)\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=x, y=y, mode='lines', name='Sampling Distribution',\n",
        "              line=dict(color=colors['primary'], width=3)),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Add CI\n",
        "ci_x = x[(x >= 46.08) & (x <= 53.92)]\n",
        "ci_y = y[(x >= 46.08) & (x <= 53.92)]\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=ci_x, y=ci_y, fill='tonexty', mode='none',\n",
        "              fillcolor=f'rgba(59, 130, 246, 0.3)', name='95% CI'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Hypothesis testing approach\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=x, y=y, mode='lines', name='Sampling Distribution',\n",
        "              line=dict(color=colors['danger'], width=3)),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Add rejection regions\n",
        "reject_left = x[x <= 46.08]\n",
        "reject_right = x[x >= 53.92]\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=reject_left, y=norm.pdf(reject_left, 50, 2), \n",
        "              fill='tonexty', mode='none',\n",
        "              fillcolor=f'rgba(239, 68, 68, 0.3)', name='Reject H‚ÇÄ'),\n",
        "    row=1, col=2\n",
        ")\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=reject_right, y=norm.pdf(reject_right, 50, 2), \n",
        "              fill='tonexty', mode='none',\n",
        "              fillcolor=f'rgba(239, 68, 68, 0.3)', name='Reject H‚ÇÄ'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "fig.update_layout(height=400, width=600, showlegend=False)\n",
        "fig.show()"
      ],
      "id": "dcf7420b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "## Key Takeaways üéØ {.smaller}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "**Big Ideas:**\n",
        "\n",
        "1. **Samples vary** - confidence intervals capture this uncertainty\n",
        "   \n",
        "2. **Larger samples** give more precise estimates  \n",
        "   \n",
        "3. **Higher confidence** means wider intervals\n",
        "   \n",
        "4. **The CLT** makes normal-based inference possible\n",
        ":::\n",
        "::: {.column}\n",
        "**Practical Skills:**\n",
        "\n",
        "- Build CIs for means and proportions\n",
        "  \n",
        "- Interpret confidence correctly\n",
        "  \n",
        "- Plan sample sizes for desired precision\n",
        "  \n",
        "- Avoid common interpretation mistakes\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "## Comprehensive Resources üìö\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### üìñ Required Reading\n",
        "- **OpenIntro Statistics**\n",
        "  - Section 1.3: Sampling principles and strategies\n",
        "  - Section 3.3: Confidence intervals for a mean\n",
        "  - Section 4.1: Central Limit Theorem\n",
        "  - Section 7.1.1 The distribution of $\\bar x$\n",
        "  - Section7.1.2 Evaluating the two conditions required for modeling $\\bar x$\n",
        "  - Section 7.1.3 Introducing the $t$-distribution \n",
        "\n",
        "\n",
        "### üé• Video Resources\n",
        "- [**Khan Academy:** Central Limit Theorem](https://www.khanacademy.org/math/ap-statistics/sampling-distribution-ap/what-is-sampling-distribution/v/central-limit-theorem)\n",
        "- [**StatQuest:** Confidence Intervals Explained](https://www.youtube.com/watch?v=TqOeMYtOc1w) \n",
        "- [**3Blue1Brown:** Central Limit Theorem Visualization](https://www.3blue1brown.com/lessons/clt)\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column}\n",
        "\n",
        "### üíª Interactive Tools\n",
        "- [**Seeing Theory:** Probability Visualizations](https://seeing-theory.brown.edu/)\n",
        "- [**Rossman & Chance Applets:** Sampling Distributions](https://www.rossmanchance.com/applets/OneSample53.html?population=model)\n",
        "- [**Central Limit Theorem Simulator**](http://www.ltcconline.net/greenl/java/Statistics/clt/cltsimulation.html)\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Questions? ü§î \n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "**Office Hours:** Thursday 11AM (link on Canvas)  \n",
        "**Email:** nmathlouthi@ucsb.edu  \n",
        "\n",
        "\n",
        "*\"The goal is not to eliminate uncertainty, but to understand and work with it\"*\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "<script>\n",
        "// Direct solution toggle implementation\n",
        "console.log('Solution toggle script loaded');\n",
        "\n",
        "// Function to setup toggles\n",
        "function setupToggles() {\n",
        "  console.log('Setting up toggles...');\n",
        "  const buttons = document.querySelectorAll('.solution-toggle');\n",
        "  console.log('Found buttons:', buttons.length);\n",
        "  \n",
        "  buttons.forEach((btn, i) => {\n",
        "    console.log('Setting up button', i + 1);\n",
        "    \n",
        "    // Clear any existing handlers\n",
        "    btn.onclick = null;\n",
        "    \n",
        "    // Add click handler\n",
        "    btn.onclick = function(e) {\n",
        "      e.preventDefault();\n",
        "      e.stopPropagation();\n",
        "      console.log('Button clicked!');\n",
        "      \n",
        "      const parent = this.closest('.collapsible-solution');\n",
        "      if (parent) {\n",
        "        parent.classList.toggle('open');\n",
        "        this.textContent = parent.classList.contains('open') ? 'Hide Solution' : 'Show Solution';\n",
        "        console.log('Toggled! Open:', parent.classList.contains('open'));\n",
        "      }\n",
        "    };\n",
        "  });\n",
        "}\n",
        "\n",
        "// Try multiple times\n",
        "document.addEventListener('DOMContentLoaded', setupToggles);\n",
        "window.addEventListener('load', setupToggles);\n",
        "setTimeout(setupToggles, 500);\n",
        "setTimeout(setupToggles, 1000);\n",
        "setTimeout(setupToggles, 2000);\n",
        "\n",
        "// For Reveal.js\n",
        "if (typeof Reveal !== 'undefined') {\n",
        "  Reveal.addEventListener('ready', setupToggles);\n",
        "}\n",
        "</script>"
      ],
      "id": "a1901a07"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/narjesmathlouthi/Desktop/PSTAT5A/web/PSTAT5A/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}