{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A: Counting\"\n",
        "subtitle: \"Lecture 7 - Permutations\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: 7/07/2025\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data - Counting ¬© 2025 Narjes Mathlouthi\"\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "eee57192"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import math"
      ],
      "id": "62373559",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Welcome to Lecture 7 {.center}\n",
        "\n",
        "*The art and science of systematic enumeration*\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Today's Learning Objectives {#learning-objectives}\n",
        "\n",
        "::: {.callout-tip title=\"Learning Objectives\"}\n",
        "By the end of this lecture, you will be able to:\n",
        "\n",
        "- Apply the fundamental counting principles ([@sec-fundamental-counting])\n",
        "- Calculate permutations with and without repetition ([@sec-permutations], [@sec-permutations-r-from-n], [@sec-permutations-repetition])\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Why Study Counting?{.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"55%\"}\n",
        "\n",
        "::: {.icon-section}\n",
        "<i class=\"fas fa-calculator\"></i>\n",
        "\n",
        ":::\n",
        "\n",
        "Counting helps us:\n",
        "\n",
        "- Calculate probabilities for complex events  \n",
        "- Solve optimization problems  \n",
        "- Understand combinations in genetics, computer science  \n",
        "- Analyze algorithms and data structures  \n",
        "- Make decisions involving arrangements and selections\n",
        ":::\n",
        "\n",
        "::: {.column width=\"45%\"}\n",
        "::: {.callout-example title=\"Applications\"}\n",
        "**Real-world applications of counting include:**\n",
        "\n",
        "- **Cryptography**: Password strength and encryption key space\n",
        "- **Genetics**: DNA sequence analysis and gene combinations  \n",
        "- **Tournament brackets**: March Madness and sports competitions\n",
        "- **Lottery odds**: Probability calculations for games of chance\n",
        "- **Password security**: Character combinations and brute force protection\n",
        ":::\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/counting_icon.png){fig-align=\"left\" width=\"10%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Fundamental Counting Principle {#sec-fundamental-counting .smaller} \n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "::: {.callout-note title=\"Multiplication Rule\"} \n",
        "If a procedure consists of **$k$** separate tasks where:\n",
        "\n",
        "- Task 1 can be performed in **$n_1$** ways\n",
        "  \n",
        "- Task 2 can be performed in **$n_2$** ways\n",
        "  \n",
        "- ...\n",
        "  \n",
        "- Task **$k$** can be performed in **$n_k$** ways\n",
        "\n",
        "Then, the entire procedure can be performed in **$n_1 \\times n_2 \\times \\cdots \\times n_k$** ways\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}\n",
        "::: {.callout-example title=\"Visual Demo: Task Tree\"}\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "%%{init: {'flowchart': {'nodeSpacing': 20, 'rankSpacing': 50}}}%%\n",
        "flowchart TD\n",
        "    Start([üü¢ Start]) --> T1[üìã Task 1<br/>n‚ÇÅ ways]\n",
        "    T1 --> C1[Choice 1]\n",
        "    T1 --> C2[Choice 2]\n",
        "    T1 --> Cn1[Choice n‚ÇÅ]\n",
        "    \n",
        "    C1 --> T2[üìã Task 2<br/>n‚ÇÇ ways]\n",
        "    C2 --> T2\n",
        "    Cn1 --> T2\n",
        "    \n",
        "    T2 --> C21[Choice 1]\n",
        "    T2 --> C22[Choice 2]\n",
        "    T2 --> C2n[Choice n‚ÇÇ]\n",
        "    \n",
        "    C21 --> Total[üéØ Total ways<br/>n‚ÇÅ √ó n‚ÇÇ √ó ... √ó n‚Çñ]\n",
        "    C22 --> Total\n",
        "    C2n --> Total\n",
        "    \n",
        "    classDef start fill:#d4edda,stroke:#155724,stroke-width:3px\n",
        "    classDef task fill:#d1ecf1,stroke:#0c5460,stroke-width:2px\n",
        "    classDef choice fill:#fff3cd,stroke:#856404,stroke-width:1px\n",
        "    classDef total fill:#f8d7da,stroke:#721c24,stroke-width:3px\n",
        "    \n",
        "    class Start start\n",
        "    class T1,T2 task\n",
        "    class C1,C2,Cn1,C21,C22,C2n choice\n",
        "    class Total total\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Simple Counting Example {.smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "::: {.example .smaller}\n",
        "\n",
        "**Format**:  ABC-123\n",
        "\n",
        "$$\n",
        "\\underbrace{A \\; B \\; \\_ \\; \\ - \\_ \\; \\_ \\; \\_}_{positions}\n",
        "$$\n",
        "\n",
        "- **First position:** 26 letters\n",
        "  \n",
        "- **Second position:** 26 letters  \n",
        "  \n",
        "- **Third position:** 26 letters\n",
        "  \n",
        "- **Fourth position:** 10 digits\n",
        "  \n",
        "- **Fifth position:** 10 digits\n",
        "  \n",
        "- **Sixth position:** 10 digits\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/count.png){width=\"70px\"}\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        "::: {.solution .fragment}\n",
        "Total possibilities: $26 \\times 26 \\times 26 \\times 10 \\times 10 \\times 10 = 26^3 \\times 10^3 = 17,576,000$\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Restaurant Menu Example{.smaller}\n",
        "\n",
        "::: {.example}\n",
        "A restaurant offers:\n",
        "\n",
        "üç§ Appetizers: 4\n",
        "\n",
        "üç≤ Main Courses: 6\n",
        "\n",
        "üç∞ Desserts: 3\n",
        "\n",
        "**How many different three-course meals are possible?**\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$4 \\times 6 \\times 3 = 72$ different meals\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 1 {#practice-1 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A password must contain:\n",
        "\n",
        "- **Exactly 8 characters**\n",
        "  \n",
        "- Each character is either a **letter** (26 possibilities) or **digit** (10 possibilities)\n",
        "\n",
        "**How many possible passwords are there?**\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/login.png){width=\"10%\" fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "Each position has $26 + 10 = 36$ choices.\n",
        "\n",
        "Total: $36^8 = 2,821,109,907,456$ passwords\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## What Are Permutations? {#sec-permutations .smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "::: {.callout-note title=\"Permutation\"}\n",
        "An arrangement of objects where **order matters**\n",
        ":::\n",
        "\n",
        "::: {.callout-important title=\"Order Matters\"}\n",
        "- Race finish positions (1st, 2nd, 3rd)\n",
        "  \n",
        "- Seating arrangements\n",
        "  \n",
        "- Passwords\n",
        "  \n",
        "- DNA sequences\n",
        "\n",
        "![](/files/lecture_notes/lecture6/img/letter.png){width=\"20%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.column}\n",
        "\n",
        "::: {.callout-example title=\"Permutation Animation: Placing Objects in Boxes\"}"
      ],
      "id": "24eaff11"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import plotly.graph_objects as go\n",
        "import itertools\n",
        "\n",
        "# Create permutation animation\n",
        "items = ['A', 'B', 'C']\n",
        "perms = list(itertools.permutations(items))\n",
        "\n",
        "# Show first permutation step by step\n",
        "perm = perms[0]  # ABC\n",
        "fig = go.Figure()\n",
        "\n",
        "# Create boxes with step-by-step filling\n",
        "for step in range(4):\n",
        "    boxes = [''] * 3\n",
        "    for i in range(step):\n",
        "        boxes[i] = perm[i]\n",
        "    \n",
        "    fig.add_trace(go.Bar(\n",
        "        x=['Box 1', 'Box 2', 'Box 3'],\n",
        "        y=[1, 1, 1],\n",
        "        text=boxes,\n",
        "        textposition='inside',\n",
        "        marker_color=['lightblue']*3,\n",
        "        hoverinfo='none',\n",
        "        showlegend=False,\n",
        "        visible=(step==3)  # Only show final step\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Permutation ABC: Step-by-Step Placement',\n",
        "    yaxis=dict(showticklabels=False, range=[0, 1.5]),\n",
        "    xaxis=dict(showticklabels=True),\n",
        "    height=300,\n",
        "    width=500,\n",
        "    margin=dict(l=10, r=10, t=40, b=10)\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "# Show all permutations\n",
        "print(\"All permutations of ABC:\")\n",
        "for i, perm in enumerate(perms):\n",
        "    print(f\"{i+1}. {''.join(perm)}\")"
      ],
      "id": "bf44f2d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations of $n$ Distinct Objects {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "The number of ways to arrange $n$ distinct objects is:\n",
        "\n",
        "$$n! = n \\times (n-1) \\times (n-2) \\times \\cdots \\times 2 \\times 1$$\n",
        ":::\n",
        "\n",
        "\n",
        "![](/files/lecture_notes/lecture6/img/people.png){width=\"30%\" fig-align=\"right\"}\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.example}\n",
        "Seating Process:\n",
        "\n",
        "**1st position:** 5 choices (Alice, Bob, Carol, David, Eve)\n",
        "\n",
        "**2nd position:** 4 choices (whoever is left)\n",
        "\n",
        "**3rd position:** 3 choices (whoever is left)\n",
        "\n",
        "**4th position:** 2 choices (whoever is left)\n",
        "\n",
        "**5th position:** 1 choice (last person)\n",
        "\n",
        "**How many ways can 5 people sit in a row?**\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$ ways\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Factorial Values {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "| $n$ | $n!$ |\n",
        "|-----|------|\n",
        "| 0   | 1    |\n",
        "| 1   | 1    |\n",
        "| 2   | 2    |\n",
        "| 3   | 6    |\n",
        "| 4   | 24   |\n",
        "| 5   | 120  |\n",
        "| 10  | 3,628,800 |\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "485fd6e6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "# Create factorial data\n",
        "n_values = list(range(11))\n",
        "factorials = [math.factorial(n) for n in n_values]\n",
        "\n",
        "# Create interactive plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bar chart\n",
        "fig.add_trace(go.Bar(\n",
        "    x=n_values,\n",
        "    y=factorials,\n",
        "    marker_color='lightblue',\n",
        "    name='n!',\n",
        "    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'\n",
        "))\n",
        "\n",
        "# Add line for exponential growth\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=factorials,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color='red', width=2),\n",
        "    name='Growth Trend',\n",
        "    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Factorial Growth: n! vs n',\n",
        "    xaxis_title='n',\n",
        "    yaxis_title='n!',\n",
        "    height=400,\n",
        "    showlegend=True,\n",
        "    hovermode='x unified'\n",
        ")\n",
        "\n",
        "fig.update_xaxes(tickmode='linear', tick0=0, dtick=1)\n",
        "fig.update_yaxes(type='log', title='n! (log scale)')\n",
        "\n",
        "fig.show()"
      ],
      "id": "e26373a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.callout-tip title=\"Note\"}\n",
        "$0! = 1$ by definition\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations of $r$ Objects from $n$ {#sec-permutations-r-from-n .smaller}\n",
        "\n",
        ":::{.columns}\n",
        ":::{.column}\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "**$P(n,r)$** or **$_nP_r$**: Number of ways to arrange **$r$** objects selected from **$n$** distinct objects\n",
        "\n",
        "$$P(n,r) = \\frac{n!}{(n-r)!}$$\n",
        ":::\n",
        "\n",
        "![](/files/lecture_notes/lecture6/img/cunting_icon2.png){width=\"50%\"}\n",
        ":::\n",
        "\n",
        ":::{.column}\n",
        ":::{.callout-note .smaller}\n",
        "\n",
        "$$\n",
        "P_{k,n} = \n",
        "\\frac{n!}{(n-k)!}\n",
        "=\n",
        "$$\n",
        "\n",
        "$$\n",
        "= \\frac{\n",
        "  n(n-1)\\cdots(n-k+1)\\,\n",
        "  \\overbrace{(n-k)(n-k-1)\\cdots3\\cdot2\\cdot1}^{(n-k)!}\n",
        "}{\n",
        "  (n-k)!\n",
        "}\n",
        "$$\n",
        "\n",
        "$$\n",
        "= \\underbrace{\n",
        "n (n-1) (n-2) \\cdots (n-k+1)\n",
        "}_{k \\text{ terms}}\n",
        "$$\n",
        "\n",
        "\n",
        "\n",
        "Fill in **$k$** slots with no repetitions  \n",
        "$$\n",
        "\\underbrace{n \\; (n-1) \\; \\_ \\; \\_ \\; \\cdots}_{k}\n",
        "$$\n",
        "\n",
        "Note that if we allowed repetitions we would get **$n^k$** \n",
        "$$\n",
        "\\underbrace{n \\; n \\; n \\; \\cdots \\; n}_{k}\n",
        "$$\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "## Example \n",
        "\n",
        "::: {.example}\n",
        "**How many ways can we select and arrange 3 people from a group of 8 for president, vice-president, and secretary?**\n",
        "![](/files/lecture_notes/lecture6/img/networking.png){width=\"10%\"}\n",
        ":::\n",
        "\n",
        ":::{.solution .fragment}\n",
        "$P(8,3) = \\frac{8!}{(8-3)!} = \\frac{8!}{5!} = 8 \\times 7 \\times 6 = 336$\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Understanding $P(n,r)$ {.smaller}\n",
        "\n",
        "Why is $P(n,r) = \\frac{n!}{(n-r)!}$?\n",
        "\n",
        "- **First position:** $n$ choices\n",
        "- **Second position:** $(n-1)$ choices  \n",
        "- **Third position:** $(n-2)$ choices\n",
        "- ...\n",
        "- **$r$-th position:** $(n-r+1)$ choices\n",
        "\n",
        "::: {.formula-box}\n",
        "Total: $n \\times (n-1) \\times (n-2) \\times \\cdots \\times (n-r+1) = \\frac{n!}{(n-r)!}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 2 {#practice-2 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A baseball team has 15 players. How many ways can the coach:\n",
        "\n",
        "a) Arrange all 15 players in a line?\n",
        "b) Choose and arrange 9 players for the starting lineup (batting order matters)?\n",
        "\n",
        "![](/files/lecture_notes/lecture6/img/baseball-player.png){width=\"10%\"}\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) $15! = 1,307,674,368,000$\n",
        "b) $P(15,9) = \\frac{15!}{6!} = 1,816,214,400$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations with Repetition {#sec-permutations-repetition}\n",
        "\n",
        "::: {.callout-note title=\"Permutations with Repetition\"}\n",
        "When some objects are identical, we have **fewer** distinct arrangements\n",
        "\n",
        "If we have $n$ objects where:\n",
        "\n",
        "- $n_1$ are of type 1\n",
        "  \n",
        "- $n_2$ are of type 2  \n",
        "  \n",
        "- ...\n",
        "  \n",
        "- $n_k$ are of type $k$\n",
        "\n",
        "Number of distinct arrangements: $\\frac{n!}{n_1! \\times n_2! \\times \\cdots \\times n_k!}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations with Repetition Example {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.example}\n",
        "**How many distinct arrangements are there of the letters in \"STATISTICS\"?**\n",
        "![](/files/lecture_notes/lecture6/img/abc.png){width=\"10%\" fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        ":::{.callout-tip}\n",
        "**S-T-A-T-I-S-T-I-C-S**\n",
        "\n",
        "- Total letters: 10\n",
        "  \n",
        "- **S** appears 3 times\n",
        "  \n",
        "- **T** appears 3 times  \n",
        "  \n",
        "- **A** appears 1 time\n",
        "  \n",
        "- **I** appears 2 times\n",
        "  \n",
        "- **C** appears 1 time\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$\\frac{10!}{3! \\times 3! \\times 1! \\times 2! \\times 1!} = \\frac{3,628,800}{6 \\times 6 \\times 1 \\times 2 \\times 1} = \\frac{3,628,800}{72} = 50,400$\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Learning Objectives Summary {#learning-summary}\n",
        "\n",
        "::: {.callout-tip title=\"What We've Covered\"}\n",
        "In this lecture, we've addressed all the learning objectives:\n",
        "\n",
        "- ‚úÖ **Apply the fundamental counting principles**: Covered in [@sec-fundamental-counting]\n",
        "- ‚úÖ **Calculate permutations with and without repetition**: Covered in [@sec-permutations], [@sec-permutations-r-from-n], and [@sec-permutations-repetition]  \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Questions? {.center}\n",
        "\n",
        "\n",
        "**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)\n",
        "\n",
        "**Email**: nmathlouthi@ucsb.edu\n",
        "\n",
        "**Next Class**: Counting continued \n"
      ],
      "id": "436bf54e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}