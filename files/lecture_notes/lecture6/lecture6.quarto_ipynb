{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A: Counting\"\n",
        "subtitle: \"Lecture 7\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: today\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data - Counting ¬© 2025 Narjes Mathlouthi\"\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "7df24e42"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import math"
      ],
      "id": "c0ca2f45",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Welcome to Lecture 6 (Part 1) {.center}\n",
        "\n",
        "*The art and science of systematic enumeration*\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Today's Learning Objectives {#learning-objectives}\n",
        "\n",
        "::: {.callout-tip title=\"Learning Objectives\"}\n",
        "By the end of this lecture, you will be able to:\n",
        "\n",
        "- Apply the fundamental counting principles ([@sec-fundamental-counting])\n",
        "- Calculate permutations with and without repetition ([@sec-permutations], [@sec-permutations-r-from-n], [@sec-permutations-repetition])\n",
        "- Calculate combinations and understand when to use them ([@sec-combinations], [@sec-combinations-formula])\n",
        "- Distinguish between permutations and combinations ([@sec-permutation-vs-combination])\n",
        "- Use counting techniques to solve probability problems ([@sec-counting-probability])\n",
        "- Apply the inclusion-exclusion principle ([@sec-inclusion-exclusion])\n",
        "- Solve complex counting problems systematically ([@sec-problem-solving-strategy])\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Why Study Counting?{.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"55%\"}\n",
        "\n",
        "::: {.icon-section}\n",
        "<i class=\"fas fa-calculator\"></i>\n",
        "\n",
        ":::\n",
        "\n",
        "Counting helps us:\n",
        "\n",
        "- Calculate probabilities for complex events  \n",
        "- Solve optimization problems  \n",
        "- Understand combinations in genetics, computer science  \n",
        "- Analyze algorithms and data structures  \n",
        "- Make decisions involving arrangements and selections\n",
        ":::\n",
        "\n",
        "::: {.column width=\"45%\"}\n",
        "::: {.callout-example title=\"Applications\"}\n",
        "**Real-world applications of counting include:**\n",
        "\n",
        "- **Cryptography**: Password strength and encryption key space\n",
        "- **Genetics**: DNA sequence analysis and gene combinations  \n",
        "- **Tournament brackets**: March Madness and sports competitions\n",
        "- **Lottery odds**: Probability calculations for games of chance\n",
        "- **Password security**: Character combinations and brute force protection\n",
        ":::\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/counting_icon.png){fig-align=\"left\" width=\"10%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Fundamental Counting Principle {#sec-fundamental-counting} \n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.callout-note title=\"Multiplication Rule\"} \n",
        "If a procedure consists of **$k$** separate tasks where:\n",
        "\n",
        "- Task 1 can be performed in **$n_1$** ways\n",
        "  \n",
        "- Task 2 can be performed in **$n_2$** ways\n",
        "  \n",
        "- ...\n",
        "  \n",
        "- Task **$k$** can be performed in **$n_k$** ways\n",
        "\n",
        "Then, the entire procedure can be performed in **$n_1 \\times n_2 \\times \\cdots \\times n_k$** ways\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.callout-example title=\"Visual Demo: Task Tree\"}\n",
        "\n",
        "```{mermaid}\n",
        "flowchart LR\n",
        "    Start([Start]) --> T1[\"Task¬†1:¬†n‚ÇÅ¬†ways\"]\n",
        "    T1 --> C1[Choice¬†1]\n",
        "    T1 --> C2[Choice¬†2]\n",
        "    T1 --> Cn1[Choice¬†n‚ÇÅ]\n",
        "    C1 --> T2[\"Task¬†2:¬†n‚ÇÇ¬†ways\"]\n",
        "    C2 --> T2\n",
        "    Cn1 --> T2\n",
        "    T2 --> C21[Choice¬†1]\n",
        "    T2 --> C22[Choice¬†2]\n",
        "    T2 --> C2n[Choice¬†n‚ÇÇ]\n",
        "    C21 --> Total((\"Total¬†ways:\\n¬†n‚ÇÅ¬†√ó¬†n‚ÇÇ¬†√ó¬†...¬†√ó¬†n‚Çñ\"))\n",
        "    C22 --> Total\n",
        "    C2n --> Total\n",
        "```\n",
        "\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Simple Counting Example {.smaller}\n",
        "\n",
        "::: {.example}\n",
        "\n",
        "\n",
        "Format ABC-123\n",
        "\n",
        "- First position: 26 letters\n",
        "  \n",
        "- Second position: 26 letters  \n",
        "  \n",
        "- Third position: 26 letters\n",
        "  \n",
        "- Fourth position: 10 digits\n",
        "  \n",
        "- Fifth position: 10 digits\n",
        "  \n",
        "- Sixth position: 10 digits\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/count.png){width=\"70px\"}\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {.solution .fragment}\n",
        "Total possibilities: $26 \\times 26 \\times 26 \\times 10 \\times 10 \\times 10 = 26^3 \\times 10^3 = 17,576,000$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Restaurant Menu Example{.smaller}\n",
        "\n",
        "::: {.example}\n",
        "A restaurant offers:\n",
        "\n",
        "üç§ Appetizers: 4\n",
        "\n",
        "üç≤ Main Courses: 6\n",
        "\n",
        "üç∞ Desserts: 3\n",
        "\n",
        "**How many different three-course meals are possible?**\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$4 \\times 6 \\times 3 = 72$ different meals\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 1 {#practice-1 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A password must contain:\n",
        "\n",
        "- **Exactly 8 characters**\n",
        "  \n",
        "- Each character is either a **letter** (26 possibilities) or **digit** (10 possibilities)\n",
        "\n",
        "**How many possible passwords are there?**\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/login.png){width=\"10%\" fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "Each position has $26 + 10 = 36$ choices.\n",
        "\n",
        "Total: $36^8 = 2,821,109,907,456$ passwords\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## What Are Permutations? {#sec-permutations .smaller}\n",
        "\n",
        "::: {.callout-note title=\"Permutation\"}\n",
        "An arrangement of objects where **order matters**\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Permutation Animation: Placing Objects in Boxes\"}"
      ],
      "id": "f7e4d3d7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import plotly.graph_objects as go\n",
        "import itertools\n",
        "\n",
        "# Create permutation animation\n",
        "items = ['A', 'B', 'C']\n",
        "perms = list(itertools.permutations(items))\n",
        "\n",
        "# Show first permutation step by step\n",
        "perm = perms[0]  # ABC\n",
        "fig = go.Figure()\n",
        "\n",
        "# Create boxes with step-by-step filling\n",
        "for step in range(4):\n",
        "    boxes = [''] * 3\n",
        "    for i in range(step):\n",
        "        boxes[i] = perm[i]\n",
        "    \n",
        "    fig.add_trace(go.Bar(\n",
        "        x=['Box 1', 'Box 2', 'Box 3'],\n",
        "        y=[1, 1, 1],\n",
        "        text=boxes,\n",
        "        textposition='inside',\n",
        "        marker_color=['lightblue']*3,\n",
        "        hoverinfo='none',\n",
        "        showlegend=False,\n",
        "        visible=(step==3)  # Only show final step\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Permutation ABC: Step-by-Step Placement',\n",
        "    yaxis=dict(showticklabels=False, range=[0, 1.5]),\n",
        "    xaxis=dict(showticklabels=True),\n",
        "    height=300,\n",
        "    width=500,\n",
        "    margin=dict(l=10, r=10, t=40, b=10)\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "# Show all permutations\n",
        "print(\"All permutations of ABC:\")\n",
        "for i, perm in enumerate(perms):\n",
        "    print(f\"{i+1}. {''.join(perm)}\")"
      ],
      "id": "b9994e53",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Examples where order matters\"}\n",
        "- Race finish positions (1st, 2nd, 3rd)\n",
        "  \n",
        "- Seating arrangements\n",
        "  \n",
        "- Passwords\n",
        "  \n",
        "- DNA sequences\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations of $n$ Distinct Objects {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "The number of ways to arrange $n$ distinct objects is:\n",
        "\n",
        "$$n! = n \\times (n-1) \\times (n-2) \\times \\cdots \\times 2 \\times 1$$\n",
        ":::\n",
        "\n",
        "![](/files/lecture_notes/lecture7/img/numbers.png){width=\"10%\" fig-align=\"right\"}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.example}\n",
        "Seating Process:\n",
        "\n",
        "**1st position:** 5 choices (Alice, Bob, Carol, David, Eve)\n",
        "\n",
        "**2nd position:** 4 choices (whoever is left)\n",
        "\n",
        "**3rd position:** 3 choices (whoever is left)\n",
        "\n",
        "**4th position:** 2 choices (whoever is left)\n",
        "\n",
        "**5th position:** 1 choice (last person)\n",
        "\n",
        "**How many ways can 5 people sit in a row?**\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$ ways\n",
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Factorial Values {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "| $n$ | $n!$ |\n",
        "|-----|------|\n",
        "| 0   | 1    |\n",
        "| 1   | 1    |\n",
        "| 2   | 2    |\n",
        "| 3   | 6    |\n",
        "| 4   | 24   |\n",
        "| 5   | 120  |\n",
        "| 10  | 3,628,800 |\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "0c2cbac1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "# Create factorial data\n",
        "n_values = list(range(11))\n",
        "factorials = [math.factorial(n) for n in n_values]\n",
        "\n",
        "# Create interactive plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bar chart\n",
        "fig.add_trace(go.Bar(\n",
        "    x=n_values,\n",
        "    y=factorials,\n",
        "    marker_color='lightblue',\n",
        "    name='n!',\n",
        "    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'\n",
        "))\n",
        "\n",
        "# Add line for exponential growth\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=factorials,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color='red', width=2),\n",
        "    name='Growth Trend',\n",
        "    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Factorial Growth: n! vs n',\n",
        "    xaxis_title='n',\n",
        "    yaxis_title='n!',\n",
        "    height=400,\n",
        "    showlegend=True,\n",
        "    hovermode='x unified'\n",
        ")\n",
        "\n",
        "fig.update_xaxes(tickmode='linear', tick0=0, dtick=1)\n",
        "fig.update_yaxes(type='log', title='n! (log scale)')\n",
        "\n",
        "fig.show()"
      ],
      "id": "53d643b0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.callout-tip title=\"Note\"}\n",
        "$0! = 1$ by definition\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations of $r$ Objects from $n$ {#sec-permutations-r-from-n .smaller}\n",
        "\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "**$P(n,r)$** or **$_nP_r$**: Number of ways to arrange **$r$** objects selected from **$n$** distinct objects\n",
        "\n",
        "$$P(n,r) = \\frac{n!}{(n-r)!}$$\n",
        ":::\n",
        "\n",
        "::: {.example}\n",
        "**How many ways can we select and arrange 3 people from a group of 8 for president, vice-president, and secretary?**\n",
        ":::\n",
        "\n",
        ":::{.solution .fragment}\n",
        "$P(8,3) = \\frac{8!}{(8-3)!} = \\frac{8!}{5!} = 8 \\times 7 \\times 6 = 336$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Understanding $P(n,r)$ {.smaller}\n",
        "\n",
        "Why is $P(n,r) = \\frac{n!}{(n-r)!}$?\n",
        "\n",
        "- **First position:** $n$ choices\n",
        "- **Second position:** $(n-1)$ choices  \n",
        "- **Third position:** $(n-2)$ choices\n",
        "- ...\n",
        "- **$r$-th position:** $(n-r+1)$ choices\n",
        "\n",
        "::: {.formula-box}\n",
        "Total: $n \\times (n-1) \\times (n-2) \\times \\cdots \\times (n-r+1) = \\frac{n!}{(n-r)!}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 2 {#practice-2 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A baseball team has 15 players. How many ways can the coach:\n",
        "\n",
        "a) Arrange all 15 players in a line?\n",
        "b) Choose and arrange 9 players for the starting lineup (batting order matters)?\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) $15! = 1,307,674,368,000$\n",
        "b) $P(15,9) = \\frac{15!}{6!} = 1,816,214,400$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations with Repetition {#sec-permutations-repetition}\n",
        "\n",
        "::: {.callout-note title=\"Permutations with Repetition\"}\n",
        "When some objects are identical, we have **fewer** distinct arrangements\n",
        "\n",
        "If we have $n$ objects where:\n",
        "\n",
        "- $n_1$ are of type 1\n",
        "  \n",
        "- $n_2$ are of type 2  \n",
        "  \n",
        "- ...\n",
        "  \n",
        "- $n_k$ are of type $k$\n",
        "\n",
        "Number of distinct arrangements: $\\frac{n!}{n_1! \\times n_2! \\times \\cdots \\times n_k!}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Permutations with Repetition Example {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.example}\n",
        "**How many distinct arrangements are there of the letters in \"STATISTICS\"?**\n",
        ":::\n",
        "\n",
        "**S-T-A-T-I-S-T-I-C-S**\n",
        "\n",
        "- Total letters: 10\n",
        "  \n",
        "- **S** appears 3 times\n",
        "  \n",
        "- **T** appears 3 times  \n",
        "  \n",
        "- **A** appears 1 time\n",
        "  \n",
        "- **I** appears 2 times\n",
        "  \n",
        "- **C** appears 1 time\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$\\frac{10!}{3! \\times 3! \\times 1! \\times 2! \\times 1!} = \\frac{3,628,800}{6 \\times 6 \\times 1 \\times 2 \\times 1} = \\frac{3,628,800}{72} = 50,400$\n",
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## What Are Combinations? {#sec-combinations .smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.callout-note title=\"Combination\"}\n",
        "A selection of objects where **order does NOT matter**\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Visual Demo: Order Doesn't Matter\"}\n",
        "```\n",
        "Committee Selection:\n",
        "ABC, BAC, CAB ‚Üí Same committee!\n",
        "\n",
        "Race Results:\n",
        "ABC, BAC, CAB ‚Üí Different outcomes!\n",
        "\n",
        "Key Point: Order doesn't matter for combinations\n",
        "```\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Examples where order doesn't matter\"}\n",
        "- Choosing committee members\n",
        "- Selecting pizza toppings\n",
        "- Forming study groups\n",
        "- Lottery number selection\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.callout-example title=\"Combination Animation: Selecting Objects\"}"
      ],
      "id": "4102bbdb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import plotly.graph_objects as go\n",
        "import itertools\n",
        "\n",
        "# Create combination animation\n",
        "items = ['A', 'B', 'C', 'D']\n",
        "r = 2\n",
        "combs = list(itertools.combinations(items, r))\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Show all combinations\n",
        "for i, comb in enumerate(combs):\n",
        "    # Create selection visualization\n",
        "    selected = list(comb)\n",
        "    not_selected = [item for item in items if item not in comb]\n",
        "    \n",
        "    fig.add_trace(go.Bar(\n",
        "        x=['Selected', 'Not Selected'],\n",
        "        y=[len(selected), len(not_selected)],\n",
        "        text=[f\"{', '.join(selected)}\", f\"{', '.join(not_selected)}\"],\n",
        "        textposition='inside',\n",
        "        marker_color=['lightgreen', 'lightgray'],\n",
        "        name=f'Combination {i+1}',\n",
        "        hovertemplate='%{text}<extra></extra>',\n",
        "        visible=(i==0)  # Only show first by default\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    title=f'Combinations of {len(items)} items taken {r} at a time',\n",
        "    yaxis=dict(showticklabels=False, range=[0, 3]),\n",
        "    xaxis=dict(showticklabels=True),\n",
        "    height=300,\n",
        "    width=500,\n",
        "    showlegend=False\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "\n",
        "print(f\"All combinations of {len(items)} items taken {r} at a time:\")\n",
        "for i, comb in enumerate(combs):\n",
        "    print(f\"{i+1}. {', '.join(comb)}\")"
      ],
      "id": "824ee956",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Combinations Formula {#sec-combinations-formula}\n",
        "\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "$C(n,r)$ or $\\binom{n}{r}$: Number of ways to choose $r$ objects from $n$ distinct objects (order doesn't matter)\n",
        "\n",
        "$$C(n,r) = \\binom{n}{r} = \\frac{n!}{r!(n-r)!}$$\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Example\"}\n",
        "How many ways can we choose 3 people from a group of 8 for a committee?\n",
        "\n",
        "$C(8,3) = \\frac{8!}{3!(8-3)!} = \\frac{8!}{3! \\times 5!} = \\frac{8 \\times 7 \\times 6}{3 \\times 2 \\times 1} = 56$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Relationship: Permutations vs Combinations\n",
        "\n",
        "::: {.callout-tip title=\"Relationship\"}\n",
        "$P(n,r) = C(n,r) \\times r!$\n",
        "\n",
        "**Why?** For each combination of $r$ objects, there are $r!$ ways to arrange them\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Visual Demo: P vs C Relationship\"}\n",
        "```\n",
        "Relationship: P(n,r) = C(n,r) √ó r!\n",
        "\n",
        "Example: Choose 3 from 8 people\n",
        "- C(8,3) = 56 combinations\n",
        "- For each combination, arrange 3 people: 3! = 6 ways\n",
        "- Total: 56 √ó 6 = 336 = P(8,3)\n",
        "\n",
        "Combination ABC ‚Üí Permutations: ABC, ACB, BAC, BCA, CAB, CBA\n",
        "```\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Example\"}\n",
        "$P(8,3) = C(8,3) \\times 3! = 56 \\times 6 = 336$ ‚úì\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Key Decision: Permutation or Combination? {#sec-permutation-vs-combination}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.callout-tip title=\"How to Decide\"}\n",
        "**Ask yourself**: Does order matter?\n",
        "\n",
        "**Order matters** ‚Üí Use **Permutations**\n",
        "- Arrangements, sequences, rankings\n",
        "\n",
        "**Order doesn't matter** ‚Üí Use **Combinations**  \n",
        "- Selections, groups, subsets\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "c4da3f53"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "# Create comparison data\n",
        "n_values = list(range(2, 11))\n",
        "r_values = [2] * len(n_values)\n",
        "\n",
        "permutations = [n * (n-1) for n in n_values]\n",
        "combinations = [n * (n-1) // 2 for n in n_values]\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add permutation line\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=permutations,\n",
        "    mode='lines+markers',\n",
        "    name='P(n,2)',\n",
        "    line=dict(color='red', width=3),\n",
        "    hovertemplate='n=%{x}<br>P(n,2)=%{y}<extra></extra>'\n",
        "))\n",
        "\n",
        "# Add combination line\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=combinations,\n",
        "    mode='lines+markers',\n",
        "    name='C(n,2)',\n",
        "    line=dict(color='blue', width=3),\n",
        "    hovertemplate='n=%{x}<br>C(n,2)=%{y}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='P(n,2) vs C(n,2) Comparison',\n",
        "    xaxis_title='n',\n",
        "    yaxis_title='Count',\n",
        "    height=400,\n",
        "    showlegend=True\n",
        ")\n",
        "\n",
        "fig.update_xaxes(tickmode='linear', tick0=2, dtick=1)\n",
        "fig.show()"
      ],
      "id": "3239be65",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::{.callout-tip}\n",
        "‚úÖ **$P(n,r)$** = counts both selection & arrangement ‚Üí grows faster\n",
        "\n",
        "‚úÖ **$C(n,r)$** = counts only selection ‚Üí grows slower\n",
        "\n",
        "‚úÖ The difference comes from **$r!$**, which is big even for modest $r$.\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 3 {#practice-3 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "From a class of 20 students:\n",
        "\n",
        "a) How many ways to choose 5 students for a study group?\n",
        "b) How many ways to choose a president, vice-president, and secretary?\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) $C(20,5) = \\frac{20!}{5! \\times 15!} = 15,504$ (order doesn't matter)\n",
        "b) $P(20,3) = \\frac{20!}{17!} = 6,840$ (order matters)\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Properties of Combinations\n",
        "\n",
        "::: {.callout-tip title=\"Properties\"}\n",
        "1. **Symmetry**: $\\binom{n}{r} = \\binom{n}{n-r}$\n",
        "2. **Pascal's Identity**: $\\binom{n}{r} = \\binom{n-1}{r-1} + \\binom{n-1}{r}$\n",
        "3. **Boundary conditions**: $\\binom{n}{0} = \\binom{n}{n} = 1$\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Example\"}\n",
        "$\\binom{8}{3} = \\binom{8}{5} = 56$ ‚úì\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Pascal's Triangle {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"40%\"}\n",
        "::: {.callout-example title=\"Pascal's Triangle\"}\n",
        "```\n",
        "           1\n",
        "         1   1\n",
        "       1   2   1\n",
        "     1   3   3   1\n",
        "   1   4   6   4   1\n",
        " 1   5  10  10   5   1\n",
        "1   6  15  20  15   6   1\n",
        "```\n",
        "\n",
        "**Pattern**: Each number is the sum of the two numbers above it.\n",
        "\n",
        "**Formula**: $\\binom{n}{r} = \\binom{n-1}{r-1} + \\binom{n-1}{r}$\n",
        "\n",
        "Each number is $\\binom{n}{r}$ where $n$ is the row and $r$ is the position\n",
        "\n",
        "**Example**: $\\binom{4}{2} = 6$ (row 4, position 2)\n",
        "\n",
        "```\n",
        "Row 3:       1   3   3   1\n",
        "            ‚Üô ‚Üò ‚Üô ‚Üò ‚Üô ‚Üò ‚Üô ‚Üò\n",
        "Row 4:     1   4   6   4   1\n",
        "\n",
        "```\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "::: {.callout-example title=\"Pascal's Triangle Animation\"}"
      ],
      "id": "c2c91d65"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Generate Pascal's triangle\n",
        "def pascal_triangle(n):\n",
        "    triangle = []\n",
        "    for i in range(n):\n",
        "        row = [1] * (i + 1)\n",
        "        for j in range(1, i):\n",
        "            row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n",
        "        triangle.append(row)\n",
        "    return triangle\n",
        "\n",
        "# Create triangle data\n",
        "n_rows = 8\n",
        "triangle = pascal_triangle(n_rows)\n",
        "\n",
        "# Create heatmap\n",
        "fig = go.Figure(data=go.Heatmap(\n",
        "    z=triangle,\n",
        "    colorscale='Blues',\n",
        "    showscale=True,\n",
        "    text=triangle,\n",
        "    texttemplate=\"%{text}\",\n",
        "    textfont={\"size\": 12},\n",
        "    hoverongaps=False\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Pascal\\'s Triangle (Combination Values)',\n",
        "    xaxis_title='Position (r)',\n",
        "    yaxis_title='Row (n)',\n",
        "    height=400,\n",
        "    width=500\n",
        ")\n",
        "\n",
        "fig.update_xaxes(showticklabels=False)\n",
        "fig.update_yaxes(showticklabels=False)\n",
        "\n",
        "fig.show()\n",
        "\n",
        "print(\"Pascal's Triangle (showing C(n,r) values):\")\n",
        "for i, row in enumerate(triangle):\n",
        "    print(f\"Row {i}: {row}\")"
      ],
      "id": "5835ec3b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Binomial Theorem\n",
        "\n",
        "::: {.callout-important title=\"Key Formula\"}\n",
        "$$(x + y)^n = \\sum_{r=0}^{n} \\binom{n}{r} x^{n-r} y^r$$\n",
        ":::\n",
        "\n",
        "::: {.callout-example title=\"Example\"}\n",
        "$(x + y)^3 = \\binom{3}{0}x^3 + \\binom{3}{1}x^2y + \\binom{3}{2}xy^2 + \\binom{3}{3}y^3$\n",
        "\n",
        "$= x^3 + 3x^2y + 3xy^2 + y^3$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Counting and Probability {#sec-counting-probability .smaller}\n",
        "\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.example}\n",
        "A committee of 4 people is chosen from 7 women and 5 men. What's the probability that exactly 2 are women?\n",
        ":::\n",
        "\n",
        "Total ways to choose 4 from 12: $\\binom{12}{4} = 495$\n",
        "\n",
        "Ways to choose 2 women from 7: $\\binom{7}{2} = 21$\n",
        "\n",
        "Ways to choose 2 men from 5: $\\binom{5}{2} = 10$\n",
        "\n",
        "::: {.solution .fragment}\n",
        "Favorable outcomes: $\\binom{7}{2} \\times \\binom{5}{2} = 21 \\times 10 = 210$\n",
        "\n",
        "Probability: $\\frac{210}{495} = \\frac{14}{33}$\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "6a3f9dce"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "# Create probability distribution\n",
        "women_counts = [0, 1, 2, 3, 4]\n",
        "probabilities = []\n",
        "\n",
        "for w in women_counts:\n",
        "    if w <= 7 and (4-w) <= 5:\n",
        "        favorable = math.comb(7, w) * math.comb(5, 4-w)\n",
        "        total = math.comb(12, 4)\n",
        "        prob = favorable / total\n",
        "        probabilities.append(prob)\n",
        "    else:\n",
        "        probabilities.append(0)\n",
        "\n",
        "fig = go.Figure(data=go.Bar(\n",
        "    x=women_counts,\n",
        "    y=probabilities,\n",
        "    marker_color=['lightcoral', 'lightblue', 'lightgreen', 'lightyellow', 'lightpink'],\n",
        "    hovertemplate='Women: %{x}<br>Probability: %{y:.3f}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Probability Distribution: Women in Committee',\n",
        "    xaxis_title='Number of Women',\n",
        "    yaxis_title='Probability',\n",
        "    height=400,\n",
        "    showlegend=False\n",
        ")\n",
        "\n",
        "fig.update_xaxes(tickmode='linear', tick0=0, dtick=1)\n",
        "fig.show()"
      ],
      "id": "39a73d66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 4 {#practice-4 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A standard deck has 52 cards. What's the probability that a 5-card hand contains:\n",
        "\n",
        "a) Exactly 3 aces?\n",
        "b) At least 1 ace?\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) Ways to get 3 aces from 4: $\\binom{4}{3} = 4$\n",
        "   Ways to get 2 non-aces from 48: $\\binom{48}{2} = 1,128$\n",
        "   Total 5-card hands: $\\binom{52}{5} = 2,598,960$\n",
        "\n",
        "   Probability: $\\frac{4 \\times 1,128}{2,598,960} = \\frac{4,512}{2,598,960} \\approx 0.00174$\n",
        "\n",
        "b) Ways to choose 5 cards with no aces: $\\binom{48}{5} = 1,712,304$\n",
        "\n",
        "   $P(\\text{at least 1 ace}) = 1 - \\frac{\\binom{48}{5}}{\\binom{52}{5}} = 1 - \\frac{1,712,304}{2,598,960} \\approx 0.341$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 4 (continued){.smaller}\n",
        "\n",
        ":::{.example}\n",
        "b) At least 1 ace = 1 - (no aces)\n",
        ":::\n",
        "\n",
        ":::{.callout-tip}\n",
        "Ways to choose 5 cards with no aces: $\\binom{48}{5} = 1,712,304$\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$P(\\text{at least 1 ace}) = 1 - \\frac{\\binom{48}{5}}{\\binom{52}{5}} = 1 - \\frac{1,712,304}{2,598,960} \\approx 0.341$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Permutations with Restrictions {.smaller}\n",
        "\n",
        "::: {.example}\n",
        "How many 6-letter \"words\" can be formed from the letters A, B, C, D, E, F if:\n",
        "\n",
        "- No letter is repeated\n",
        "  \n",
        "- A and B must be adjacent\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "Treat AB as a single unit\n",
        "\n",
        "- 5 units to arrange: (AB), C, D, E, F ‚Üí $5! = 120$ ways\n",
        "  \n",
        "- A and B can be arranged within their unit: $2! = 2$ ways\n",
        "  \n",
        "- Total: $5! \\times 2! = 240$ ways\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The Inclusion-Exclusion Principle {#sec-inclusion-exclusion .smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.formula-box}\n",
        "For two sets $A$ and $B$:\n",
        "$$|A \\cup B| = |A| + |B| - |A \\cap B|$$\n",
        "\n",
        "For three sets $A$, $B$, and $C$:\n",
        "$$|A \\cup B \\cup C| = |A| + |B| + |C| - |A \\cap B| \\\\\n",
        "- |A \\cap C| - |B \\cap C| + |A \\cap B \\cap C|$$\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.callout-example title=\"Visual Demo: Inclusion-Exclusion\"}"
      ],
      "id": "8b171960"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "\n",
        "# Parameters for circles\n",
        "r = 1\n",
        "center_a = (-0.7, 0)\n",
        "center_b = (0.7, 0)\n",
        "\n",
        "theta = np.linspace(0, 2 * np.pi, 200)\n",
        "\n",
        "# Circle A\n",
        "x_a = center_a[0] + r * np.cos(theta)\n",
        "y_a = center_a[1] + r * np.sin(theta)\n",
        "\n",
        "# Circle B\n",
        "x_b = center_b[0] + r * np.cos(theta)\n",
        "y_b = center_b[1] + r * np.sin(theta)\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add circles\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_a, y=y_a, mode='lines',\n",
        "    fill='toself', fillcolor='rgba(52, 152, 219, 0.3)',\n",
        "    line=dict(color='rgba(52, 152, 219, 1)', width=3),\n",
        "    name='A',\n",
        "    showlegend=False\n",
        "))\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_b, y=y_b, mode='lines',\n",
        "    fill='toself', fillcolor='rgba(231, 76, 60, 0.3)',\n",
        "    line=dict(color='rgba(231, 76, 60, 1)', width=3),\n",
        "    name='B',\n",
        "    showlegend=False\n",
        "))\n",
        "\n",
        "# Add labels\n",
        "fig.add_annotation(x=center_a[0]-0.5, y=0, text=\"A\", showarrow=False, font=dict(size=24))\n",
        "fig.add_annotation(x=center_b[0]+0.5, y=0, text=\"B\", showarrow=False, font=dict(size=24))\n",
        "fig.add_annotation(x=0, y=0, text=\"A‚à©B\", showarrow=False, font=dict(size=20, color=\"#333\"))\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Venn Diagram: Inclusion-Exclusion Principle\",\n",
        "    xaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[-2, 2]),\n",
        "    yaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[-1.5, 1.5]),\n",
        "    height=400,\n",
        "    width=500,\n",
        "    margin=dict(l=10, r=10, t=40, b=10)\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "84981afd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Inclusion-Exclusion Example {.smaller}\n",
        "\n",
        "::: {.example}\n",
        "How many integers from 1 to 100 are divisible by 2, 3, or 5?\n",
        ":::\n",
        "\n",
        "Let:\n",
        "\n",
        "- $A$ = divisible by 2: $|A| = 50$\n",
        "  \n",
        "- $B$ = divisible by 3: $|B| = 33$  \n",
        "  \n",
        "- $C$ = divisible by 5: $|C| = 20$\n",
        "\n",
        ":::{.callout-note}\n",
        "$|A \\cap B| = 16$ (divisible by 6)\n",
        "\n",
        "$|A \\cap C| = 10$ (divisible by 10)\n",
        "\n",
        "$|B \\cap C| = 6$ (divisible by 15)\n",
        "\n",
        "$|A \\cap B \\cap C| = 3$ (divisible by 30)\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Inclusion-Exclusion Solution {.smaller}\n",
        "\n",
        "\n",
        "::: {.solution .fragment}\n",
        "$$|A \\cup B \\cup C| = 50 + 33 + 20 - 16 - 10 - 6 + 3 = 74$$\n",
        "\n",
        "**Answer**: 74 integers from 1 to 100 are divisible by at least one of 2, 3, or 5\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Multinomial Coefficients {.smaller}\n",
        "\n",
        "::: {.callout-note title=\"Multinomial Coefficient\"}\n",
        "Number of ways to divide $n$ objects into groups of sizes $n_1, n_2, \\ldots, n_k$:\n",
        "\n",
        "$$\\binom{n}{n_1, n_2, \\ldots, n_k} = \\frac{n!}{n_1! \\times n_2! \\times \\cdots \\times n_k!}$$\n",
        ":::\n",
        "\n",
        "::: {.example}\n",
        "How many ways can 12 people be divided into 3 teams of 4?\n",
        "\n",
        "$\\binom{12}{4,4,4} = \\frac{12!}{4! \\times 4! \\times 4!} = 34,650$\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Problem-Solving Strategy {#sec-problem-solving-strategy}\n",
        "\n",
        "::: {.callout-tip title=\"Strategy\"}\n",
        "1. **Read carefully**: What exactly are we counting?\n",
        "2. **Identify the type**: Permutation, combination, or other?\n",
        "3. **Check for restrictions**: Are there constraints?\n",
        "4. **Does order matter?**: This determines permutation vs combination\n",
        "5. **Break down complex problems**: Use multiplication principle\n",
        "6. **Verify your answer**: Does it make sense?\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Common Mistakes to Avoid\n",
        "\n",
        "::: {.callout-tip title=\"Common Mistakes\"}\n",
        "1. **Confusing permutations and combinations**\n",
        "   - Always ask: \"Does order matter?\"\n",
        "2. **Forgetting about restrictions**\n",
        "   - Read the problem carefully\n",
        "3. **Double counting**\n",
        "   - Make sure you're not counting the same arrangement twice\n",
        "4. **Not considering the complement**\n",
        "   - Sometimes \"at least\" problems are easier using complements\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 6 {#practice-6 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A class has 15 students: 8 women and 7 men. How many ways can we:\n",
        "\n",
        "a) Form a committee of 5 people with exactly 3 women?\n",
        "b) Arrange 6 people in a row with alternating genders (starting with a woman)?\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) $\\binom{8}{3} \\times \\binom{7}{2} = 56 \\times 21 = 1,176$\n",
        "b) Choose 3 women from 8: $P(8,3) = 336$\n",
        "   Choose 3 men from 7: $P(7,3) = 210$\n",
        "   Total: $336 \\times 210 = 70,560$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Counting in Computer Science {.smaller}\n",
        "\n",
        "::: {.callout-example title=\"Applications\"}\n",
        "**Password Security**: \n",
        "\n",
        "- 8-character password with letters, digits, symbols\n",
        "  \n",
        "- $(26 + 26 + 10 + 32)^8 = 94^8 \\approx 6.1 \\times 10^{15}$\n",
        "\n",
        "**Hash Functions**: \n",
        "\n",
        "- Distributing data into buckets\n",
        "  \n",
        "- Collision probability calculations\n",
        "\n",
        "**Algorithm Analysis**:\n",
        "\n",
        "- Counting operations, comparisons\n",
        "  \n",
        "- Big O notation foundations\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Counting in Genetics {.smaller}\n",
        "\n",
        "::: {.callout-example title=\"Applications\"}\n",
        "**DNA Sequences**: \n",
        "\n",
        "- 4 bases (A, T, G, C)\n",
        "  \n",
        "- Gene of length $n$: $4^n$ possible sequences\n",
        "\n",
        "**Protein Folding**:\n",
        "\n",
        "- Number of possible conformations\n",
        "  \n",
        "- Combinatorial explosion\n",
        "\n",
        "**Population Genetics**:\n",
        "\n",
        "- Hardy-Weinberg calculations\n",
        "  \n",
        "- Allele combinations\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Real-World Applications {.smaller}\n",
        "\n",
        "::: {.callout-example title=\"Applications\"}\n",
        "**Lottery**: \n",
        "\n",
        "- Powerball: Choose 5 from 69, then 1 from 26\n",
        "  \n",
        "- Odds: $\\frac{1}{\\binom{69}{5} \\times 26} \\approx \\frac{1}{292,000,000}$\n",
        "\n",
        "**Cryptography**:\n",
        "\n",
        "- Key space size determines security\n",
        "  \n",
        "- RSA encryption relies on large number factorization\n",
        "\n",
        "**Sports Tournaments**:\n",
        "\n",
        "- March Madness bracket: $2^{63}$ possible outcomes\n",
        "  \n",
        "- Round-robin tournaments: $\\binom{n}{2}$ games\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Key Formulas Summary\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"40%\"}\n",
        "::: {.callout-important title=\"Summary of Key Formulas\"}\n",
        "- **Permutations**: $P(n,r) = \\frac{n!}{(n-r)!}$\n",
        "- **Combinations**: $C(n,r) = \\binom{n}{r} = \\frac{n!}{r!(n-r)!}$\n",
        "- **With repetition**: $\\frac{n!}{n_1! \\times n_2! \\times \\cdots \\times n_k!}$\n",
        "- **Inclusion-Exclusion**: $|A \\cup B| = |A| + |B| - |A \\cap B|$\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}"
      ],
      "id": "58affcd9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "# Create comparison of different counting methods\n",
        "n_values = list(range(2, 8))\n",
        "r_values = [2] * len(n_values)\n",
        "\n",
        "permutations = [n * (n-1) for n in n_values]\n",
        "combinations = [n * (n-1) // 2 for n in n_values]\n",
        "factorials = [math.factorial(n) for n in n_values]\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add different counting methods\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=permutations,\n",
        "    mode='lines+markers',\n",
        "    name='P(n,2)',\n",
        "    line=dict(color='red', width=3),\n",
        "    hovertemplate='n=%{x}<br>P(n,2)=%{y}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=combinations,\n",
        "    mode='lines+markers',\n",
        "    name='C(n,2)',\n",
        "    line=dict(color='blue', width=3),\n",
        "    hovertemplate='n=%{x}<br>C(n,2)=%{y}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=n_values,\n",
        "    y=factorials,\n",
        "    mode='lines+markers',\n",
        "    name='n!',\n",
        "    line=dict(color='green', width=3),\n",
        "    hovertemplate='n=%{x}<br>n!=%{y}<extra></extra>'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='Comparison of Counting Methods',\n",
        "    xaxis_title='n',\n",
        "    yaxis_title='Count (log scale)',\n",
        "    height=400,\n",
        "    showlegend=True\n",
        ")\n",
        "\n",
        "fig.update_xaxes(tickmode='linear', tick0=2, dtick=1)\n",
        "fig.update_yaxes(type='log')\n",
        "\n",
        "fig.show()"
      ],
      "id": "feda0508",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Technology and Counting {.smaller}\n",
        "\n",
        "::: {.callout-tip title=\"Tools\"}\n",
        "**Calculators**: \n",
        "\n",
        "- Use nPr and nCr functions\n",
        "  \n",
        "- Be careful with large numbers\n",
        "\n",
        "**Software**:\n",
        "\n",
        "- R: `factorial()`, `choose()`, `combn()`\n",
        "  \n",
        "- Python: `math.factorial()`, `math.comb()`\n",
        "  \n",
        "- Excel: `FACT()`, `COMBIN()`, `PERMUT()`\n",
        "\n",
        "**Online Tools**:\n",
        "\n",
        "- Wolfram Alpha for complex calculations\n",
        "  \n",
        "- Combination/permutation calculators\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Practice Problem 7 {#practice-7 .smaller}\n",
        "\n",
        "::: {.example}\n",
        "A standard deck of cards is shuffled. What's the probability that:\n",
        "\n",
        "a) The top 4 cards are all hearts?\n",
        "b) In a 13-card hand, you get exactly one card from each rank?\n",
        ":::\n",
        "\n",
        "::: {.solution .fragment}\n",
        "a) $\\frac{13}{52} \\times \\frac{12}{51} \\times \\frac{11}{50} \\times \\frac{10}{49} = \\frac{13 \\times 12 \\times 11 \\times 10}{52 \\times 51 \\times 50 \\times 49} \\approx 0.0026$\n",
        "\n",
        "b) Choose 1 card from each of 13 ranks: $4^{13}$\n",
        "   Total 13-card hands: $\\binom{52}{13}$\n",
        "   Probability: $\\frac{4^{13}}{\\binom{52}{13}} \\approx 6.3 \\times 10^{-6}$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Extending to Probability\n",
        "\n",
        "::: {.callout-tip title=\"Distributions\"}\n",
        "**Hypergeometric Distribution**:\n",
        "\n",
        "- Drawing without replacement\n",
        "  \n",
        "- Uses combinations: $P(X = k) = \\frac{\\binom{K}{k}\\binom{N-K}{n-k}}{\\binom{N}{n}}$\n",
        "\n",
        "**Binomial Distribution**:\n",
        "\n",
        "- Drawing with replacement  \n",
        "  \n",
        "- Uses combinations: $P(X = k) = \\binom{n}{k}p^k(1-p)^{n-k}$\n",
        "\n",
        "*We'll explore these distributions in detail in future lectures*\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Historical Note\n",
        "\n",
        "::: {.callout-tip title=\"History\"}\n",
        "**Blaise Pascal** (1623-1662) and **Pierre de Fermat** (1601-1665):\n",
        "- Founded probability theory through gambling problems\n",
        "- Pascal's triangle and combinations\n",
        "\n",
        "**Leonhard Euler** (1707-1783):\n",
        "- Advanced combinatorics\n",
        "- Graph theory connections\n",
        "\n",
        "Modern applications span computer science, biology, physics, and economics\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Common Student Questions\n",
        "\n",
        "::: {.callout-question title=\"FAQ\"}\n",
        "**Q**: \"When do I use permutations vs combinations?\"\n",
        "\n",
        "**A**: Ask \"Does order matter?\" Order matters ‚Üí permutation\n",
        "\n",
        "**Q**: \"How do I handle restrictions?\"\n",
        "\n",
        "**A**: Break the problem into cases or use complementary counting\n",
        "\n",
        "**Q**: \"What if objects are identical?\"\n",
        "\n",
        "**A**: Use the formula for permutations with repetition\n",
        "\n",
        "**Q**: \"How do I check my answer?\"\n",
        "\n",
        "**A**: Verify with small examples or use different methods\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Looking Ahead\n",
        "\n",
        "::: {.callout-tip title=\"Next Lecture\"}\n",
        "**Next lecture**: Discrete Probability Distributions\n",
        "- Binomial distribution (using combinations!)\n",
        "  \n",
        "- Hypergeometric distribution  \n",
        "  \n",
        "- Geometric distribution\n",
        "  \n",
        "- Expected value and variance\n",
        "\n",
        "**Connection**: Today's counting techniques are essential for probability calculations\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Study Tips\n",
        "\n",
        "::: {.callout-tip title=\"Tips\"}\n",
        "1. **Practice, practice, practice**: Work through many examples\n",
        "2. **Identify patterns**: Learn to recognize problem types\n",
        "3. **Start simple**: Build up to complex problems\n",
        "4. **Check your work**: Use different approaches when possible\n",
        "5. **Understand concepts**: Don't just memorize formulas\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Learning Objectives Summary {#learning-summary}\n",
        "\n",
        "::: {.callout-tip title=\"What We've Covered\"}\n",
        "In this lecture, we've addressed all the learning objectives:\n",
        "\n",
        "- ‚úÖ **Apply the fundamental counting principles**: Covered in [@sec-fundamental-counting]\n",
        "- ‚úÖ **Calculate permutations with and without repetition**: Covered in [@sec-permutations], [@sec-permutations-r-from-n], and [@sec-permutations-repetition]  \n",
        "- ‚úÖ **Calculate combinations and understand when to use them**: Covered in [@sec-combinations] and [@sec-combinations-formula]\n",
        "- ‚úÖ **Distinguish between permutations and combinations**: Covered in [@sec-permutation-vs-combination]\n",
        "- ‚úÖ **Use counting techniques to solve probability problems**: Covered in [@sec-counting-probability]\n",
        "- ‚úÖ **Apply the inclusion-exclusion principle**: Covered in [@sec-inclusion-exclusion]\n",
        "- ‚úÖ **Solve complex counting problems systematically**: Covered in [@sec-problem-solving-strategy]\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Final Thoughts\n",
        "\n",
        "Counting is fundamental to:\n",
        "\n",
        "- Probability calculations\n",
        "  \n",
        "- Statistical inference  \n",
        "  \n",
        "- Computer algorithms\n",
        "  \n",
        "- Scientific modeling\n",
        "\n",
        "::: {.callout-important title=\"Know the Basics\"}\n",
        "Permutations and combinations are the building blocks for advanced statistical concepts\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Questions? {.center}\n",
        "\n",
        "# Questions? {.center}\n",
        "\n",
        "**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)\n",
        "\n",
        "**Email**: nmathlouthi@ucsb.edu\n",
        "\n",
        "**Next Class**: Discrete Probability Distributions\n"
      ],
      "id": "83da6e78"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}