---
title: "PSTAT 5A: Counting"
subtitle: "Lecture 7"
author: "Narjes Mathlouthi"
date: today
format: 
  revealjs:
    logo: /img/logo.png
    theme: default
    css: /files/lecture_notes/theme/lecture-styles.css
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: "Understanding Data - Counting ¬© 2025 Narjes Mathlouthi"
    transition: slide
    background-transition: fade
jupyter: python3
---

```{python}
#| echo: false
#| warning: false
#| message: false

import plotly.graph_objects as go
import math
```

## Welcome to Lecture 7 {.center}

*The art and science of systematic enumeration*


---

## Today's Learning Objectives {#learning-objectives}

::: {.callout-tip title="Learning Objectives"}
By the end of this lecture, you will be able to:

- Apply the fundamental counting principles ([@sec-fundamental-counting])
- Calculate permutations with and without repetition ([@sec-permutations], [@sec-permutations-r-from-n], [@sec-permutations-repetition])
- Calculate combinations and understand when to use them ([@sec-combinations], [@sec-combinations-formula])
- Distinguish between permutations and combinations ([@sec-permutation-vs-combination])
- Use counting techniques to solve probability problems ([@sec-counting-probability])
- Apply the inclusion-exclusion principle ([@sec-inclusion-exclusion])
- Solve complex counting problems systematically ([@sec-problem-solving-strategy])
:::

---

## Why Study Counting?{.smaller}

::: {.columns}
::: {.column width="55%"}

::: {.icon-section}
<i class="fas fa-calculator"></i>

:::

Counting helps us:

- Calculate probabilities for complex events  
- Solve optimization problems  
- Understand combinations in genetics, computer science  
- Analyze algorithms and data structures  
- Make decisions involving arrangements and selections
:::

::: {.column width="45%"}
::: {.callout-example title="Applications"}
**Real-world applications of counting include:**

- **Cryptography**: Password strength and encryption key space
- **Genetics**: DNA sequence analysis and gene combinations  
- **Tournament brackets**: March Madness and sports competitions
- **Lottery odds**: Probability calculations for games of chance
- **Password security**: Character combinations and brute force protection
:::

![](/files/lecture_notes/lecture7/img/counting_icon.png){fig-align="left" width="10%"}
:::

:::

---

## The Fundamental Counting Principle {#sec-fundamental-counting} 

::: {.columns}

::: {.column width="50%"}
::: {.callout-note title="Multiplication Rule"} 
If a procedure consists of **$k$** separate tasks where:

- Task 1 can be performed in **$n_1$** ways
  
- Task 2 can be performed in **$n_2$** ways
  
- ...
  
- Task **$k$** can be performed in **$n_k$** ways

Then, the entire procedure can be performed in **$n_1 \times n_2 \times \cdots \times n_k$** ways
:::
:::

::: {.column width="50%"}
::: {.callout-example title="Visual Demo: Task Tree"}
```{mermaid}
flowchart LR
    Start([Start]) --> T1["Task¬†1:¬†n‚ÇÅ¬†ways"]
    T1 --> C1[Choice¬†1]
    T1 --> C2[Choice¬†2]
    T1 --> Cn1[Choice¬†n‚ÇÅ]
    C1 --> T2["Task¬†2:¬†n‚ÇÇ¬†ways"]
    C2 --> T2
    Cn1 --> T2
    T2 --> C21[Choice¬†1]
    T2 --> C22[Choice¬†2]
    T2 --> C2n[Choice¬†n‚ÇÇ]
    C21 --> Total(("Total¬†ways:\n¬†n‚ÇÅ¬†√ó¬†n‚ÇÇ¬†√ó¬†...¬†√ó¬†n‚Çñ"))
    C22 --> Total
    C2n --> Total
```
:::
:::
:::



---

## Simple Counting Example {.smaller}

::: {.example}


Format ABC-123

- First position: 26 letters
  
- Second position: 26 letters  
  
- Third position: 26 letters
  
- Fourth position: 10 digits
  
- Fifth position: 10 digits
  
- Sixth position: 10 digits

![](/files/lecture_notes/lecture7/img/count.png){width="70px"}
:::



::: {.solution .fragment}
Total possibilities: $26 \times 26 \times 26 \times 10 \times 10 \times 10 = 26^3 \times 10^3 = 17,576,000$
:::

---

## Restaurant Menu Example{.smaller}

::: {.example}
A restaurant offers:

üç§ Appetizers: 4

üç≤ Main Courses: 6

üç∞ Desserts: 3

**How many different three-course meals are possible?**
:::

::: {.solution .fragment}
$4 \times 6 \times 3 = 72$ different meals
:::

---

## Practice Problem 1 {#practice-1 .smaller}

::: {.example}
A password must contain:

- **Exactly 8 characters**
  
- Each character is either a **letter** (26 possibilities) or **digit** (10 possibilities)

**How many possible passwords are there?**

![](/files/lecture_notes/lecture7/img/login.png){width="10%" fig-align="right"}
:::

::: {.solution .fragment}
Each position has $26 + 10 = 36$ choices.

Total: $36^8 = 2,821,109,907,456$ passwords
:::

---

## What Are Permutations? {#sec-permutations .smaller}

::: {.callout-note title="Permutation"}
An arrangement of objects where **order matters**
:::

::: {.callout-example title="Permutation Animation: Placing Objects in Boxes"}
```{python}
#| echo: false
#| warning: false
import plotly.graph_objects as go
import itertools

# Create permutation animation
items = ['A', 'B', 'C']
perms = list(itertools.permutations(items))

# Show first permutation step by step
perm = perms[0]  # ABC
fig = go.Figure()

# Create boxes with step-by-step filling
for step in range(4):
    boxes = [''] * 3
    for i in range(step):
        boxes[i] = perm[i]
    
    fig.add_trace(go.Bar(
        x=['Box 1', 'Box 2', 'Box 3'],
        y=[1, 1, 1],
        text=boxes,
        textposition='inside',
        marker_color=['lightblue']*3,
        hoverinfo='none',
        showlegend=False,
        visible=(step==3)  # Only show final step
    ))

fig.update_layout(
    title='Permutation ABC: Step-by-Step Placement',
    yaxis=dict(showticklabels=False, range=[0, 1.5]),
    xaxis=dict(showticklabels=True),
    height=300,
    width=500,
    margin=dict(l=10, r=10, t=40, b=10)
)

fig.show()

# Show all permutations
print("All permutations of ABC:")
for i, perm in enumerate(perms):
    print(f"{i+1}. {''.join(perm)}")
```
:::

::: {.callout-example title="Examples where order matters"}
- Race finish positions (1st, 2nd, 3rd)
  
- Seating arrangements
  
- Passwords
  
- DNA sequences
:::

---

## Permutations of $n$ Distinct Objects {.smaller}

::: {.columns}
::: {.column width="50%"}

::: {.callout-important title="Key Formula"}
The number of ways to arrange $n$ distinct objects is:

$$n! = n \times (n-1) \times (n-2) \times \cdots \times 2 \times 1$$
:::

![](/files/lecture_notes/lecture7/img/numbers.png){width="10%" fig-align="right"}
:::

::: {.column width="50%"}

::: {.example}
Seating Process:

**1st position:** 5 choices (Alice, Bob, Carol, David, Eve)

**2nd position:** 4 choices (whoever is left)

**3rd position:** 3 choices (whoever is left)

**4th position:** 2 choices (whoever is left)

**5th position:** 1 choice (last person)

**How many ways can 5 people sit in a row?**
:::

::: {.solution .fragment}
$5! = 5 \times 4 \times 3 \times 2 \times 1 = 120$ ways
:::

:::
:::

---

## Factorial Values {.smaller}

::: {.columns}
::: {.column width="50%"}
| $n$ | $n!$ |
|-----|------|
| 0   | 1    |
| 1   | 1    |
| 2   | 2    |
| 3   | 6    |
| 4   | 24   |
| 5   | 120  |
| 10  | 3,628,800 |


:::

::: {.column width="50%"}
```{python}
#| echo: false
#| warning: false

# Create factorial data
n_values = list(range(11))
factorials = [math.factorial(n) for n in n_values]

# Create interactive plot
fig = go.Figure()

# Add bar chart
fig.add_trace(go.Bar(
    x=n_values,
    y=factorials,
    marker_color='lightblue',
    name='n!',
    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'
))

# Add line for exponential growth
fig.add_trace(go.Scatter(
    x=n_values,
    y=factorials,
    mode='lines+markers',
    line=dict(color='red', width=2),
    name='Growth Trend',
    hovertemplate='n=%{x}<br>n!=%{y:,}<extra></extra>'
))

fig.update_layout(
    title='Factorial Growth: n! vs n',
    xaxis_title='n',
    yaxis_title='n!',
    height=400,
    showlegend=True,
    hovermode='x unified'
)

fig.update_xaxes(tickmode='linear', tick0=0, dtick=1)
fig.update_yaxes(type='log', title='n! (log scale)')

fig.show()
```
:::

::: {.callout-tip title="Note"}
$0! = 1$ by definition
:::
:::

---

## Permutations of $r$ Objects from $n$ {#sec-permutations-r-from-n .smaller}

::: {.callout-important title="Key Formula"}
**$P(n,r)$** or **$_nP_r$**: Number of ways to arrange **$r$** objects selected from **$n$** distinct objects

$$P(n,r) = \frac{n!}{(n-r)!}$$
:::

::: {.example}
**How many ways can we select and arrange 3 people from a group of 8 for president, vice-president, and secretary?**
:::

:::{.solution .fragment}
$P(8,3) = \frac{8!}{(8-3)!} = \frac{8!}{5!} = 8 \times 7 \times 6 = 336$
:::

---

## Understanding $P(n,r)$ {.smaller}

Why is $P(n,r) = \frac{n!}{(n-r)!}$?

- **First position:** $n$ choices
- **Second position:** $(n-1)$ choices  
- **Third position:** $(n-2)$ choices
- ...
- **$r$-th position:** $(n-r+1)$ choices

::: {.formula-box}
Total: $n \times (n-1) \times (n-2) \times \cdots \times (n-r+1) = \frac{n!}{(n-r)!}$
:::

---

## Practice Problem 2 {#practice-2 .smaller}

::: {.example}
A baseball team has 15 players. How many ways can the coach:

a) Arrange all 15 players in a line?
b) Choose and arrange 9 players for the starting lineup (batting order matters)?
:::

::: {.solution .fragment}
a) $15! = 1,307,674,368,000$
b) $P(15,9) = \frac{15!}{6!} = 1,816,214,400$
:::

---

## Permutations with Repetition {#sec-permutations-repetition}

::: {.callout-note title="Permutations with Repetition"}
When some objects are identical, we have **fewer** distinct arrangements

If we have $n$ objects where:

- $n_1$ are of type 1
  
- $n_2$ are of type 2  
  
- ...
  
- $n_k$ are of type $k$

Number of distinct arrangements: $\frac{n!}{n_1! \times n_2! \times \cdots \times n_k!}$
:::

---

## Permutations with Repetition Example {.smaller}

::: {.columns}
::: {.column width="50%"}

::: {.example}
**How many distinct arrangements are there of the letters in "STATISTICS"?**
:::

**S-T-A-T-I-S-T-I-C-S**

- Total letters: 10
  
- **S** appears 3 times
  
- **T** appears 3 times  
  
- **A** appears 1 time
  
- **I** appears 2 times
  
- **C** appears 1 time

:::

::: {.column width="50%"}

::: {.solution .fragment}
$\frac{10!}{3! \times 3! \times 1! \times 2! \times 1!} = \frac{3,628,800}{6 \times 6 \times 1 \times 2 \times 1} = \frac{3,628,800}{72} = 50,400$
:::

:::
:::

---

## What Are Combinations? {#sec-combinations .smaller}

::: {.columns}
::: {.column width="50%"}

::: {.callout-note title="Combination"}
A selection of objects where **order does NOT matter**
:::

::: {.callout-example title="Visual Demo: Order Doesn't Matter"}
```
Committee Selection:
ABC, BAC, CAB ‚Üí Same committee!

Race Results:
ABC, BAC, CAB ‚Üí Different outcomes!

Key Point: Order doesn't matter for combinations
```
:::

::: {.callout-example title="Examples where order doesn't matter"}
- Choosing committee members
- Selecting pizza toppings
- Forming study groups
- Lottery number selection
:::
:::

::: {.column width="50%"}
::: {.callout-example title="Combination Animation: Selecting Objects"}
```{python}
#| echo: false
#| warning: false
import plotly.graph_objects as go
import itertools

# Create combination animation
items = ['A', 'B', 'C', 'D']
r = 2
combs = list(itertools.combinations(items, r))

fig = go.Figure()

# Show all combinations
for i, comb in enumerate(combs):
    # Create selection visualization
    selected = list(comb)
    not_selected = [item for item in items if item not in comb]
    
    fig.add_trace(go.Bar(
        x=['Selected', 'Not Selected'],
        y=[len(selected), len(not_selected)],
        text=[f"{', '.join(selected)}", f"{', '.join(not_selected)}"],
        textposition='inside',
        marker_color=['lightgreen', 'lightgray'],
        name=f'Combination {i+1}',
        hovertemplate='%{text}<extra></extra>',
        visible=(i==0)  # Only show first by default
    ))

fig.update_layout(
    title=f'Combinations of {len(items)} items taken {r} at a time',
    yaxis=dict(showticklabels=False, range=[0, 3]),
    xaxis=dict(showticklabels=True),
    height=300,
    width=500,
    showlegend=False
)

fig.show()

print(f"All combinations of {len(items)} items taken {r} at a time:")
for i, comb in enumerate(combs):
    print(f"{i+1}. {', '.join(comb)}")
```
:::
:::
:::

---

## Combinations Formula {#sec-combinations-formula}

::: {.callout-important title="Key Formula"}
$C(n,r)$ or $\binom{n}{r}$: Number of ways to choose $r$ objects from $n$ distinct objects (order doesn't matter)

$$C(n,r) = \binom{n}{r} = \frac{n!}{r!(n-r)!}$$
:::

::: {.callout-example title="Example"}
How many ways can we choose 3 people from a group of 8 for a committee?

$C(8,3) = \frac{8!}{3!(8-3)!} = \frac{8!}{3! \times 5!} = \frac{8 \times 7 \times 6}{3 \times 2 \times 1} = 56$
:::

---

## Relationship: Permutations vs Combinations

::: {.callout-tip title="Relationship"}
$P(n,r) = C(n,r) \times r!$

**Why?** For each combination of $r$ objects, there are $r!$ ways to arrange them
:::

::: {.callout-example title="Visual Demo: P vs C Relationship"}
```
Relationship: P(n,r) = C(n,r) √ó r!

Example: Choose 3 from 8 people
- C(8,3) = 56 combinations
- For each combination, arrange 3 people: 3! = 6 ways
- Total: 56 √ó 6 = 336 = P(8,3)

Combination ABC ‚Üí Permutations: ABC, ACB, BAC, BCA, CAB, CBA
```
:::

::: {.callout-example title="Example"}
$P(8,3) = C(8,3) \times 3! = 56 \times 6 = 336$ ‚úì
:::

---

## Key Decision: Permutation or Combination? {#sec-permutation-vs-combination}

::: {.columns}
::: {.column width="50%"}
::: {.callout-tip title="How to Decide"}
**Ask yourself**: Does order matter?

**Order matters** ‚Üí Use **Permutations**
- Arrangements, sequences, rankings

**Order doesn't matter** ‚Üí Use **Combinations**  
- Selections, groups, subsets
:::
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| warning: false

# Create comparison data
n_values = list(range(2, 11))
r_values = [2] * len(n_values)

permutations = [n * (n-1) for n in n_values]
combinations = [n * (n-1) // 2 for n in n_values]

fig = go.Figure()

# Add permutation line
fig.add_trace(go.Scatter(
    x=n_values,
    y=permutations,
    mode='lines+markers',
    name='P(n,2)',
    line=dict(color='red', width=3),
    hovertemplate='n=%{x}<br>P(n,2)=%{y}<extra></extra>'
))

# Add combination line
fig.add_trace(go.Scatter(
    x=n_values,
    y=combinations,
    mode='lines+markers',
    name='C(n,2)',
    line=dict(color='blue', width=3),
    hovertemplate='n=%{x}<br>C(n,2)=%{y}<extra></extra>'
))

fig.update_layout(
    title='P(n,2) vs C(n,2) Comparison',
    xaxis_title='n',
    yaxis_title='Count',
    height=400,
    showlegend=True
)

fig.update_xaxes(tickmode='linear', tick0=2, dtick=1)
fig.show()
```


:::
:::{.callout-tip}
‚úÖ **$P(n,r)$** = counts both selection & arrangement ‚Üí grows faster

‚úÖ **$C(n,r)$** = counts only selection ‚Üí grows slower

‚úÖ The difference comes from **$r!$**, which is big even for modest $r$.
:::
:::

---

## Practice Problem 3 {#practice-3 .smaller}

::: {.example}
From a class of 20 students:

a) How many ways to choose 5 students for a study group?
b) How many ways to choose a president, vice-president, and secretary?
:::

::: {.solution .fragment}
a) $C(20,5) = \frac{20!}{5! \times 15!} = 15,504$ (order doesn't matter)
b) $P(20,3) = \frac{20!}{17!} = 6,840$ (order matters)
:::

---

## Properties of Combinations

::: {.callout-tip title="Properties"}
1. **Symmetry**: $\binom{n}{r} = \binom{n}{n-r}$
2. **Pascal's Identity**: $\binom{n}{r} = \binom{n-1}{r-1} + \binom{n-1}{r}$
3. **Boundary conditions**: $\binom{n}{0} = \binom{n}{n} = 1$
:::

::: {.callout-example title="Example"}
$\binom{8}{3} = \binom{8}{5} = 56$ ‚úì
:::

---

## Pascal's Triangle {.smaller}

::: {.columns}

::: {.column width="40%"}
::: {.callout-example title="Pascal's Triangle"}
```
           1
         1   1
       1   2   1
     1   3   3   1
   1   4   6   4   1
 1   5  10  10   5   1
1   6  15  20  15   6   1
```

**Pattern**: Each number is the sum of the two numbers above it.

**Formula**: $\binom{n}{r} = \binom{n-1}{r-1} + \binom{n-1}{r}$

Each number is $\binom{n}{r}$ where $n$ is the row and $r$ is the position

**Example**: $\binom{4}{2} = 6$ (row 4, position 2)

```
Row 3:       1   3   3   1
            ‚Üô ‚Üò ‚Üô ‚Üò ‚Üô ‚Üò ‚Üô ‚Üò
Row 4:     1   4   6   4   1

```

:::
:::

::: {.column width="60%"}
::: {.callout-example title="Pascal's Triangle Animation"}
```{python}
#| echo: false
#| warning: false
import plotly.graph_objects as go

# Generate Pascal's triangle
def pascal_triangle(n):
    triangle = []
    for i in range(n):
        row = [1] * (i + 1)
        for j in range(1, i):
            row[j] = triangle[i-1][j-1] + triangle[i-1][j]
        triangle.append(row)
    return triangle

# Create triangle data
n_rows = 8
triangle = pascal_triangle(n_rows)

# Create heatmap
fig = go.Figure(data=go.Heatmap(
    z=triangle,
    colorscale='Blues',
    showscale=True,
    text=triangle,
    texttemplate="%{text}",
    textfont={"size": 12},
    hoverongaps=False
))

fig.update_layout(
    title='Pascal\'s Triangle (Combination Values)',
    xaxis_title='Position (r)',
    yaxis_title='Row (n)',
    height=400,
    width=500
)

fig.update_xaxes(showticklabels=False)
fig.update_yaxes(showticklabels=False)

fig.show()

print("Pascal's Triangle (showing C(n,r) values):")
for i, row in enumerate(triangle):
    print(f"Row {i}: {row}")
```
:::
:::


:::
---

## Binomial Theorem

::: {.callout-important title="Key Formula"}
$$(x + y)^n = \sum_{r=0}^{n} \binom{n}{r} x^{n-r} y^r$$
:::

::: {.callout-example title="Example"}
$(x + y)^3 = \binom{3}{0}x^3 + \binom{3}{1}x^2y + \binom{3}{2}xy^2 + \binom{3}{3}y^3$

$= x^3 + 3x^2y + 3xy^2 + y^3$
:::

---

## Counting and Probability {#sec-counting-probability .smaller}


::: {.columns}
::: {.column width="50%"}
::: {.example}
A committee of 4 people is chosen from 7 women and 5 men. What's the probability that exactly 2 are women?
:::

Total ways to choose 4 from 12: $\binom{12}{4} = 495$

Ways to choose 2 women from 7: $\binom{7}{2} = 21$

Ways to choose 2 men from 5: $\binom{5}{2} = 10$

::: {.solution .fragment}
Favorable outcomes: $\binom{7}{2} \times \binom{5}{2} = 21 \times 10 = 210$

Probability: $\frac{210}{495} = \frac{14}{33}$
:::
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| warning: false

# Create probability distribution
women_counts = [0, 1, 2, 3, 4]
probabilities = []

for w in women_counts:
    if w <= 7 and (4-w) <= 5:
        favorable = math.comb(7, w) * math.comb(5, 4-w)
        total = math.comb(12, 4)
        prob = favorable / total
        probabilities.append(prob)
    else:
        probabilities.append(0)

fig = go.Figure(data=go.Bar(
    x=women_counts,
    y=probabilities,
    marker_color=['lightcoral', 'lightblue', 'lightgreen', 'lightyellow', 'lightpink'],
    hovertemplate='Women: %{x}<br>Probability: %{y:.3f}<extra></extra>'
))

fig.update_layout(
    title='Probability Distribution: Women in Committee',
    xaxis_title='Number of Women',
    yaxis_title='Probability',
    height=400,
    showlegend=False
)

fig.update_xaxes(tickmode='linear', tick0=0, dtick=1)
fig.show()
```
:::
:::

---

## Practice Problem 4 {#practice-4 .smaller}

::: {.example}
A standard deck has 52 cards. What's the probability that a 5-card hand contains:

a) Exactly 3 aces?
b) At least 1 ace?
:::

::: {.solution .fragment}
a) Ways to get 3 aces from 4: $\binom{4}{3} = 4$
   Ways to get 2 non-aces from 48: $\binom{48}{2} = 1,128$
   Total 5-card hands: $\binom{52}{5} = 2,598,960$

   Probability: $\frac{4 \times 1,128}{2,598,960} = \frac{4,512}{2,598,960} \approx 0.00174$

b) Ways to choose 5 cards with no aces: $\binom{48}{5} = 1,712,304$

   $P(\text{at least 1 ace}) = 1 - \frac{\binom{48}{5}}{\binom{52}{5}} = 1 - \frac{1,712,304}{2,598,960} \approx 0.341$
:::

---

## Practice Problem 4 (continued){.smaller}

:::{.example}
b) At least 1 ace = 1 - (no aces)
:::

:::{.callout-tip}
Ways to choose 5 cards with no aces: $\binom{48}{5} = 1,712,304$
:::


::: {.solution .fragment}
$P(\text{at least 1 ace}) = 1 - \frac{\binom{48}{5}}{\binom{52}{5}} = 1 - \frac{1,712,304}{2,598,960} \approx 0.341$
:::

---



## Permutations with Restrictions {.smaller}

::: {.example}
How many 6-letter "words" can be formed from the letters A, B, C, D, E, F if:

- No letter is repeated
  
- A and B must be adjacent
:::

::: {.solution .fragment}
Treat AB as a single unit

- 5 units to arrange: (AB), C, D, E, F ‚Üí $5! = 120$ ways
  
- A and B can be arranged within their unit: $2! = 2$ ways
  
- Total: $5! \times 2! = 240$ ways
:::

---

## The Inclusion-Exclusion Principle {#sec-inclusion-exclusion .smaller}

::: {.columns}
::: {.column width="50%"}

::: {.formula-box}
For two sets $A$ and $B$:
$$|A \cup B| = |A| + |B| - |A \cap B|$$

For three sets $A$, $B$, and $C$:
$$|A \cup B \cup C| = |A| + |B| + |C| - |A \cap B| \\
- |A \cap C| - |B \cap C| + |A \cap B \cap C|$$
:::

:::

::: {.column width="50%"}

::: {.callout-example title="Visual Demo: Inclusion-Exclusion"}
```{python}
#| echo: false
#| warning: false
import plotly.graph_objects as go
import numpy as np

# Parameters for circles
r = 1
center_a = (-0.7, 0)
center_b = (0.7, 0)

theta = np.linspace(0, 2 * np.pi, 200)

# Circle A
x_a = center_a[0] + r * np.cos(theta)
y_a = center_a[1] + r * np.sin(theta)

# Circle B
x_b = center_b[0] + r * np.cos(theta)
y_b = center_b[1] + r * np.sin(theta)

fig = go.Figure()

# Add circles
fig.add_trace(go.Scatter(
    x=x_a, y=y_a, mode='lines',
    fill='toself', fillcolor='rgba(52, 152, 219, 0.3)',
    line=dict(color='rgba(52, 152, 219, 1)', width=3),
    name='A',
    showlegend=False
))
fig.add_trace(go.Scatter(
    x=x_b, y=y_b, mode='lines',
    fill='toself', fillcolor='rgba(231, 76, 60, 0.3)',
    line=dict(color='rgba(231, 76, 60, 1)', width=3),
    name='B',
    showlegend=False
))

# Add labels
fig.add_annotation(x=center_a[0]-0.5, y=0, text="A", showarrow=False, font=dict(size=24))
fig.add_annotation(x=center_b[0]+0.5, y=0, text="B", showarrow=False, font=dict(size=24))
fig.add_annotation(x=0, y=0, text="A‚à©B", showarrow=False, font=dict(size=20, color="#333"))

fig.update_layout(
    title="Venn Diagram: Inclusion-Exclusion Principle",
    xaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[-2, 2]),
    yaxis=dict(showticklabels=False, showgrid=False, zeroline=False, range=[-1.5, 1.5]),
    height=400,
    width=500,
    margin=dict(l=10, r=10, t=40, b=10)
)

fig.show()
```
:::

:::
:::

---

## Inclusion-Exclusion Example {.smaller}

::: {.example}
How many integers from 1 to 100 are divisible by 2, 3, or 5?
:::

Let:

- $A$ = divisible by 2: $|A| = 50$
  
- $B$ = divisible by 3: $|B| = 33$  
  
- $C$ = divisible by 5: $|C| = 20$

:::{.callout-note}
$|A \cap B| = 16$ (divisible by 6)

$|A \cap C| = 10$ (divisible by 10)

$|B \cap C| = 6$ (divisible by 15)

$|A \cap B \cap C| = 3$ (divisible by 30)
:::

---

## Inclusion-Exclusion Solution {.smaller}


::: {.solution .fragment}
$$|A \cup B \cup C| = 50 + 33 + 20 - 16 - 10 - 6 + 3 = 74$$

**Answer**: 74 integers from 1 to 100 are divisible by at least one of 2, 3, or 5
:::




---


## Multinomial Coefficients {.smaller}

::: {.callout-note title="Multinomial Coefficient"}
Number of ways to divide $n$ objects into groups of sizes $n_1, n_2, \ldots, n_k$:

$$\binom{n}{n_1, n_2, \ldots, n_k} = \frac{n!}{n_1! \times n_2! \times \cdots \times n_k!}$$
:::

::: {.example}
How many ways can 12 people be divided into 3 teams of 4?

$\binom{12}{4,4,4} = \frac{12!}{4! \times 4! \times 4!} = 34,650$
:::



## Problem-Solving Strategy {#sec-problem-solving-strategy}

::: {.callout-tip title="Strategy"}
1. **Read carefully**: What exactly are we counting?
2. **Identify the type**: Permutation, combination, or other?
3. **Check for restrictions**: Are there constraints?
4. **Does order matter?**: This determines permutation vs combination
5. **Break down complex problems**: Use multiplication principle
6. **Verify your answer**: Does it make sense?
:::

---

## Common Mistakes to Avoid

::: {.callout-tip title="Common Mistakes"}
1. **Confusing permutations and combinations**
   - Always ask: "Does order matter?"
2. **Forgetting about restrictions**
   - Read the problem carefully
3. **Double counting**
   - Make sure you're not counting the same arrangement twice
4. **Not considering the complement**
   - Sometimes "at least" problems are easier using complements
:::

---

## Practice Problem 6 {#practice-6 .smaller}

::: {.example}
A class has 15 students: 8 women and 7 men. How many ways can we:

a) Form a committee of 5 people with exactly 3 women?
b) Arrange 6 people in a row with alternating genders (starting with a woman)?
:::

::: {.solution .fragment}
a) $\binom{8}{3} \times \binom{7}{2} = 56 \times 21 = 1,176$
b) Choose 3 women from 8: $P(8,3) = 336$
   Choose 3 men from 7: $P(7,3) = 210$
   Total: $336 \times 210 = 70,560$
:::

---

## Counting in Computer Science {.smaller}

::: {.callout-example title="Applications"}
**Password Security**: 

- 8-character password with letters, digits, symbols
  
- $(26 + 26 + 10 + 32)^8 = 94^8 \approx 6.1 \times 10^{15}$

**Hash Functions**: 

- Distributing data into buckets
  
- Collision probability calculations

**Algorithm Analysis**:

- Counting operations, comparisons
  
- Big O notation foundations
:::

---

## Counting in Genetics {.smaller}

::: {.callout-example title="Applications"}
**DNA Sequences**: 

- 4 bases (A, T, G, C)
  
- Gene of length $n$: $4^n$ possible sequences

**Protein Folding**:

- Number of possible conformations
  
- Combinatorial explosion

**Population Genetics**:

- Hardy-Weinberg calculations
  
- Allele combinations
:::

---

## Real-World Applications {.smaller}

::: {.callout-example title="Applications"}
**Lottery**: 

- Powerball: Choose 5 from 69, then 1 from 26
  
- Odds: $\frac{1}{\binom{69}{5} \times 26} \approx \frac{1}{292,000,000}$

**Cryptography**:

- Key space size determines security
  
- RSA encryption relies on large number factorization

**Sports Tournaments**:

- March Madness bracket: $2^{63}$ possible outcomes
  
- Round-robin tournaments: $\binom{n}{2}$ games
:::

---

## Key Formulas Summary

::: {.columns}
::: {.column width="40%"}
::: {.callout-important title="Summary of Key Formulas"}
- **Permutations**: $P(n,r) = \frac{n!}{(n-r)!}$
- **Combinations**: $C(n,r) = \binom{n}{r} = \frac{n!}{r!(n-r)!}$
- **With repetition**: $\frac{n!}{n_1! \times n_2! \times \cdots \times n_k!}$
- **Inclusion-Exclusion**: $|A \cup B| = |A| + |B| - |A \cap B|$
:::
:::

::: {.column width="60%"}
```{python}
#| echo: false
#| warning: false

# Create comparison of different counting methods
n_values = list(range(2, 8))
r_values = [2] * len(n_values)

permutations = [n * (n-1) for n in n_values]
combinations = [n * (n-1) // 2 for n in n_values]
factorials = [math.factorial(n) for n in n_values]

fig = go.Figure()

# Add different counting methods
fig.add_trace(go.Scatter(
    x=n_values,
    y=permutations,
    mode='lines+markers',
    name='P(n,2)',
    line=dict(color='red', width=3),
    hovertemplate='n=%{x}<br>P(n,2)=%{y}<extra></extra>'
))

fig.add_trace(go.Scatter(
    x=n_values,
    y=combinations,
    mode='lines+markers',
    name='C(n,2)',
    line=dict(color='blue', width=3),
    hovertemplate='n=%{x}<br>C(n,2)=%{y}<extra></extra>'
))

fig.add_trace(go.Scatter(
    x=n_values,
    y=factorials,
    mode='lines+markers',
    name='n!',
    line=dict(color='green', width=3),
    hovertemplate='n=%{x}<br>n!=%{y}<extra></extra>'
))

fig.update_layout(
    title='Comparison of Counting Methods',
    xaxis_title='n',
    yaxis_title='Count (log scale)',
    height=400,
    showlegend=True
)

fig.update_xaxes(tickmode='linear', tick0=2, dtick=1)
fig.update_yaxes(type='log')

fig.show()
```
:::
:::

---

## Technology and Counting {.smaller}

::: {.callout-tip title="Tools"}
**Calculators**: 

- Use nPr and nCr functions
  
- Be careful with large numbers

**Software**:

- R: `factorial()`, `choose()`, `combn()`
  
- Python: `math.factorial()`, `math.comb()`
  
- Excel: `FACT()`, `COMBIN()`, `PERMUT()`

**Online Tools**:

- Wolfram Alpha for complex calculations
  
- Combination/permutation calculators
:::

---

## Practice Problem 7 {#practice-7 .smaller}

::: {.example}
A standard deck of cards is shuffled. What's the probability that:

a) The top 4 cards are all hearts?
b) In a 13-card hand, you get exactly one card from each rank?
:::

::: {.solution .fragment}
a) $\frac{13}{52} \times \frac{12}{51} \times \frac{11}{50} \times \frac{10}{49} = \frac{13 \times 12 \times 11 \times 10}{52 \times 51 \times 50 \times 49} \approx 0.0026$

b) Choose 1 card from each of 13 ranks: $4^{13}$
   Total 13-card hands: $\binom{52}{13}$
   Probability: $\frac{4^{13}}{\binom{52}{13}} \approx 6.3 \times 10^{-6}$
:::

---

## Extending to Probability

::: {.callout-tip title="Distributions"}
**Hypergeometric Distribution**:

- Drawing without replacement
  
- Uses combinations: $P(X = k) = \frac{\binom{K}{k}\binom{N-K}{n-k}}{\binom{N}{n}}$

**Binomial Distribution**:

- Drawing with replacement  
  
- Uses combinations: $P(X = k) = \binom{n}{k}p^k(1-p)^{n-k}$

*We'll explore these distributions in detail in future lectures*
:::

---

## Historical Note

::: {.callout-tip title="History"}
**Blaise Pascal** (1623-1662) and **Pierre de Fermat** (1601-1665):
- Founded probability theory through gambling problems
- Pascal's triangle and combinations

**Leonhard Euler** (1707-1783):
- Advanced combinatorics
- Graph theory connections

Modern applications span computer science, biology, physics, and economics
:::

---

## Common Student Questions

::: {.callout-question title="FAQ"}
**Q**: "When do I use permutations vs combinations?"

**A**: Ask "Does order matter?" Order matters ‚Üí permutation

**Q**: "How do I handle restrictions?"

**A**: Break the problem into cases or use complementary counting

**Q**: "What if objects are identical?"

**A**: Use the formula for permutations with repetition

**Q**: "How do I check my answer?"

**A**: Verify with small examples or use different methods
:::

---

## Looking Ahead

::: {.callout-tip title="Next Lecture"}
**Next lecture**: Discrete Probability Distributions
- Binomial distribution (using combinations!)
  
- Hypergeometric distribution  
  
- Geometric distribution
  
- Expected value and variance

**Connection**: Today's counting techniques are essential for probability calculations
:::

---

## Study Tips

::: {.callout-tip title="Tips"}
1. **Practice, practice, practice**: Work through many examples
2. **Identify patterns**: Learn to recognize problem types
3. **Start simple**: Build up to complex problems
4. **Check your work**: Use different approaches when possible
5. **Understand concepts**: Don't just memorize formulas
:::

---

## Learning Objectives Summary {#learning-summary}

::: {.callout-tip title="What We've Covered"}
In this lecture, we've addressed all the learning objectives:

- ‚úÖ **Apply the fundamental counting principles**: Covered in [@sec-fundamental-counting]
- ‚úÖ **Calculate permutations with and without repetition**: Covered in [@sec-permutations], [@sec-permutations-r-from-n], and [@sec-permutations-repetition]  
- ‚úÖ **Calculate combinations and understand when to use them**: Covered in [@sec-combinations] and [@sec-combinations-formula]
- ‚úÖ **Distinguish between permutations and combinations**: Covered in [@sec-permutation-vs-combination]
- ‚úÖ **Use counting techniques to solve probability problems**: Covered in [@sec-counting-probability]
- ‚úÖ **Apply the inclusion-exclusion principle**: Covered in [@sec-inclusion-exclusion]
- ‚úÖ **Solve complex counting problems systematically**: Covered in [@sec-problem-solving-strategy]
:::

---

## Final Thoughts

Counting is fundamental to:

- Probability calculations
  
- Statistical inference  
  
- Computer algorithms
  
- Scientific modeling

::: {.callout-important title="Know the Basics"}
Permutations and combinations are the building blocks for advanced statistical concepts
:::

---

## Questions? {.center}

# Questions? {.center}

**Office Hours**: Thursday's 11 AM On Zoom (Link on Canvas)

**Email**: nmathlouthi@ucsb.edu

**Next Class**: Discrete Probability Distributions

