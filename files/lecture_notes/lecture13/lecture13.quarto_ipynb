{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Hypothesis Testing: Making Decisions with Data\"\n",
        "subtitle: \"From Questions to Statistical Evidence\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "date: today\n",
        "format: \n",
        "  revealjs:\n",
        "    logo: /img/logo.png\n",
        "    theme: default\n",
        "    css: /files/lecture_notes/lecture10/new-style.css\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    preview-links: auto\n",
        "    footer: \"Understanding Data ‚Äì Hypothesis Testing Lecture ¬© 2025\"\n",
        "    incremental: false\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "    smaller: true\n",
        "jupyter: pstat5a\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "  message: false\n",
        "---"
      ],
      "id": "4a28c2dd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "from plotly.subplots import make_subplots\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import norm, t\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Enhanced color palette\n",
        "colors = {\n",
        "    'primary': '#3b82f6',\n",
        "    'secondary': '#f59e0b', \n",
        "    'success': '#10b981',\n",
        "    'danger': '#ef4444',\n",
        "    'info': '#8b5cf6',\n",
        "    'warning': '#f97316',\n",
        "    'light': '#f8fafc',\n",
        "    'dark': '#1f2937',\n",
        "    'accent': '#06b6d4'\n",
        "}\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)"
      ],
      "id": "e539c0e5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Welcome to Hypothesis Testing {.center}\n",
        "\n",
        "**Making Decisions with Data: From Questions to Statistical Evidence**\n",
        "\n",
        "*\"The goal is not to eliminate uncertainty, but to make informed decisions despite it\"*\n",
        "\n",
        "---\n",
        "\n",
        "## üì¢ Quick Announcements\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "### üìù Quiz 2 Reminder\n",
        "**When:**  \n",
        "- üìÖ **Date:** Friday, July 25  \n",
        "- ‚è∞ **Window:** 7 AM ‚Äì 12 AM  \n",
        "- ‚è≥ **Duration:** 1 hour once started\n",
        "\n",
        "**Where:** üíª Online via Canvas\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "### üìö Today's Focus\n",
        "- **Foundation:** Logic of hypothesis testing\n",
        "- **Practice:** Real examples with Python\n",
        "- **Skills:** Making statistical decisions\n",
        "- **Applications:** From medicine to marketing\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## Learning Journey Today üéØ\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### üß† Conceptual Goals\n",
        "- **Understand the logic** of hypothesis testing\n",
        "- **Master the language** of statistical decisions\n",
        "- **Recognize different types** of errors and their consequences\n",
        "- **Connect to confidence intervals** from last lecture\n",
        ":::\n",
        "\n",
        "::: {.column}\n",
        "### üõ†Ô∏è Practical Skills\n",
        "- **Formulate hypotheses** from research questions\n",
        "- **Calculate and interpret** p-values correctly\n",
        "- **Perform hypothesis tests** in Python\n",
        "- **Make informed decisions** using statistical evidence\n",
        "- **Communicate results** effectively\n",
        ":::\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "## What is Hypothesis Testing? ü§î"
      ],
      "id": "0f8bcdb5"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "# Create an engaging introduction visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"The Question: Does Treatment Work?\", \"The Data: Patient Outcomes\",\n",
        "                   \"The Analysis: Statistical Testing\", \"The Decision: Evidence-Based Choice\"),\n",
        "    specs=[[{\"type\": \"bar\"}, {\"type\": \"box\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Scenario: Testing a new medical treatment\n",
        "# Before/After comparison\n",
        "treatments = ['Current Treatment', 'New Treatment']\n",
        "success_rates = [65, 78]\n",
        "colors_bar = [colors['danger'], colors['success']]\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=treatments,\n",
        "    y=success_rates,\n",
        "    marker_color=colors_bar,\n",
        "    text=[f'{rate}%' for rate in success_rates],\n",
        "    textposition='auto',\n",
        "    name='Success Rate'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Sample data visualization\n",
        "np.random.seed(42)\n",
        "current_data = np.random.normal(65, 12, 100)\n",
        "new_data = np.random.normal(78, 15, 100)\n",
        "\n",
        "fig.add_trace(go.Box(\n",
        "    y=current_data,\n",
        "    name='Current',\n",
        "    marker_color=colors['danger'],\n",
        "    boxpoints='outliers'\n",
        "), row=1, col=2)\n",
        "\n",
        "fig.add_trace(go.Box(\n",
        "    y=new_data,\n",
        "    name='New',\n",
        "    marker_color=colors['success'],\n",
        "    boxpoints='outliers'\n",
        "), row=1, col=2)\n",
        "\n",
        "# Statistical analysis visualization (sampling distribution)\n",
        "x_vals = np.linspace(-4, 4, 1000)\n",
        "y_vals = stats.norm.pdf(x_vals, 0, 1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_vals, y=y_vals,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Null Distribution'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Add critical region\n",
        "critical_x = x_vals[x_vals >= 1.96]\n",
        "critical_y = y_vals[x_vals >= 1.96]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([critical_x, [critical_x[-1], 1.96]]),\n",
        "    y=np.concatenate([critical_y, [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Rejection Region'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Add observed test statistic\n",
        "obs_stat = 2.5\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[obs_stat, obs_stat],\n",
        "    y=[0, max(y_vals)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['warning'], width=3, dash='solid'),\n",
        "    name=f'Observed = {obs_stat}',\n",
        "    showlegend=False\n",
        "), row=2, col=1)\n",
        "\n",
        "# Decision table\n",
        "decision_data = [\n",
        "    [\"Component\", \"Our Example\"],\n",
        "    [\"Research Question\", \"Does new treatment work better?\"],\n",
        "    [\"Null Hypothesis (H‚ÇÄ)\", \"No difference (Œº‚ÇÅ = Œº‚ÇÇ)\"],\n",
        "    [\"Alternative (H‚ÇÅ)\", \"New treatment is better (Œº‚ÇÅ < Œº‚ÇÇ)\"],\n",
        "    [\"Test Statistic\", \"t = 2.5\"],\n",
        "    [\"P-value\", \"p = 0.006\"],\n",
        "    [\"Decision\", \"Reject H‚ÇÄ - Evidence supports new treatment\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Component\", \"Our Example\"],\n",
        "        fill_color=colors['info'],\n",
        "        font=dict(size=12, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*decision_data[1:])),\n",
        "        fill_color=[['#f8fafc']*6, ['#e0e7ff']*6],\n",
        "        font=dict(size=11),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=600,\n",
        "    showlegend=False\n",
        "    # title_text=\"Hypothesis Testing: The Complete Picture\"\n",
        ")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Treatment Type\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Success Rate (%)\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Outcome Score\", row=1, col=2)\n",
        "fig.update_xaxes(title_text=\"Test Statistic\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability Density\", row=2, col=1)\n",
        "\n",
        "fig.show()"
      ],
      "id": "7ed716fe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Hypothesis testing helps us answer:** *\"Is what we observed in our sample strong enough evidence to conclude something about the population?\"*\n",
        "\n",
        "---\n",
        "\n",
        "## The Courtroom Analogy ‚öñÔ∏è"
      ],
      "id": "b853b292"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 6
      },
      "source": [
        "# Create courtroom analogy visualization\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Criminal Justice System\", \"Statistical Hypothesis Testing\"),\n",
        "    specs=[[{\"type\": \"table\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Courtroom data\n",
        "courtroom_data = [\n",
        "    [\"Aspect\", \"Criminal Court\"],\n",
        "    [\"Starting Position\", \"Defendant is INNOCENT\"],\n",
        "    [\"Burden of Proof\", \"Prosecution must prove GUILT\"],\n",
        "    [\"Evidence Standard\", \"Beyond reasonable doubt\"],\n",
        "    [\"Decision Options\", \"GUILTY or NOT GUILTY\"],\n",
        "    [\"Type I Error\", \"Convict innocent person\"],\n",
        "    [\"Type II Error\", \"Acquit guilty person\"],\n",
        "    [\"Consequences\", \"Balance justice vs. protecting innocent\"]\n",
        "]\n",
        "\n",
        "# Statistics data\n",
        "stats_data = [\n",
        "    [\"Aspect\", \"Hypothesis Testing\"],\n",
        "    [\"Starting Position\", \"NULL hypothesis is TRUE\"],\n",
        "    [\"Burden of Proof\", \"Data must prove ALTERNATIVE\"],\n",
        "    [\"Evidence Standard\", \"p < Œ± (usually 0.05)\"],\n",
        "    [\"Decision Options\", \"REJECT H‚ÇÄ or FAIL TO REJECT H‚ÇÄ\"],\n",
        "    [\"Type I Error\", \"Reject true null hypothesis\"],\n",
        "    [\"Type II Error\", \"Fail to reject false null\"],\n",
        "    [\"Consequences\", \"Balance discovery vs. false claims\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Aspect\", \"Criminal Court\"],\n",
        "        fill_color=colors['danger'],\n",
        "        font=dict(size=12, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*courtroom_data[1:])),\n",
        "        fill_color=[['#fef2f2']*7, ['#fee2e2']*7],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=30\n",
        "    )\n",
        "), row=1, col=1)\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Aspect\", \"Hypothesis Testing\"],\n",
        "        fill_color=colors['primary'],\n",
        "        font=dict(size=12, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*stats_data[1:])),\n",
        "        fill_color=[['#f8fafc']*7, ['#dbeafe']*7],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=30\n",
        "    )\n",
        "), row=1, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=400,\n",
        "    showlegend=False\n",
        "    # title_text=\"Understanding Hypothesis Testing Through Analogy\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "16cf2c0c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Key Insight:** Just like in court, we never \"prove\" innocence or \"accept\" the null hypothesis. We only determine if there's sufficient evidence to reject it!\n",
        "\n",
        "---\n",
        "\n",
        "## The Six Steps of Hypothesis Testing üìã"
      ],
      "id": "69507c39"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "# Create a comprehensive six-steps visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=3,\n",
        "    subplot_titles=(\"1. State Hypotheses\", \"2. Choose Œ± Level\", \"3. Check Assumptions\",\n",
        "                   \"4. Calculate Test Statistic\", \"5. Find P-value\", \"6. Make Decision\"),\n",
        "    specs=[[{\"type\": \"table\"}, {\"type\": \"bar\"}, {\"type\": \"scatter\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"scatter\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Step 1: Hypotheses examples\n",
        "hyp_data = [\n",
        "    [\"Research Question\", \"Hypotheses\"],\n",
        "    [\"Does drug reduce blood pressure?\", \"H‚ÇÄ: Œº = Œº‚ÇÄ vs H‚ÇÅ: Œº < Œº‚ÇÄ\"],\n",
        "    [\"Are two groups different?\", \"H‚ÇÄ: Œº‚ÇÅ = Œº‚ÇÇ vs H‚ÇÅ: Œº‚ÇÅ ‚â† Œº‚ÇÇ\"],\n",
        "    [\"Is proportion greater than 50%?\", \"H‚ÇÄ: p ‚â§ 0.5 vs H‚ÇÅ: p > 0.5\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Research Question\", \"Hypotheses\"],\n",
        "        fill_color=colors['success'],\n",
        "        font=dict(size=10, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*hyp_data[1:])),\n",
        "        fill_color=[['#f0fdf4']*3, ['#dcfce7']*3],\n",
        "        font=dict(size=9),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=1, col=1)\n",
        "\n",
        "# Step 2: Alpha levels\n",
        "alpha_levels = [0.01, 0.05, 0.10]\n",
        "alpha_labels = ['Very Conservative\\n(Œ± = 0.01)', 'Standard\\n(Œ± = 0.05)', 'Liberal\\n(Œ± = 0.10)']\n",
        "alpha_colors = [colors['info'], colors['primary'], colors['warning']]\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=alpha_labels,\n",
        "    y=alpha_levels,\n",
        "    marker_color=alpha_colors,\n",
        "    text=[f'{a:.2f}' for a in alpha_levels],\n",
        "    textposition='auto',\n",
        "    name='Alpha Levels'\n",
        "), row=1, col=2)\n",
        "\n",
        "# Step 3: Assumption checking (normality example)\n",
        "np.random.seed(42)\n",
        "normal_data = np.random.normal(0, 1, 100)\n",
        "skewed_data = np.random.exponential(1, 100) - 1\n",
        "\n",
        "fig.add_trace(go.Histogram(\n",
        "    x=normal_data,\n",
        "    name=\"Normal Data ‚úì\",\n",
        "    marker_color=colors['success'],\n",
        "    opacity=0.7,\n",
        "    nbinsx=20\n",
        "), row=1, col=3)\n",
        "\n",
        "fig.add_trace(go.Histogram(\n",
        "    x=skewed_data,\n",
        "    name=\"Skewed Data ‚ö†\",\n",
        "    marker_color=colors['warning'],\n",
        "    opacity=0.7,\n",
        "    nbinsx=20\n",
        "), row=1, col=3)\n",
        "\n",
        "# Step 4: Test statistic calculation\n",
        "x_test = np.linspace(-4, 4, 1000)\n",
        "y_test = stats.norm.pdf(x_test, 0, 1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_test, y=y_test,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Standard Normal'\n",
        "), row=2, col=1)\n",
        "\n",
        "test_stat = 2.1\n",
        "# Add vertical line manually\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[test_stat, test_stat],\n",
        "    y=[0, stats.norm.pdf(test_stat, 0, 1)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f'Test Statistic = {test_stat}',\n",
        "    showlegend=False\n",
        "), row=2, col=1)\n",
        "\n",
        "# Step 5: P-value visualization\n",
        "p_val_x = x_test[x_test >= test_stat]\n",
        "p_val_y = y_test[x_test >= test_stat]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([p_val_x, [p_val_x[-1], test_stat]]),\n",
        "    y=np.concatenate([p_val_y, [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='P-value Area'\n",
        "), row=2, col=2)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_test, y=y_test,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Distribution'\n",
        "), row=2, col=2)\n",
        "\n",
        "p_value = 1 - stats.norm.cdf(test_stat)\n",
        "# Add vertical line manually\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[test_stat, test_stat],\n",
        "    y=[0, stats.norm.pdf(test_stat, 0, 1)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f'p = {p_value:.3f}',\n",
        "    showlegend=False\n",
        "), row=2, col=2)\n",
        "\n",
        "# Step 6: Decision table\n",
        "decision_data = [\n",
        "    [\"Condition\", \"Decision\", \"Conclusion\"],\n",
        "    [\"p ‚â§ Œ±\", \"Reject H‚ÇÄ\", \"Statistically significant\"],\n",
        "    [\"p > Œ±\", \"Fail to reject H‚ÇÄ\", \"Not statistically significant\"],\n",
        "    [\"\", \"Never 'accept H‚ÇÄ'\", \"Absence of evidence ‚â† evidence of absence\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Condition\", \"Decision\", \"Conclusion\"],\n",
        "        fill_color=colors['info'],\n",
        "        font=dict(size=10, color='white'),\n",
        "        align=\"center\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*decision_data[1:])),\n",
        "        fill_color=[['#faf5ff']*3, ['#e9d5ff']*3, ['#ddd6fe']*3],\n",
        "        font=dict(size=9),\n",
        "        align=\"center\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=3)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=600,\n",
        "    showlegend=False\n",
        "    #title_text=\"The Six Steps of Hypothesis Testing\"\n",
        ")\n",
        "\n",
        "# Update specific axes\n",
        "fig.update_yaxes(title_text=\"Œ± Level\", row=1, col=2)\n",
        "fig.update_xaxes(title_text=\"Data Value\", row=1, col=3)\n",
        "fig.update_yaxes(title_text=\"Frequency\", row=1, col=3)\n",
        "fig.update_xaxes(title_text=\"z-score\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Density\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"z-score\", row=2, col=2)\n",
        "fig.update_yaxes(title_text=\"Density\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "0cbfa2d9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Types of Alternative Hypotheses üéØ"
      ],
      "id": "92f4caa6"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "# Create comprehensive visualization of test types\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=3,\n",
        "    subplot_titles=(\"Two-tailed Test (‚â†)\", \"Left-tailed Test (<)\", \"Right-tailed Test (>)\",\n",
        "                   \"When to Use Each\", \"Critical Values\", \"Real Examples\"),\n",
        "    specs=[[{\"type\": \"scatter\"}, {\"type\": \"scatter\"}, {\"type\": \"scatter\"}],\n",
        "           [{\"type\": \"table\"}, {\"type\": \"bar\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Standard normal distribution\n",
        "x = np.linspace(-4, 4, 1000)\n",
        "y = stats.norm.pdf(x, 0, 1)\n",
        "\n",
        "# Two-tailed test\n",
        "alpha = 0.05\n",
        "z_crit_two = stats.norm.ppf(1 - alpha/2)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x, y=y,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Standard Normal'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Shade both tails\n",
        "left_tail = x[x <= -z_crit_two]\n",
        "right_tail = x[x >= z_crit_two]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([left_tail, [-z_crit_two, left_tail[0]]]),\n",
        "    y=np.concatenate([y[x <= -z_crit_two], [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Rejection Region'\n",
        "), row=1, col=1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([right_tail, [right_tail[-1], z_crit_two]]),\n",
        "    y=np.concatenate([y[x >= z_crit_two], [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Rejection Region'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Left-tailed test\n",
        "z_crit_left = stats.norm.ppf(alpha)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x, y=y,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Standard Normal'\n",
        "), row=1, col=2)\n",
        "\n",
        "left_only = x[x <= z_crit_left]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([left_only, [z_crit_left, left_only[0]]]),\n",
        "    y=np.concatenate([y[x <= z_crit_left], [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Rejection Region'\n",
        "), row=1, col=2)\n",
        "\n",
        "# Right-tailed test\n",
        "z_crit_right = stats.norm.ppf(1 - alpha)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x, y=y,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Standard Normal'\n",
        "), row=1, col=3)\n",
        "\n",
        "right_only = x[x >= z_crit_right]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([right_only, [right_only[-1], z_crit_right]]),\n",
        "    y=np.concatenate([y[x >= z_crit_right], [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Rejection Region'\n",
        "), row=1, col=3)\n",
        "\n",
        "# When to use each\n",
        "usage_data = [\n",
        "    [\"Test Type\", \"When to Use\", \"Example Question\"],\n",
        "    [\"Two-tailed\", \"Testing for any difference\", \"Is the mean different from 100?\"],\n",
        "    [\"Left-tailed\", \"Testing for decrease\", \"Did response time decrease?\"],\n",
        "    [\"Right-tailed\", \"Testing for increase\", \"Did test scores improve?\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Test Type\", \"When to Use\", \"Example Question\"],\n",
        "        fill_color=colors['success'],\n",
        "        font=dict(size=10, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*usage_data[1:])),\n",
        "        fill_color=[['#f0fdf4']*3, ['#dcfce7']*3, ['#bbf7d0']*3],\n",
        "        font=dict(size=9),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=1)\n",
        "\n",
        "# Critical values comparison\n",
        "test_types = ['Two-tailed', 'One-tailed']\n",
        "critical_vals = [z_crit_two, z_crit_right]\n",
        "test_colors = [colors['info'], colors['warning']]\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=test_types,\n",
        "    y=critical_vals,\n",
        "    marker_color=test_colors,\n",
        "    text=[f'{val:.3f}' for val in critical_vals],\n",
        "    textposition='auto',\n",
        "    name='Critical Values (Œ±=0.05)'\n",
        "), row=2, col=2)\n",
        "\n",
        "# Real examples\n",
        "examples_data = [\n",
        "    [\"Field\", \"Example\"],\n",
        "    [\"Medicine\", \"Drug A vs Drug B effectiveness\"],\n",
        "    [\"Psychology\", \"Therapy reduces anxiety scores\"],\n",
        "    [\"Marketing\", \"New ad increases click rates\"],\n",
        "    [\"Quality Control\", \"Process meets specifications\"],\n",
        "    [\"Education\", \"Method improves test scores\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Field\", \"Example Application\"],\n",
        "        fill_color=colors['warning'],\n",
        "        font=dict(size=10, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*examples_data[1:])),\n",
        "        fill_color=[['#fffbeb']*5, ['#fef3c7']*5],\n",
        "        font=dict(size=9),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=3)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=600,\n",
        "    showlegend=False\n",
        "    #title_text=\"Types of Hypothesis Tests and When to Use Them\"\n",
        ")\n",
        "\n",
        "# Update axes for the distribution plots\n",
        "for col in [1, 2, 3]:\n",
        "    fig.update_xaxes(title_text=\"Test Statistic\", row=1, col=col)\n",
        "    fig.update_yaxes(title_text=\"Probability Density\", row=1, col=col)\n",
        "\n",
        "fig.update_yaxes(title_text=\"Critical Value\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "e6be5133",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Understanding P-values üìä\n",
        "\n",
        "\n",
        "\n",
        "**Key Message:** P-value tells us \"How surprised should we be by this data if H‚ÇÄ were true?\"\n",
        "\n",
        "---\n",
        "\n",
        "## Types of Errors: The Trade-off üé≤"
      ],
      "id": "fb69f986"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 10
      },
      "source": [
        "# Create comprehensive error analysis\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"Error Types Matrix\", \"Real-World Error Consequences\",\n",
        "                   \"The Œ±-Œ≤ Trade-off\", \"Error Rates by Field\"),\n",
        "    specs=[[{\"type\": \"table\"}, {\"type\": \"table\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"bar\"}]]\n",
        ")\n",
        "\n",
        "# Error types matrix\n",
        "error_matrix = [\n",
        "    [\"\", \"H‚ÇÄ is Actually True\", \"H‚ÇÄ is Actually False\"],\n",
        "    [\"Reject H‚ÇÄ\", \"TYPE I ERROR\\n‚ùå False Positive\\n(Probability = Œ±)\", \"CORRECT DECISION\\n‚úÖ True Positive\\n(Probability = 1-Œ≤ = Power)\"],\n",
        "    [\"Fail to Reject H‚ÇÄ\", \"CORRECT DECISION\\n‚úÖ True Negative\\n(Probability = 1-Œ±)\", \"TYPE II ERROR\\n‚ùå False Negative\\n(Probability = Œ≤)\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Decision ‚Üì \\\\ Reality ‚Üí\", \"H‚ÇÄ is Actually True\", \"H‚ÇÄ is Actually False\"],\n",
        "        fill_color=colors['primary'],\n",
        "        font=dict(size=12, color='white'),\n",
        "        align=\"center\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=[\n",
        "            [\"Reject H‚ÇÄ\", \"Fail to Reject H‚ÇÄ\"],\n",
        "            [\"TYPE I ERROR\\n‚ùå False Positive\\n(Probability = Œ±)\", \"CORRECT DECISION\\n‚úÖ True Negative\\n(Probability = 1-Œ±)\"],\n",
        "            [\"CORRECT DECISION\\n‚úÖ True Positive\\n(Probability = Power)\", \"TYPE II ERROR\\n‚ùå False Negative\\n(Probability = Œ≤)\"]\n",
        "        ],\n",
        "        fill_color=[\n",
        "            ['#f8fafc', '#f8fafc'],\n",
        "            ['#fef2f2', '#f0fdf4'],\n",
        "            ['#f0fdf4', '#fef2f2']\n",
        "        ],\n",
        "        font=dict(size=11),\n",
        "        align=\"center\",\n",
        "        height=40\n",
        "    )\n",
        "), row=1, col=1)\n",
        "\n",
        "# Real-world consequences\n",
        "consequences_data = [\n",
        "    [\"Context\", \"Type I Error (False Positive)\", \"Type II Error (False Negative)\"],\n",
        "    [\"Medical Testing\", \"Healthy person diagnosed sick\\n‚Üí Unnecessary treatment\", \"Sick person not diagnosed\\n‚Üí Disease progresses\"],\n",
        "    [\"Drug Approval\", \"Ineffective drug approved\\n‚Üí Wasted resources, no benefit\", \"Effective drug rejected\\n‚Üí Patients don't get help\"],\n",
        "    [\"Criminal Justice\", \"Innocent person convicted\\n‚Üí Injustice, wrong person jailed\", \"Guilty person acquitted\\n‚Üí Criminal remains free\"],\n",
        "    [\"Quality Control\", \"Good product rejected\\n‚Üí Waste, customer dissatisfaction\", \"Defective product accepted\\n‚Üí Safety issues, recalls\"],\n",
        "    [\"Fire Alarm\", \"False alarm\\n‚Üí Evacuation, disruption\", \"Miss real fire\\n‚Üí Property damage, injuries\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Context\", \"Type I Error (False Positive)\", \"Type II Error (False Negative)\"],\n",
        "        fill_color=[colors['info'], colors['danger'], colors['warning']],\n",
        "        font=dict(size=10, color='white'),\n",
        "        align=\"center\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*consequences_data[1:])),\n",
        "        fill_color=[['#faf5ff']*5, ['#fef2f2']*5, ['#fffbeb']*5],\n",
        "        font=dict(size=9),\n",
        "        align=\"left\",\n",
        "        height=30\n",
        "    )\n",
        "), row=1, col=2)\n",
        "\n",
        "# Alpha-Beta Trade-off\n",
        "alpha_range = np.linspace(0.01, 0.20, 50)\n",
        "# Simulate beta for different alpha (inverse relationship)\n",
        "beta_range = 0.30 - 0.15 * (alpha_range - 0.01) / 0.19\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=alpha_range, y=beta_range,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color=colors['danger'], width=3),\n",
        "    marker=dict(size=6),\n",
        "    name='Œ≤ (Type II Error Rate)'\n",
        "), row=2, col=1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=alpha_range, y=alpha_range,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    marker=dict(size=6),\n",
        "    name='Œ± (Type I Error Rate)'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Add annotation\n",
        "fig.add_annotation(\n",
        "    x=0.1, y=0.2,\n",
        "    text=\"As Œ± increases,<br>Œ≤ decreases<br>(Trade-off!)\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowcolor=colors['info'],\n",
        "    font=dict(size=12),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Typical error rates by field\n",
        "fields = ['Psychology', 'Medicine', 'Physics', 'Economics', 'Engineering']\n",
        "alpha_typical = [0.05, 0.01, 0.001, 0.05, 0.01]\n",
        "field_colors = [colors['primary'], colors['danger'], colors['success'], colors['warning'], colors['info']]\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    x=fields,\n",
        "    y=alpha_typical,\n",
        "    marker_color=field_colors,\n",
        "    text=[f'Œ± = {a}' for a in alpha_typical],\n",
        "    textposition='auto',\n",
        "    name='Typical Œ± Levels'\n",
        "), row=2, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=800,\n",
        "    showlegend=True\n",
        "    #title_text=\"Understanding Statistical Errors and Their Consequences\"\n",
        ")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Œ± (Type I Error Rate)\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Error Probability\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"Field\", row=2, col=2)\n",
        "fig.update_yaxes(title_text=\"Typical Œ± Level\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "465d4128",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Bottom Line:** There's always a trade-off between Type I and Type II errors. Choose Œ± based on which error is more costly in your context!\n",
        "\n",
        "---\n",
        "\n",
        "## Statistical Power: Detecting True Effects üí™"
      ],
      "id": "b1dcd634"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 10
      },
      "source": [
        "# Create comprehensive power analysis\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"What is Statistical Power?\", \"Factors Affecting Power\",\n",
        "                   \"Power vs Sample Size\", \"Power vs Effect Size\"),\n",
        "    specs=[[{\"type\": \"scatter\"}, {\"type\": \"table\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"scatter\"}]]\n",
        ")\n",
        "\n",
        "# Power visualization\n",
        "x_power = np.linspace(-4, 6, 1000)\n",
        "null_dist = stats.norm.pdf(x_power, 0, 1)\n",
        "alt_dist = stats.norm.pdf(x_power, 2, 1)  # Effect size = 2\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_power, y=null_dist,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name='Null Distribution (H‚ÇÄ: Œº = 0)'\n",
        "), row=1, col=1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_power, y=alt_dist,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3),\n",
        "    name='Alternative Distribution (H‚ÇÅ: Œº = 2)'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Critical value\n",
        "alpha = 0.05\n",
        "z_crit = stats.norm.ppf(1 - alpha)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[z_crit, z_crit],\n",
        "    y=[0, max(null_dist)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['info'], width=3, dash='dash'),\n",
        "    name=f'Critical Value = {z_crit:.2f}',\n",
        "    showlegend=False\n",
        "), row=1, col=1)\n",
        "\n",
        "# Shade Type II error (Œ≤)\n",
        "beta_x = x_power[x_power <= z_crit]\n",
        "beta_y = stats.norm.pdf(beta_x, 2, 1)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([beta_x, [z_crit, beta_x[0]]]),\n",
        "    y=np.concatenate([beta_y, [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(255, 165, 0, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Œ≤ (Type II Error)'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Shade Power (1-Œ≤)\n",
        "power_x = x_power[x_power >= z_crit]\n",
        "power_y = stats.norm.pdf(power_x, 2, 1)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([power_x, [power_x[-1], z_crit]]),\n",
        "    y=np.concatenate([power_y, [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(16, 185, 129, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name='Power (1-Œ≤)'\n",
        "), row=1, col=1)\n",
        "\n",
        "# Factors affecting power\n",
        "power_factors = [\n",
        "    [\"Factor\", \"Effect on Power\", \"How to Increase Power\"],\n",
        "    [\"Effect Size\", \"Larger effect ‚Üí Higher power\", \"Choose meaningful differences\"],\n",
        "    [\"Sample Size\", \"Larger n ‚Üí Higher power\", \"Collect more data\"],\n",
        "    [\"Alpha Level\", \"Larger Œ± ‚Üí Higher power\", \"Use Œ± = 0.10 instead of 0.05\"],\n",
        "    [\"Variability\", \"Less noise ‚Üí Higher power\", \"Control confounding variables\"],\n",
        "    [\"Test Type\", \"One-tailed ‚Üí Higher power\", \"Use directional hypothesis if justified\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Factor\", \"Effect on Power\", \"How to Increase Power\"],\n",
        "        fill_color=colors['success'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*power_factors[1:])),\n",
        "        fill_color=[['#f0fdf4']*5, ['#dcfce7']*5, ['#bbf7d0']*5],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=1, col=2)\n",
        "\n",
        "# Power vs Sample Size\n",
        "sample_sizes = np.arange(5, 101, 5)\n",
        "effect_size = 0.5\n",
        "alpha = 0.05\n",
        "power_values = []\n",
        "\n",
        "for n in sample_sizes:\n",
        "    delta = effect_size * np.sqrt(n)\n",
        "    t_crit = stats.t.ppf(1 - alpha, n - 1)\n",
        "    power = 1 - stats.t.cdf(t_crit - delta, n - 1)\n",
        "    power_values.append(power)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=sample_sizes, y=power_values,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    marker=dict(size=6),\n",
        "    name='Power vs Sample Size'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Add target power line\n",
        "target_power_x = np.linspace(min(sample_sizes), max(sample_sizes), 100)\n",
        "target_power_y = [0.8] * len(target_power_x)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=target_power_x, y=target_power_y,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=2, dash='dash'),\n",
        "    name='Target Power = 0.8',\n",
        "    showlegend=False\n",
        "), row=2, col=1)\n",
        "\n",
        "# Power vs Effect Size\n",
        "effect_sizes = np.linspace(0.1, 1.5, 50)\n",
        "n_fixed = 30\n",
        "power_effect = []\n",
        "\n",
        "for es in effect_sizes:\n",
        "    delta = es * np.sqrt(n_fixed)\n",
        "    t_crit = stats.t.ppf(1 - alpha, n_fixed - 1)\n",
        "    power = 1 - stats.t.cdf(t_crit - delta, n_fixed - 1)\n",
        "    power_effect.append(power)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=effect_sizes, y=power_effect,\n",
        "    mode='lines+markers',\n",
        "    line=dict(color=colors['info'], width=3),\n",
        "    marker=dict(size=6),\n",
        "    name='Power vs Effect Size'\n",
        "), row=2, col=2)\n",
        "\n",
        "# Add target power line\n",
        "target_power_x2 = np.linspace(min(effect_sizes), max(effect_sizes), 100)\n",
        "target_power_y2 = [0.8] * len(target_power_x2)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=target_power_x2, y=target_power_y2,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=2, dash='dash'),\n",
        "    name='Target Power = 0.8',\n",
        "    showlegend=False\n",
        "), row=2, col=2)\n",
        "\n",
        "# Add Cohen's effect size guidelines\n",
        "effect_lines = [0.2, 0.5, 0.8]\n",
        "effect_labels = [\"Small\", \"Medium\", \"Large\"]\n",
        "for i, (line_x, label) in enumerate(zip(effect_lines, effect_labels)):\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=[line_x, line_x],\n",
        "        y=[0, 1],\n",
        "        mode='lines',\n",
        "        line=dict(color=colors['warning'], width=1, dash='dot'),\n",
        "        name=label,\n",
        "        showlegend=False\n",
        "    ), row=2, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=800,\n",
        "    showlegend=False\n",
        "    #title_text=\"Statistical Power: The Ability to Detect True Effects\"\n",
        ")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Test Statistic\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability Density\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Sample Size\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Statistical Power\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"Effect Size (Cohen's d)\", row=2, col=2)\n",
        "fig.update_yaxes(title_text=\"Statistical Power\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "a321ce77",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Key Insight:** Higher power means you're more likely to detect a true effect when it exists. Aim for power ‚â• 0.80!\n",
        "\n",
        "---\n",
        "\n",
        "## Example 1: One-Sample t-test üìä\n",
        "\n",
        "### Problem Setup\n",
        "\n",
        "**Research Question:** A new study technique claims to improve test scores. The current average is 75. We test 25 students using the new method."
      ],
      "id": "3fda8d4a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Generate realistic sample data\n",
        "np.random.seed(42)\n",
        "current_average = 75\n",
        "new_method_scores = np.random.normal(78.5, 8, 25)  # New method might be better\n",
        "\n",
        "print(\"üìä Sample Data Summary:\")\n",
        "print(\"=\" * 40)\n",
        "print(f\"Sample size (n): {len(new_method_scores)}\")\n",
        "print(f\"Sample mean (xÃÑ): {np.mean(new_method_scores):.2f}\")\n",
        "print(f\"Sample std (s): {np.std(new_method_scores, ddof=1):.2f}\")\n",
        "print(f\"Current average (Œº‚ÇÄ): {current_average}\")"
      ],
      "id": "8b699a25",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Complete Hypothesis Test"
      ],
      "id": "ff0006f2"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 10
      },
      "source": [
        "# Create comprehensive example visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"Sample Data Distribution\", \"Hypothesis Test Setup\",\n",
        "                   \"Test Statistic and P-value\", \"Decision and Interpretation\"),\n",
        "    specs=[[{\"type\": \"histogram\"}, {\"type\": \"table\"}],\n",
        "           [{\"type\": \"scatter\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Sample data histogram\n",
        "fig.add_trace(go.Histogram(\n",
        "    x=new_method_scores,\n",
        "    name=\"New Method Scores\",\n",
        "    marker_color=colors['primary'],\n",
        "    opacity=0.7,\n",
        "    nbinsx=15\n",
        "), row=1, col=1)\n",
        "\n",
        "# Add vertical lines manually\n",
        "sample_mean = np.mean(new_method_scores)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[sample_mean, sample_mean],\n",
        "    y=[0, 6],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f'Sample Mean = {sample_mean:.1f}',\n",
        "    showlegend=False\n",
        "), row=1, col=1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[current_average, current_average],\n",
        "    y=[0, 6],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['warning'], width=3, dash='dash'),\n",
        "    name=f'H‚ÇÄ: Œº = {current_average}',\n",
        "    showlegend=False\n",
        "), row=1, col=1)\n",
        "\n",
        "# Test setup table\n",
        "setup_data = [\n",
        "    [\"Step\", \"Details\"],\n",
        "    [\"1. Hypotheses\", \"H‚ÇÄ: Œº = 75 (no improvement)\\nH‚ÇÅ: Œº > 75 (improvement)\"],\n",
        "    [\"2. Significance Level\", \"Œ± = 0.05 (5% chance of Type I error)\"],\n",
        "    [\"3. Assumptions\", \"‚úì Independence\\n‚úì Approximate normality (n=25)\\n‚úì Random sample\"],\n",
        "    [\"4. Test Type\", \"One-sample t-test (œÉ unknown)\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Step\", \"Details\"],\n",
        "        fill_color=colors['info'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*setup_data[1:])),\n",
        "        fill_color=[['#faf5ff']*4, ['#e9d5ff']*4],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=35\n",
        "    )\n",
        "), row=1, col=2)\n",
        "\n",
        "# Calculate test statistic and p-value\n",
        "x_bar = np.mean(new_method_scores)\n",
        "s = np.std(new_method_scores, ddof=1)\n",
        "n = len(new_method_scores)\n",
        "mu_0 = current_average\n",
        "\n",
        "t_stat = (x_bar - mu_0) / (s / np.sqrt(n))\n",
        "df = n - 1\n",
        "p_value = 1 - stats.t.cdf(t_stat, df)  # Right-tailed test\n",
        "\n",
        "# t-distribution visualization\n",
        "x_t = np.linspace(-4, 4, 1000)\n",
        "y_t = stats.t.pdf(x_t, df)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_t, y=y_t,\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['primary'], width=3),\n",
        "    name=f't-distribution (df={df})'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Test statistic line\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[t_stat, t_stat],\n",
        "    y=[0, max(y_t)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f't = {t_stat:.3f}',\n",
        "    showlegend=False\n",
        "), row=2, col=1)\n",
        "\n",
        "# P-value area\n",
        "pval_x = x_t[x_t >= t_stat]\n",
        "pval_y = y_t[x_t >= t_stat]\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=np.concatenate([pval_x, [pval_x[-1], t_stat]]),\n",
        "    y=np.concatenate([pval_y, [0, 0]]),\n",
        "    fill='toself',\n",
        "    fillcolor='rgba(239, 68, 68, 0.3)',\n",
        "    line=dict(color='rgba(0,0,0,0)'),\n",
        "    name=f'P-value = {p_value:.4f}'\n",
        "), row=2, col=1)\n",
        "\n",
        "# Critical value\n",
        "alpha = 0.05\n",
        "t_crit = stats.t.ppf(1 - alpha, df)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[t_crit, t_crit],\n",
        "    y=[0, max(y_t)],\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['success'], width=2, dash='dot'),\n",
        "    name=f'Critical Value = {t_crit:.3f}',\n",
        "    showlegend=False\n",
        "), row=2, col=1)\n",
        "\n",
        "# Results table\n",
        "results_data = [\n",
        "    [\"Calculation\", \"Result\"],\n",
        "    [\"Test Statistic\", f\"t = (xÃÑ - Œº‚ÇÄ)/(s/‚àön) = ({x_bar:.2f} - {mu_0})/{s:.2f}/‚àö{n}) = {t_stat:.3f}\"],\n",
        "    [\"Degrees of Freedom\", f\"df = n - 1 = {n} - 1 = {df}\"],\n",
        "    [\"P-value\", f\"P(T ‚â• {t_stat:.3f}) = {p_value:.4f}\"],\n",
        "    [\"Critical Value\", f\"t‚ÇÄ.‚ÇÄ‚ÇÖ,{df} = {t_crit:.3f}\"],\n",
        "    [\"Decision\", f\"{'Reject H‚ÇÄ' if p_value <= alpha else 'Fail to reject H‚ÇÄ'} (p = {p_value:.4f} {'‚â§' if p_value <= alpha else '>'} Œ± = {alpha})\"],\n",
        "    [\"Conclusion\", f\"{'Strong evidence' if p_value <= alpha else 'Insufficient evidence'} that new method improves scores\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Calculation\", \"Result\"],\n",
        "        fill_color=colors['success'] if p_value <= alpha else colors['warning'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*results_data[1:])),\n",
        "        fill_color=[['#f0fdf4']*6, ['#dcfce7']*6] if p_value <= alpha else [['#fffbeb']*6, ['#fef3c7']*6],\n",
        "        font=dict(size=9),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=800,\n",
        "    showlegend=False\n",
        "    #title_text=\"Complete One-Sample t-test Example\"\n",
        ")\n",
        "\n",
        "# Update axes\n",
        "fig.update_xaxes(title_text=\"Test Score\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"t-statistic\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability Density\", row=2, col=1)\n",
        "\n",
        "fig.show()\n",
        "\n",
        "# Print detailed results\n",
        "print(f\"\\nüéØ DETAILED RESULTS:\")\n",
        "print(\"=\" * 50)\n",
        "print(f\"Test Statistic: t = {t_stat:.3f}\")\n",
        "print(f\"P-value: {p_value:.4f}\")\n",
        "print(f\"Critical Value: {t_crit:.3f}\")\n",
        "print(f\"Effect Size (Cohen's d): {(x_bar - mu_0) / s:.3f}\")\n",
        "\n",
        "if p_value <= alpha:\n",
        "    print(f\"\\n‚úÖ DECISION: Reject H‚ÇÄ\")\n",
        "    print(f\"üìä CONCLUSION: There is statistically significant evidence (p = {p_value:.4f}) that the new study method improves test scores.\")\n",
        "    print(f\"üí° PRACTICAL IMPACT: Students using the new method scored {x_bar - mu_0:.1f} points higher on average.\")\n",
        "else:\n",
        "    print(f\"\\n‚ùå DECISION: Fail to reject H‚ÇÄ\")\n",
        "    print(f\"üìä CONCLUSION: There is insufficient evidence (p = {p_value:.4f}) that the new study method improves test scores.\")\n",
        "    print(f\"üí° PRACTICAL IMPACT: The observed difference could reasonably be due to chance.\")"
      ],
      "id": "858ff11a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Using Python's Built-in Functions"
      ],
      "id": "9d8af8e6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Method 1: Using scipy.stats\n",
        "from scipy.stats import ttest_1samp\n",
        "\n",
        "t_stat_scipy, p_val_scipy = ttest_1samp(new_method_scores, current_average)\n",
        "\n",
        "print(\"üêç PYTHON IMPLEMENTATION:\")\n",
        "print(\"=\" * 40)\n",
        "print(\"Method 1: scipy.stats.ttest_1samp\")\n",
        "print(f\"t-statistic: {t_stat_scipy:.3f}\")\n",
        "print(f\"p-value (two-tailed): {p_val_scipy:.4f}\")\n",
        "print(f\"p-value (one-tailed): {p_val_scipy/2:.4f}\")\n",
        "\n",
        "# Method 2: Manual calculation with confidence interval\n",
        "confidence_level = 0.95\n",
        "alpha = 1 - confidence_level\n",
        "t_crit = stats.t.ppf(1 - alpha/2, df)\n",
        "margin_error = t_crit * (s / np.sqrt(n))\n",
        "ci_lower = x_bar - margin_error\n",
        "ci_upper = x_bar + margin_error\n",
        "\n",
        "print(f\"\\nMethod 2: Manual with 95% Confidence Interval\")\n",
        "print(f\"95% CI: ({ci_lower:.2f}, {ci_upper:.2f})\")\n",
        "print(f\"Interpretation: We're 95% confident the true mean is between {ci_lower:.1f} and {ci_upper:.1f}\")\n",
        "\n",
        "# Effect size calculation\n",
        "cohens_d = (x_bar - mu_0) / s\n",
        "print(f\"\\nEffect Size (Cohen's d): {cohens_d:.3f}\")\n",
        "if abs(cohens_d) < 0.2:\n",
        "    effect_interpretation = \"negligible\"\n",
        "elif abs(cohens_d) < 0.5:\n",
        "    effect_interpretation = \"small\"\n",
        "elif abs(cohens_d) < 0.8:\n",
        "    effect_interpretation = \"medium\"\n",
        "else:\n",
        "    effect_interpretation = \"large\"\n",
        "print(f\"Effect size interpretation: {effect_interpretation} effect\")"
      ],
      "id": "40c1d9b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Example 2: Two-Sample t-test üìä\n",
        "\n",
        "### Problem Setup\n",
        "\n",
        "**Research Question:** Compare effectiveness of two teaching methods"
      ],
      "id": "2b8d4a40"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Generate realistic data for two groups\n",
        "np.random.seed(123)\n",
        "method_A = np.random.normal(75, 10, 30)  # Traditional method\n",
        "method_B = np.random.normal(82, 12, 28)  # New method\n",
        "\n",
        "print(\"üìä TWO-GROUP COMPARISON:\")\n",
        "print(\"=\" * 40)\n",
        "print(\"Method A (Traditional):\")\n",
        "print(f\"  n = {len(method_A)}, mean = {np.mean(method_A):.2f}, std = {np.std(method_A, ddof=1):.2f}\")\n",
        "print(\"\\nMethod B (New):\")\n",
        "print(f\"  n = {len(method_B)}, mean = {np.mean(method_B):.2f}, std = {np.std(method_B, ddof=1):.2f}\")\n",
        "print(f\"\\nDifference in means: {np.mean(method_B) - np.mean(method_A):.2f} points\")"
      ],
      "id": "ae7e08cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Statistical vs Practical Significance ü§î"
      ],
      "id": "7cf82731"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "# Demonstrate the difference between statistical and practical significance\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\"Large Sample, Small Effect\", \"Small Sample, Large Effect\")\n",
        ")\n",
        "\n",
        "# Scenario 1: Large sample, tiny effect\n",
        "np.random.seed(42)\n",
        "large_n = 10000\n",
        "tiny_effect = np.random.normal(100.05, 15, large_n)  # Tiny effect (0.05 points)\n",
        "t_stat_large, p_val_large = ttest_1samp(tiny_effect, 100)\n",
        "\n",
        "fig.add_trace(go.Histogram(\n",
        "    x=tiny_effect,\n",
        "    name=\"Large Sample Data\",\n",
        "    marker_color=colors['primary'],\n",
        "    opacity=0.7,\n",
        "    nbinsx=50\n",
        "), row=1, col=1)\n",
        "\n",
        "# Scenario 1 vertical lines\n",
        "sample_mean_large = np.mean(tiny_effect)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[sample_mean_large, sample_mean_large],\n",
        "    y=[0, 0.025],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f'Mean = {sample_mean_large:.2f}',\n",
        "    showlegend=False\n",
        "), row=1, col=1)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[100, 100],\n",
        "    y=[0, 0.025],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['warning'], width=3, dash='dash'),\n",
        "    name='H‚ÇÄ: Œº = 100',\n",
        "    showlegend=False\n",
        "), row=1, col=1)\n",
        "\n",
        "# Scenario 2: Small sample, large effect\n",
        "small_n = 10\n",
        "large_effect = np.random.normal(110, 15, small_n)  # Large effect (10 points)\n",
        "t_stat_small, p_val_small = ttest_1samp(large_effect, 100)\n",
        "\n",
        "fig.add_trace(go.Histogram(\n",
        "    x=large_effect,\n",
        "    name=\"Small Sample Data\",\n",
        "    marker_color=colors['success'],\n",
        "    opacity=0.7,\n",
        "    nbinsx=8\n",
        "), row=1, col=2)\n",
        "\n",
        "# Scenario 2 vertical lines\n",
        "sample_mean_small = np.mean(large_effect)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[sample_mean_small, sample_mean_small],\n",
        "    y=[0, 0.02],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['danger'], width=3, dash='solid'),\n",
        "    name=f'Mean = {sample_mean_small:.1f}',\n",
        "    showlegend=False\n",
        "), row=1, col=2)\n",
        "\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[100, 100],\n",
        "    y=[0, 0.02],  # Adjust height as needed\n",
        "    mode='lines',\n",
        "    line=dict(color=colors['warning'], width=3, dash='dash'),\n",
        "    name='H‚ÇÄ: Œº = 100',\n",
        "    showlegend=False\n",
        "), row=1, col=2)\n",
        "\n",
        "# Add annotations with results\n",
        "fig.add_annotation(\n",
        "    x=105, y=0.02,\n",
        "    text=f\"<b>Statistically Significant!</b><br>n = {large_n:,}<br>Effect = {np.mean(tiny_effect) - 100:.2f}<br>t = {t_stat_large:.2f}<br>p = {p_val_large:.2e}<br><br><b>But practically meaningless!</b>\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowcolor=colors['danger'],\n",
        "    bgcolor=\"rgba(255,255,255,0.9)\",\n",
        "    bordercolor=colors['danger'],\n",
        "    font=dict(size=11),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "significance_text = \"Significant\" if p_val_small <= 0.05 else \"Not Significant\"\n",
        "fig.add_annotation(\n",
        "    x=115, y=0.015,\n",
        "    text=f\"<b>{significance_text}</b><br>n = {small_n}<br>Effect = {np.mean(large_effect) - 100:.1f}<br>t = {t_stat_small:.2f}<br>p = {p_val_small:.3f}<br><br><b>But large practical effect!</b>\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowcolor=colors['success'],\n",
        "    bgcolor=\"rgba(255,255,255,0.9)\",\n",
        "    bordercolor=colors['success'],\n",
        "    font=dict(size=11),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    height=500,\n",
        "    showlegend=False\n",
        "    #title_text=\"Statistical Significance ‚â† Practical Importance\"\n",
        ")\n",
        "\n",
        "fig.update_xaxes(title_text=\"Value\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Density\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Value\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Density\", row=1, col=2)\n",
        "\n",
        "fig.show()\n",
        "\n",
        "print(\"üîë KEY LESSON: Statistical Significance ‚â† Practical Importance\")\n",
        "print(\"=\" * 60)\n",
        "print(f\"Left: Tiny effect ({np.mean(tiny_effect) - 100:.2f}) but significant due to large sample\")\n",
        "print(f\"Right: Large effect ({np.mean(large_effect) - 100:.1f}) but {'not ' if p_val_small > 0.05 else ''}significant with small sample\")\n",
        "print(\"\\nüí° Always consider BOTH statistical significance AND effect size!\")"
      ],
      "id": "6e9d88e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Best Practices Summary üìã"
      ],
      "id": "38453d7d"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "# Create best practices visualization\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\"Planning Phase\", \"Analysis Phase\", \"Interpretation Phase\", \"Reporting Phase\"),\n",
        "    specs=[[{\"type\": \"table\"}, {\"type\": \"table\"}],\n",
        "           [{\"type\": \"table\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Planning best practices\n",
        "planning_data = [\n",
        "    [\"Best Practice\", \"Why Important\"],\n",
        "    [\"Pre-specify hypotheses\", \"Avoid p-hacking and bias\"],\n",
        "    [\"Choose Œ± before analysis\", \"Prevent manipulation of results\"],\n",
        "    [\"Calculate required sample size\", \"Ensure adequate power\"],\n",
        "    [\"Check assumptions\", \"Ensure valid results\"],\n",
        "    [\"Plan for multiple testing\", \"Control family-wise error rate\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Planning Best Practice\", \"Why Important\"],\n",
        "        fill_color=colors['primary'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*planning_data[1:])),\n",
        "        fill_color=[['#f8fafc']*5, ['#dbeafe']*5],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=1, col=1)\n",
        "\n",
        "# Analysis best practices\n",
        "analysis_data = [\n",
        "    [\"Best Practice\", \"Why Important\"],\n",
        "    [\"Use appropriate test\", \"Correct assumptions matter\"],\n",
        "    [\"Check diagnostic plots\", \"Verify model assumptions\"],\n",
        "    [\"Report exact p-values\", \"Avoid arbitrary cutoffs\"],\n",
        "    [\"Calculate effect sizes\", \"Assess practical significance\"],\n",
        "    [\"Use robust methods when needed\", \"Handle assumption violations\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Analysis Best Practice\", \"Why Important\"],\n",
        "        fill_color=colors['success'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*analysis_data[1:])),\n",
        "        fill_color=[['#f0fdf4']*5, ['#dcfce7']*5],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=1, col=2)\n",
        "\n",
        "# Interpretation best practices\n",
        "interpretation_data = [\n",
        "    [\"Best Practice\", \"Why Important\"],\n",
        "    [\"Consider practical significance\", \"Statistical ‚â† meaningful\"],\n",
        "    [\"Acknowledge limitations\", \"Science is about uncertainty\"],\n",
        "    [\"Avoid causal language\", \"Correlation ‚â† causation\"],\n",
        "    [\"Report confidence intervals\", \"Show uncertainty in estimates\"],\n",
        "    [\"Discuss Type II errors\", \"Consider power and false negatives\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Interpretation Best Practice\", \"Why Important\"],\n",
        "        fill_color=colors['warning'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*interpretation_data[1:])),\n",
        "        fill_color=[['#fffbeb']*5, ['#fef3c7']*5],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=1)\n",
        "\n",
        "# Reporting best practices\n",
        "reporting_data = [\n",
        "    [\"Best Practice\", \"Why Important\"],\n",
        "    [\"Report all tests performed\", \"Prevent selective reporting\"],\n",
        "    [\"Include descriptive statistics\", \"Give complete picture\"],\n",
        "    [\"Show data visualizations\", \"Let data speak\"],\n",
        "    [\"Discuss practical implications\", \"Connect to real world\"],\n",
        "    [\"Make data/code available\", \"Enable reproducibility\"]\n",
        "]\n",
        "\n",
        "fig.add_trace(go.Table(\n",
        "    header=dict(\n",
        "        values=[\"Reporting Best Practice\", \"Why Important\"],\n",
        "        fill_color=colors['info'],\n",
        "        font=dict(size=11, color='white'),\n",
        "        align=\"left\"\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=list(zip(*reporting_data[1:])),\n",
        "        fill_color=[['#faf5ff']*5, ['#e9d5ff']*5],\n",
        "        font=dict(size=10),\n",
        "        align=\"left\",\n",
        "        height=25\n",
        "    )\n",
        "), row=2, col=2)\n",
        "\n",
        "fig.update_layout(\n",
        "    height=600,\n",
        "    showlegend=False\n",
        "    #title_text=\"Best Practices for Hypothesis Testing\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "9ab574ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Python Code Templates üíª {.hidden}"
      ],
      "id": "c33df52e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "# =============================================================================\n",
        "# COMPLETE HYPOTHESIS TESTING TOOLKIT\n",
        "# =============================================================================\n",
        "\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# Template 1: One-Sample t-test\n",
        "# -----------------------------------------------------------------------------\n",
        "def one_sample_ttest(data, null_value, alpha=0.05, alternative='two-sided'):\n",
        "    \"\"\"\n",
        "    Perform one-sample t-test with complete analysis\n",
        "    \n",
        "    Parameters:\n",
        "    -----------\n",
        "    data : array-like\n",
        "        Sample data\n",
        "    null_value : float\n",
        "        Hypothesized population mean\n",
        "    alpha : float\n",
        "        Significance level (default 0.05)\n",
        "    alternative : str\n",
        "        'two-sided', 'greater', or 'less'\n",
        "    \"\"\"\n",
        "    \n",
        "    # Calculate statistics\n",
        "    n = len(data)\n",
        "    x_bar = np.mean(data)\n",
        "    s = np.std(data, ddof=1)\n",
        "    se = s / np.sqrt(n)\n",
        "    \n",
        "    # Test statistic\n",
        "    t_stat = (x_bar - null_value) / se\n",
        "    df = n - 1\n",
        "    \n",
        "    # P-value calculation\n",
        "    if alternative == 'two-sided':\n",
        "        p_value = 2 * (1 - stats.t.cdf(abs(t_stat), df))\n",
        "    elif alternative == 'greater':\n",
        "        p_value = 1 - stats.t.cdf(t_stat, df)\n",
        "    elif alternative == 'less':\n",
        "        p_value = stats.t.cdf(t_stat, df)\n",
        "    \n",
        "    # Effect size (Cohen's d)\n",
        "    cohens_d = (x_bar - null_value) / s\n",
        "    \n",
        "    # Confidence interval\n",
        "    t_crit = stats.t.ppf(1 - alpha/2, df)\n",
        "    ci_lower = x_bar - t_crit * se\n",
        "    ci_upper = x_bar + t_crit * se\n",
        "    \n",
        "    # Results\n",
        "    results = {\n",
        "        'test_statistic': t_stat,\n",
        "        'p_value': p_value,\n",
        "        'degrees_of_freedom': df,\n",
        "        'effect_size': cohens_d,\n",
        "        'confidence_interval': (ci_lower, ci_upper),\n",
        "        'reject_null': p_value <= alpha,\n",
        "        'sample_mean': x_bar,\n",
        "        'sample_std': s,\n",
        "        'sample_size': n\n",
        "    }\n",
        "    \n",
        "    return results\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# Template 2: Two-Sample t-test\n",
        "# -----------------------------------------------------------------------------\n",
        "def two_sample_ttest(group1, group2, alpha=0.05, equal_var=True):\n",
        "    \"\"\"\n",
        "    Perform two-sample t-test with complete analysis\n",
        "    \"\"\"\n",
        "    \n",
        "    # Calculate statistics\n",
        "    n1, n2 = len(group1), len(group2)\n",
        "    mean1, mean2 = np.mean(group1), np.mean(group2)\n",
        "    s1, s2 = np.std(group1, ddof=1), np.std(group2, ddof=1)\n",
        "    \n",
        "    if equal_var:\n",
        "        # Pooled variance\n",
        "        pooled_var = ((n1-1)*s1**2 + (n2-1)*s2**2) / (n1+n2-2)\n",
        "        se = np.sqrt(pooled_var * (1/n1 + 1/n2))\n",
        "        df = n1 + n2 - 2\n",
        "    else:\n",
        "        # Welch's t-test\n",
        "        se = np.sqrt(s1**2/n1 + s2**2/n2)\n",
        "        df = (s1**2/n1 + s2**2/n2)**2 / ((s1**2/n1)**2/(n1-1) + (s2**2/n2)**2/(n2-1))\n",
        "    \n",
        "    # Test statistic\n",
        "    t_stat = (mean1 - mean2) / se\n",
        "    p_value = 2 * (1 - stats.t.cdf(abs(t_stat), df))\n",
        "    \n",
        "    # Effect size (Cohen's d)\n",
        "    if equal_var:\n",
        "        pooled_std = np.sqrt(pooled_var)\n",
        "    else:\n",
        "        pooled_std = np.sqrt(((n1-1)*s1**2 + (n2-1)*s2**2) / (n1+n2-2))\n",
        "    \n",
        "    cohens_d = (mean1 - mean2) / pooled_std\n",
        "    \n",
        "    results = {\n",
        "        'test_statistic': t_stat,\n",
        "        'p_value': p_value,\n",
        "        'degrees_of_freedom': df,\n",
        "        'effect_size': cohens_d,\n",
        "        'reject_null': p_value <= alpha,\n",
        "        'group1_stats': {'mean': mean1, 'std': s1, 'n': n1},\n",
        "        'group2_stats': {'mean': mean2, 'std': s2, 'n': n2}\n",
        "    }\n",
        "    \n",
        "    return results\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# Template 3: Power Analysis\n",
        "# -----------------------------------------------------------------------------\n",
        "def power_analysis(effect_size, alpha=0.05, power=0.8):\n",
        "    \"\"\"\n",
        "    Calculate required sample size for desired power\n",
        "    \"\"\"\n",
        "    from scipy.stats import norm\n",
        "    \n",
        "    z_alpha = norm.ppf(1 - alpha/2)\n",
        "    z_beta = norm.ppf(power)\n",
        "    \n",
        "    n = ((z_alpha + z_beta) / effect_size) ** 2\n",
        "    \n",
        "    return int(np.ceil(n))\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# Example Usage\n",
        "# -----------------------------------------------------------------------------\n",
        "\n",
        "# Generate sample data\n",
        "np.random.seed(42)\n",
        "sample_data = np.random.normal(105, 15, 25)\n",
        "\n",
        "# Perform one-sample t-test\n",
        "results = one_sample_ttest(sample_data, null_value=100, alternative='greater')\n",
        "\n",
        "print(\"One-Sample t-test Results:\")\n",
        "print(f\"Test statistic: {results['test_statistic']:.3f}\")\n",
        "print(f\"P-value: {results['p_value']:.4f}\")\n",
        "print(f\"Effect size (d): {results['effect_size']:.3f}\")\n",
        "print(f\"95% CI: ({results['confidence_interval'][0]:.2f}, {results['confidence_interval'][1]:.2f})\")\n",
        "print(f\"Reject null: {results['reject_null']}\")\n",
        "\n",
        "# Power analysis\n",
        "required_n = power_analysis(effect_size=0.5, power=0.8)\n",
        "print(f\"\\nRequired sample size for d=0.5, power=0.8: {required_n}\")"
      ],
      "id": "01e93148",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Summary: Key Takeaways üéØ\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### üß† Core Concepts\n",
        "- **Hypothesis testing** provides a framework for making decisions under uncertainty\n",
        "- **P-values** quantify how surprising our data would be if H‚ÇÄ were true\n",
        "- **Statistical significance ‚â† practical importance** - always consider effect size\n",
        "- **Type I and II errors** represent different kinds of mistakes with different costs\n",
        "- **Power** is the ability to detect true effects when they exist\n",
        ":::\n",
        "\n",
        "::: {.column}\n",
        "### üõ†Ô∏è Practical Skills\n",
        "- **Plan before you analyze** - specify hypotheses and Œ± level in advance\n",
        "- **Check assumptions** and use appropriate tests\n",
        "- **Report effect sizes** and confidence intervals, not just p-values\n",
        "- **Consider practical significance** alongside statistical significance\n",
        "- **Be honest about limitations** and acknowledge uncertainty\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "# Thank You! üéâ\n",
        "\n",
        "**Remember:** Hypothesis testing is a tool for making informed decisions under uncertainty. Use it wisely, report honestly, and always consider the practical implications of your statistical conclusions.\n",
        "\n",
        "**\"The combination of some data and an aching desire for an answer does not ensure that a reasonable answer can be extracted from a given body of data.\"** - John Tukey\n",
        "\n",
        "**Next class:** Regression Analysis! üìä\n",
        "\n",
        "\n",
        "```{=html}\n",
        "<a href=\"https://pstat5a.com/schedule.html\" class=\"main-page-btn\">üè† Back to Main Page</a>\n",
        "```"
      ],
      "id": "ac79aed0"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "pstat5a",
      "language": "python",
      "display_name": "Python (pstat5a)",
      "path": "/Users/narjesmathlouthi/Library/Jupyter/kernels/pstat5a"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}