{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab 5 Solutions: Continuous Random Variables & Confidence Intervals\"\n",
        "subtitle: \"PSTAT 5A - Summer Session A 2025\"\n",
        "author: \"Complete Solutions Guide\"\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    number-sections: false\n",
        "    code-fold: false\n",
        "    theme: cosmo\n",
        "  pdf:\n",
        "    toc: true\n",
        "    number-sections: false\n",
        "date: today\n",
        "jupyter: pstat5a\n",
        "execute: \n",
        "  eval: true\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n",
        "\n",
        "# Getting Started - Setup Code"
      ],
      "id": "1b28d838"
    },
    {
      "cell_type": "code",
      "metadata": {
        "message": false
      },
      "source": [
        "#| warning: false\n",
        "\n",
        "\n",
        "# Install any missing packages (will skip those already installed)\n",
        "#!%pip install --quiet numpy matplotlib scipy pandas statsmodels\n",
        "\n",
        "# Load our tools (libraries)\n",
        "import numpy as np # numerical computing (arrays, random numbers, etc.)\n",
        "import matplotlib.pyplot as plt # plotting library for static 2D graphs and visualizations\n",
        "from scipy import stats #  statistical functions (distributions, tests, etc.)\n",
        "import pandas as pd # data structures (DataFrame) and data analysis tools\n",
        "import statsmodels  # statistical modeling (regression, time series, ANOVA, etc.)\n",
        "\n",
        "# Make our graphs look nice\n",
        "#!%matplotlib inline     # embed Matplotlib plots directly in the notebook\n",
        "plt.style.use('seaborn-v0_8-whitegrid')  # Apply a clean whitegrid style from Seaborn\n",
        "\n",
        "# Set random seed for reproducible results\n",
        "np.random.seed(42)    # fix the random seed so results can be reproduced exactly\n",
        "\n",
        "print(\"✅ All tools loaded successfully!\") "
      ],
      "id": "fe14c017",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 1 Solution: Your First Normal Distribution\n",
        "\n",
        "Human heights follow a normal distribution with mean = 68 inches and standard deviation = 4 inches."
      ],
      "id": "a78be57d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Heights distribution - SOLUTION\n",
        "mean_height = 68  # SOLUTION: 68\n",
        "std_height = 4    # SOLUTION: 4\n",
        "\n",
        "heights = stats.norm(loc=mean_height, scale=std_height)\n",
        "\n",
        "print(f\"Mean height: {heights.mean()} inches\")\n",
        "print(f\"Standard deviation: {heights.std()} inches\")"
      ],
      "id": "7e492c04",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Calculate probabilities - SOLUTION\n",
        "\n",
        "# a) What's the probability someone is taller than 72 inches (6 feet)?\n",
        "prob_tall = 1 - heights.cdf(72)  # SOLUTION: 72\n",
        "print(f\"P(height > 72 inches) = {prob_tall:.4f}\")\n",
        "\n",
        "# b) What's the probability someone is between 64 and 72 inches?\n",
        "prob_between = heights.cdf(72) - heights.cdf(64)  # SOLUTION: 72, 64\n",
        "print(f\"P(64 < height < 72) = {prob_between:.4f}\")\n",
        "\n",
        "# c) What height is at the 90th percentile? (90% of people are shorter)\n",
        "height_90th = heights.ppf(0.90)  # SOLUTION: 0.90\n",
        "print(f\"90th percentile height: {height_90th:.2f} inches\")"
      ],
      "id": "3b8bdb75",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Visualization - SOLUTION\n",
        "x = np.linspace(50, 86, 1000)\n",
        "y = heights.pdf(x)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(x, y, 'b-', linewidth=2)\n",
        "plt.fill_between(x, y, alpha=0.3, color='lightgreen')\n",
        "plt.title('Human Heights Distribution')\n",
        "plt.xlabel('Height (inches)')\n",
        "plt.ylabel('Density')\n",
        "plt.axvline(mean_height, color='red', linestyle='--', linewidth=2, \n",
        "           label=f'Mean = {mean_height} inches')\n",
        "plt.legend()\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.show()"
      ],
      "id": "d08dff6c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 2 Solution: Bus Waiting Times\n",
        "\n",
        "The time between buses follows an exponential distribution with an average of 15 minutes between buses."
      ],
      "id": "bbd23418"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Bus waiting times - SOLUTION\n",
        "average_wait = 15  # SOLUTION: 15 minutes\n",
        "rate = 1 / average_wait\n",
        "bus_times = stats.expon(scale=average_wait)  # SOLUTION: average_wait\n",
        "\n",
        "# Questions:\n",
        "# a) What's the probability you wait less than 10 minutes?\n",
        "prob_short = bus_times.cdf(10)  # SOLUTION: 10\n",
        "print(f\"P(wait < 10 min) = {prob_short:.4f}\")\n",
        "\n",
        "# b) What's the probability you wait more than 30 minutes?\n",
        "prob_long = 1 - bus_times.cdf(30)  # SOLUTION: 30\n",
        "print(f\"P(wait > 30 min) = {prob_long:.4f}\")\n",
        "\n",
        "# c) What's the median waiting time? (50th percentile)\n",
        "median_wait = bus_times.ppf(0.5)  # SOLUTION: 0.5\n",
        "print(f\"Median wait time: {median_wait:.2f} minutes\")"
      ],
      "id": "fcd6bbe3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 3 Solution: Explore the CLT\n",
        "\n",
        "Let's verify the Central Limit Theorem with a uniform distribution!"
      ],
      "id": "7ec66926"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Population: Uniform distribution from 0 to 100 - SOLUTION\n",
        "population = stats.uniform(loc=0, scale=100)\n",
        "\n",
        "print(\"Population (Uniform 0 to 100):\")\n",
        "print(f\"Population mean: {population.mean()}\")\n",
        "print(f\"Population std: {population.std():.2f}\")\n",
        "\n",
        "# Take 500 samples of size 25 each - SOLUTION\n",
        "sample_size = 25   # SOLUTION: 25\n",
        "n_samples = 500    # SOLUTION: 500\n",
        "\n",
        "sample_means = []\n",
        "for i in range(n_samples):\n",
        "    sample = population.rvs(sample_size)  # SOLUTION: sample_size\n",
        "    sample_means.append(np.mean(sample))\n",
        "\n",
        "# Check the CLT prediction\n",
        "predicted_mean = population.mean()\n",
        "predicted_std = population.std() / np.sqrt(sample_size)\n",
        "\n",
        "print(f\"\\nCLT Predictions:\")\n",
        "print(f\"Sample means should have mean ≈ {predicted_mean:.2f}\")\n",
        "print(f\"Sample means should have std ≈ {predicted_std:.2f}\")\n",
        "\n",
        "print(f\"\\nActual Results:\")\n",
        "print(f\"Sample means actually have mean = {np.mean(sample_means):.2f}\")\n",
        "print(f\"Sample means actually have std = {np.std(sample_means):.2f}\")\n",
        "\n",
        "# Make a histogram\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(sample_means, bins=30, density=True, alpha=0.7, color='purple', edgecolor='black')\n",
        "plt.title('Distribution of Sample Means from Uniform Population')\n",
        "plt.xlabel('Sample Mean')\n",
        "plt.ylabel('Density')\n",
        "plt.axvline(np.mean(sample_means), color='red', linestyle='--', linewidth=2, \n",
        "           label=f'Actual mean = {np.mean(sample_means):.2f}')\n",
        "plt.legend()\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.show()"
      ],
      "id": "8abfc1e9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 4 Solution: Your Own Confidence Interval\n",
        "\n",
        "Creating a 90% confidence interval for homework time data."
      ],
      "id": "4aaffae3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Homework time data (in hours per week) - SOLUTION\n",
        "np.random.seed(456)\n",
        "homework_data = np.random.normal(15, 5, 40)  # 40 students, roughly normal\n",
        "\n",
        "print(\"Homework Survey Results:\")\n",
        "print(f\"Sample size: {len(homework_data)}\")\n",
        "print(f\"Sample mean: {np.mean(homework_data):.2f} hours/week\")\n",
        "print(f\"Sample std dev: {np.std(homework_data, ddof=1):.2f} hours/week\")\n",
        "\n",
        "# Create a 90% confidence interval - SOLUTION\n",
        "# Step 1: Calculate the needed values\n",
        "sample_mean = np.mean(homework_data)\n",
        "sample_std = np.std(homework_data, ddof=1)\n",
        "n = len(homework_data)\n",
        "\n",
        "# Step 2: Find the critical value for 90% confidence\n",
        "confidence = 0.90\n",
        "alpha = 1 - confidence\n",
        "z_star = stats.norm.ppf(1 - alpha/2)\n",
        "print(f\"Critical value for 90% confidence: {z_star:.3f}\")\n",
        "\n",
        "# Step 3: Calculate standard error and margin of error\n",
        "standard_error = sample_std / np.sqrt(n)\n",
        "margin_of_error = z_star * standard_error\n",
        "\n",
        "print(f\"Standard error: {standard_error:.3f}\")\n",
        "print(f\"Margin of error: {margin_of_error:.3f}\")\n",
        "\n",
        "# Step 4: Build the confidence interval\n",
        "ci_lower = sample_mean - margin_of_error\n",
        "ci_upper = sample_mean + margin_of_error\n",
        "\n",
        "print(f\"\\n90% Confidence Interval for average homework time:\")\n",
        "print(f\"[{ci_lower:.2f}, {ci_upper:.2f}] hours per week\")\n",
        "\n",
        "# Step 5: Interpret your result\n",
        "print(f\"\\nInterpretation:\")\n",
        "print(f\"We are 90% confident that the true average homework time\")\n",
        "print(f\"for all students is between {ci_lower:.2f} and {ci_upper:.2f} hours per week.\")"
      ],
      "id": "fd8f7791",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Comparison Questions:**\n",
        "\n",
        "1. **How would a 95% confidence interval compare to your 90% interval?**\n",
        "   - A 95% CI would be **wider** than the 90% CI because we need more \"room\" to be more confident.\n",
        "\n",
        "2. **What if you had surveyed 100 students instead of 40?**\n",
        "   - The CI would be **narrower** because larger sample sizes give more precise estimates."
      ],
      "id": "2f581b02"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Demonstrate the comparisons\n",
        "print(\"Comparison of different confidence levels:\")\n",
        "print(\"=\" * 45)\n",
        "\n",
        "# 90% vs 95% confidence intervals\n",
        "for conf_level in [0.90, 0.95]:\n",
        "    alpha = 1 - conf_level\n",
        "    z_crit = stats.norm.ppf(1 - alpha/2)\n",
        "    margin = z_crit * standard_error\n",
        "    lower = sample_mean - margin\n",
        "    upper = sample_mean + margin\n",
        "    width = upper - lower\n",
        "    print(f\"{conf_level*100:2.0f}% CI: [{lower:.2f}, {upper:.2f}], width = {width:.2f}\")\n",
        "\n",
        "print(\"\\nComparison of different sample sizes (95% CI):\")\n",
        "print(\"=\" * 45)\n",
        "\n",
        "# Different sample sizes (simulated)\n",
        "for sample_size_comp in [40, 100]:\n",
        "    se_comp = sample_std / np.sqrt(sample_size_comp)\n",
        "    margin_comp = 1.96 * se_comp  # 95% CI\n",
        "    lower_comp = sample_mean - margin_comp\n",
        "    upper_comp = sample_mean + margin_comp\n",
        "    width_comp = upper_comp - lower_comp\n",
        "    print(f\"n={sample_size_comp:3d}: [{lower_comp:.2f}, {upper_comp:.2f}], width = {width_comp:.2f}\")"
      ],
      "id": "5a16e486",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 5 Solution: Which Distribution Should I Use?\n",
        "\n",
        "Match each scenario with the best distribution:"
      ],
      "id": "a58fe69b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# SOLUTION\n",
        "print(\"SOLUTIONS:\")\n",
        "print(\"A. Time between arrivals: 3 (Exponential)\")      \n",
        "print(\"B. Heights: 1 (Normal)\")                    \n",
        "print(\"C. Die roll: 4 (Discrete uniform)\")                   \n",
        "print(\"D. Temperature: 1 (Normal)\")                \n",
        "print(\"E. Coin flip: 5 (Bernoulli)\")                  \n",
        "\n",
        "print(\"\\nReasoning:\")\n",
        "print(\"A. Exponential - Time between events follows exponential distribution\")\n",
        "print(\"B. Normal - Heights of people are naturally normally distributed\")  \n",
        "print(\"C. Discrete uniform - All 6 outcomes (1,2,3,4,5,6) equally likely\")\n",
        "print(\"D. Normal - Temperature measurements tend to be normally distributed\")\n",
        "print(\"E. Bernoulli - Two outcomes (heads/tails) with fixed probability\")"
      ],
      "id": "de394343",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<!-- # Additional Examples and Practice\n",
        "\n",
        "## Working with Different Normal Distributions"
      ],
      "id": "213d860d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create and compare different normal distributions\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 10))\n",
        "\n",
        "# Different means, same std dev\n",
        "x = np.linspace(-10, 20, 1000)\n",
        "for i, mean in enumerate([0, 5, 10]):\n",
        "    y = stats.norm(mean, 2).pdf(x)\n",
        "    axes[0,0].plot(x, y, label=f'μ={mean}, σ=2')\n",
        "axes[0,0].set_title('Different Means, Same Standard Deviation')\n",
        "axes[0,0].legend()\n",
        "axes[0,0].grid(True, alpha=0.3)\n",
        "\n",
        "# Same mean, different std devs  \n",
        "x = np.linspace(-15, 15, 1000)\n",
        "for i, std in enumerate([1, 2, 4]):\n",
        "    y = stats.norm(0, std).pdf(x)\n",
        "    axes[0,1].plot(x, y, label=f'μ=0, σ={std}')\n",
        "axes[0,1].set_title('Same Mean, Different Standard Deviations')\n",
        "axes[0,1].legend()\n",
        "axes[0,1].grid(True, alpha=0.3)\n",
        "\n",
        "# Probability calculations example\n",
        "normal_dist = stats.norm(100, 15)  # IQ scores: mean=100, std=15\n",
        "x = np.linspace(40, 160, 1000)\n",
        "y = normal_dist.pdf(x)\n",
        "\n",
        "axes[1,0].plot(x, y, 'b-', linewidth=2)\n",
        "axes[1,0].fill_between(x, y, alpha=0.3)\n",
        "\n",
        "# Highlight specific regions\n",
        "x_high = x[x >= 130]\n",
        "y_high = normal_dist.pdf(x_high)\n",
        "axes[1,0].fill_between(x_high, y_high, alpha=0.7, color='red', \n",
        "                      label=f'P(IQ ≥ 130) = {1-normal_dist.cdf(130):.3f}')\n",
        "axes[1,0].set_title('IQ Scores Distribution')\n",
        "axes[1,0].legend()\n",
        "axes[1,0].grid(True, alpha=0.3)\n",
        "\n",
        "# Z-score example\n",
        "raw_scores = [85, 100, 115, 130]\n",
        "z_scores = [(score - 100) / 15 for score in raw_scores]\n",
        "\n",
        "axes[1,1].scatter(raw_scores, z_scores, s=100, c='red')\n",
        "for i, (raw, z) in enumerate(zip(raw_scores, z_scores)):\n",
        "    axes[1,1].annotate(f'({raw}, {z:.1f})', (raw, z), xytext=(5, 5), \n",
        "                      textcoords='offset points')\n",
        "axes[1,1].set_xlabel('Raw Score')\n",
        "axes[1,1].set_ylabel('Z-Score')\n",
        "axes[1,1].set_title('Raw Scores vs Z-Scores')\n",
        "axes[1,1].grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"Z-Score Transformations:\")\n",
        "for raw, z in zip(raw_scores, z_scores):\n",
        "    print(f\"Raw score {raw} → Z-score {z:.2f}\")"
      ],
      "id": "6aeb2a69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Confidence Interval Simulation\n",
        "\n",
        "# Simulate many confidence intervals to verify coverage probability\n",
        "def simulate_confidence_intervals(true_mean, true_std, sample_size, confidence_level, n_simulations=100):\n",
        "    \"\"\"\n",
        "    Simulate many confidence intervals and check coverage rate\n",
        "    \"\"\"\n",
        "    alpha = 1 - confidence_level\n",
        "    z_critical = stats.norm.ppf(1 - alpha/2)\n",
        "    \n",
        "    coverage_count = 0\n",
        "    intervals = []\n",
        "    \n",
        "    for i in range(n_simulations):\n",
        "        # Generate a sample\n",
        "        sample = np.random.normal(true_mean, true_std, sample_size)\n",
        "        sample_mean = np.mean(sample)\n",
        "        sample_std = np.std(sample, ddof=1)\n",
        "        \n",
        "        # Calculate confidence interval\n",
        "        se = sample_std / np.sqrt(sample_size)\n",
        "        margin = z_critical * se\n",
        "        ci_lower = sample_mean - margin\n",
        "        ci_upper = sample_mean + margin\n",
        "        \n",
        "        # Check if interval captures true mean\n",
        "        captures = ci_lower <= true_mean <= ci_upper\n",
        "        if captures:\n",
        "            coverage_count += 1\n",
        "            \n",
        "        intervals.append((ci_lower, ci_upper, captures))\n",
        "    \n",
        "    coverage_rate = coverage_count / n_simulations\n",
        "    return intervals, coverage_rate\n",
        "\n",
        "# Run simulation\n",
        "true_mean, true_std = 50, 10\n",
        "sample_size = 30\n",
        "confidence_level = 0.95\n",
        "n_sims = 100\n",
        "\n",
        "intervals, coverage_rate = simulate_confidence_intervals(\n",
        "    true_mean, true_std, sample_size, confidence_level, n_sims\n",
        ")\n",
        "\n",
        "print(f\"Simulation Results:\")\n",
        "print(f\"True population mean: {true_mean}\")\n",
        "print(f\"Sample size: {sample_size}\")\n",
        "print(f\"Confidence level: {confidence_level*100}%\")\n",
        "print(f\"Number of simulations: {n_sims}\")\n",
        "print(f\"Coverage rate: {coverage_rate*100:.1f}%\")\n",
        "print(f\"Expected coverage rate: {confidence_level*100}%\")\n",
        "\n",
        "# Plot first 20 intervals\n",
        "plt.figure(figsize=(12, 8))\n",
        "plt.axvline(true_mean, color='red', linewidth=3, label=f'True Mean = {true_mean}')\n",
        "\n",
        "for i in range(min(20, len(intervals))):\n",
        "    lower, upper, captures = intervals[i]\n",
        "    color = 'green' if captures else 'red'\n",
        "    alpha = 0.6 if captures else 1.0\n",
        "    \n",
        "    plt.plot([lower, upper], [i, i], color=color, linewidth=2, alpha=alpha)\n",
        "    plt.plot((lower + upper)/2, i, 'o', color=color, markersize=4)\n",
        "\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Simulation Number')\n",
        "plt.title(f'First 20 Confidence Intervals\\n{confidence_level*100}% Confidence Level')\n",
        "plt.legend()\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.show()\n",
        "``` -->\n",
        "\n",
        "\n",
        "## 🎯 Lab 5 Complete Solutions Summary\n",
        "\n",
        "\n",
        "- ✅ **Task 1**: Normal distribution calculations with human heights\n",
        "- ✅ **Task 2**: Exponential distribution for bus waiting times  \n",
        "- ✅ **Task 3**: Central Limit Theorem verification with uniform distribution\n",
        "- ✅ **Task 4**: 90% confidence interval construction for homework data\n",
        "- ✅ **Task 5**: Distribution matching exercise with reasoning\n",
        "\n",
        "\n",
        "\n",
        "**Key Takeaways:**\n",
        "\n",
        "1. Continuous distributions use PDFs and calculate probabilities as areas\n",
        "   \n",
        "2. Normal distribution is fundamental and appears everywhere via CLT\n",
        "   \n",
        "3. Confidence intervals provide ranges of plausible values for parameters\n",
        "   \n",
        "4. Sample size affects precision; confidence level affects interval width\n",
        "   \n",
        "5. Python's `scipy.stats` provides powerful tools for distribution analysis\n"
      ],
      "id": "31827453"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "pstat5a",
      "language": "python",
      "display_name": "Python (pstat5a)",
      "path": "/Users/narjesmathlouthi/Library/Jupyter/kernels/pstat5a"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}