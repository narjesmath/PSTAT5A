{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A Lab 1\"\n",
        "subtitle: \"Introduction to Python and JupyterHub\"\n",
        "author: \"Student Name: ________________________\"\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    number-sections: false\n",
        "    theme: cosmo\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "  pdf:\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    geometry: margin=1in\n",
        "    fontsize: 11pt\n",
        "    documentclass: article\n",
        "  docx:\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    highlight-style: github\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "::: {.column-margin}\n",
        "![](/img/logo.png){width=150px}\n",
        ":::\n",
        "\n",
        "**Welcome to the first PSTAT 5A Lab!** As we will soon learn, computers play an integral part in effectively and efficiently performing statistical analyses. The primary goal of these Labs is to develop the skills to communicate with computers and learn the basic principles and language of programming.\n",
        "\n",
        "This first lab will introduce you to the JupyterHub environment, Python as a programming language, and some basic concepts of programming. You will also complete a series of tasks to familiarize yourself with the tools and concepts we will use throughout the course.\n",
        "\n",
        "This lab is designed to be completed during your first lab section of the week, and it will set the foundation for the rest of the course. Make sure to read through all the material carefully, as it will be essential for your success in PSTAT 5A.\n",
        "\n",
        "---\n",
        "\n",
        "## Structure of Labs\n",
        "\n",
        "Every week we (the course staff) will publish a lab document, which is intended to be completed during your Lab Section (i.e., your first Section) of the week. Each lab document will consist of a combination of text, tips, and the occasional task for you to complete based on the text provided. Your TA will cover exactly what you need to turn in at the end of each lab in order to receive credit, but you should read all lab material carefully and thoroughly as content from labs will appear on quizzes and exams.\n",
        "\n",
        "---\n",
        "\n",
        "## What Is Programming?\n",
        "\n",
        "Computers, though incredibly useful, are fairly complex machines. To communicate with them, we need to use a specific language, known as a **programming language**. There are a number of programming languages currently in use—R, Julia, MatLab, and the language we will use for this course, **Python**.\n",
        "\n",
        "Python programs can be written in many environments (e.g., text editors like VS Code or in a Terminal window). For this class we will use **Jupyter Notebook** (pronounced \"Jew-pi-ter\"), an interactive environment that's hosted online so you don't have to install anything to run Python code!\n",
        "\n",
        "---\n",
        "\n",
        "## Getting Started\n",
        "\n",
        "1. Navigate to **[https://pstat5a.lsit.ucsb.edu](https://pstat5a.lsit.ucsb.edu/hub/login)**   \n",
        "   - If you are using a personal computer, you may want to bookmark this page for easy access later.\n",
        "\n",
        "2. Click **Sign in with your UCSB NetID**, and sign in.  \n",
        "   ![](/files/labs/lab1/img/sign_in.png){width=500px}\n",
        "\n",
        "3. Navigate to the **Labs** folder on the left-hand side of the JupyterHub interface. \n",
        "   ![](/files/labs/lab1/img/navigate_to_labs.png){width=500px}\n",
        "\n",
        "4. Under **Notebook**, click **Python 3 (ipykernel)**.  \n",
        "   ![](/files/labs/lab1/img/select_notebook.png){width=500px}\n",
        "\n",
        "Congratulations, you have just made your first Jupyter notebook! Now, it's time for our first task:\n",
        "\n",
        "---\n",
        "\n",
        "## Task 1: Rename Your Notebook\n",
        "\n",
        "::: {.task-box}\n",
        "1. Find your new notebook in the left-hand file browser (it will be named `Untitled` or `Untitled1` by default).  \n",
        "2. Right-click the notebook and select → **Rename**.  \n",
        "   ![](/files/labs/lab1/img/right_click_to_rename.png){width=500px}\n",
        "3. Rename it to `Lab1` and hit **Enter**.  \n",
        "   ![](/files/labs/lab1/img/rename_notebook.png){width=500px}\n",
        "4. Watch the title bar update to `Lab1.ipynb`.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## The JupyterHub Environment\n",
        "\n",
        "Jupyter notebooks are built from **cells**—the shaded boxes you see on screen. Here's how to work with them:\n",
        "\n",
        "### Cell Activation\n",
        "\n",
        "- **Inactive cell**  \n",
        "  - Appearance: light grey background  \n",
        "  - Action: click anywhere inside the cell to activate  \n",
        "  ![](/files/labs/lab1/img/cell_color.png){width=400px}\n",
        "\n",
        "- **Active cell**  \n",
        "  - Appearance: colored border (green or blue)  \n",
        "  - You can now type code or Markdown here.   \n",
        "\n",
        "::: {.callout-tip}\n",
        "Only the **active** cell runs when you press Run.\n",
        ":::\n",
        "\n",
        "### Running Cells\n",
        "\n",
        "- Click the ▶️ **Run** button in the toolbar  \n",
        "- Or press **Shift + Enter** to run and advance to the next cell  \n",
        "![](/files/labs/lab1/img/run_button.png){width=400px}\n",
        "\n",
        "---\n",
        "\n",
        "## Cell Types\n",
        "\n",
        "You can switch any cell between **Code** and **Markdown**:\n",
        "\n",
        "### Code Cells\n",
        "\n",
        "- **Purpose:** write and execute Python code  \n",
        "- **Select:**  \n",
        "  1. Click the cell  \n",
        "  2. Choose **Code** from the toolbar dropdown  \n",
        "     ![](/files/labs/lab1/img/change_cell_type.png){width=400px}  \n",
        "- **Run:** ▶️ Run button or **Shift + Enter**  \n",
        "\n",
        "### Markdown Cells\n",
        "\n",
        "- **Purpose:** write formatted text, headings, lists, math, and embed images  \n",
        "- **Select:**  \n",
        "  1. Click the cell  \n",
        "  2. Choose **Markdown** from the toolbar dropdown  \n",
        "     ![](/files/labs/lab1/img/markdown_cell.png){width=400px} \n",
        "- **Render:** ▶️ Run button or **Shift + Enter**  \n",
        "\n",
        "---\n",
        "\n",
        "## Task 2: Markdown and Code Cells\n",
        "\n",
        "::: {.task-box}\n",
        "1. Click into the initial cell (marked by `[ ]` on the left).  \n",
        "2. In the toolbar dropdown (that currently says **Code**), select **Markdown**.  \n",
        "3. Copy-paste the following (including the `#`):\n",
        "\n",
        "   ```markdown\n",
        "   # Task 2\n",
        "   ```\n",
        "\n",
        "4. Run the cell. You should see a large heading that says \"Task 2\".\n",
        "5. Add a new cell below (use the + button or menu).\n",
        "6. Make sure the new cell is a **Code** cell.\n",
        "7. Enter the following code and run it:\n",
        "\n",
        "   ```python\n",
        "   2 + 2\n",
        "   ```\n",
        "\n",
        "**Expected Output:**\n",
        "```\n",
        "4\n",
        "```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 3: Understanding Errors\n",
        "\n",
        "::: {.task-box}\n",
        "1. Add a new Markdown cell with the heading:\n",
        "\n",
        "   ```markdown\n",
        "   # Task 3\n",
        "   ```\n",
        "\n",
        "2. Add a new Code cell and enter the following (intentional error):\n",
        "\n",
        "   ```python\n",
        "   2 plus 2\n",
        "   ```\n",
        "\n",
        "3. Run the cell. You should see an error message like:\n",
        "\n",
        "```\n",
        "  Cell In[2], line 1\n",
        "    2 plus 2\n",
        "      ^^^^\n",
        "SyntaxError: invalid syntax\n",
        "```\n",
        "\n",
        "**Explanation:**\n",
        "- Python doesn't understand `plus` as an operator\n",
        "- The `^^^^` points to where Python detected the problem\n",
        "- The error message tells us it's a `SyntaxError` meaning invalid Python syntax\n",
        "- In Python, we must use `+` for addition, not the word `plus`\n",
        "\n",
        "4. Correct the code to:\n",
        "\n",
        "   ```python\n",
        "   2 + 2  # This works correctly\n",
        "   ```\n",
        "\n",
        "5. Run the corrected cell. You should see:\n",
        "```\n",
        "4\n",
        "```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 4: Math in Python\n",
        "\n",
        "::: {.task-box}\n",
        "1. In a new Code cell, compute the following:\n",
        "\n",
        "   $\\frac{2 + 3}{4 + 5^6}$\n",
        "\n",
        "   ```python\n",
        "   (2 + 3) / (4 + 5**6)\n",
        "   ```\n",
        "\n",
        "2. Break it down step by step:\n",
        "\n",
        "   ```python\n",
        "   numerator = 2 + 3\n",
        "   print(f\"Numerator: {numerator}\")\n",
        "\n",
        "   denominator = 4 + 5**6\n",
        "   print(f\"Denominator: {denominator}\")\n",
        "\n",
        "   result = numerator / denominator\n",
        "   print(f\"Final result: {result}\")\n",
        "   ```\n",
        "\n",
        "**Expected Output:**\n",
        "```\n",
        "Numerator: 5\n",
        "Denominator: 15629\n",
        "Final result: 0.00032002048131121975\n",
        "```\n",
        "\n",
        "3. Try this one as well:\n",
        "\n",
        "   $(1 - 3 \\cdot 4^5)^6$\n",
        "\n",
        "   ```python\n",
        "   (1 - 3 * 4**5)**6\n",
        "   ```\n",
        "\n",
        "   Step by step:\n",
        "   ```python\n",
        "   inner_exponent = 4**5\n",
        "   print(f\"4^5 = {inner_exponent}\")\n",
        "\n",
        "   multiplication = 3 * inner_exponent\n",
        "   print(f\"3 * 4^5 = {multiplication}\")\n",
        "\n",
        "   subtraction = 1 - multiplication\n",
        "   print(f\"1 - 3 * 4^5 = {subtraction}\")\n",
        "\n",
        "   final_result = subtraction**6\n",
        "   print(f\"(1 - 3 * 4^5)^6 = {final_result}\")\n",
        "   ```\n",
        "\n",
        "**Expected Output:**\n",
        "```\n",
        "4^5 = 1024\n",
        "3 * 4^5 = 3072\n",
        "1 - 3 * 4^5 = -3071\n",
        "(1 - 3 * 4^5)^6 = 729071973630476174071\n",
        "```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 5: Importing Modules\n",
        "\n",
        "::: {.task-box}\n",
        "1. In a new Code cell, try running:\n",
        "\n",
        "   ```python\n",
        "   sin(1)\n",
        "   ```\n",
        "\n",
        "   You should see:\n",
        "   ```\n",
        "   NameError: name 'sin' is not defined\n",
        "   ```\n",
        "\n",
        "2. To fix this, import the math module:\n",
        "\n",
        "   ```python\n",
        "   from math import *\n",
        "   sin(1)\n",
        "   ```\n",
        "\n",
        "   **Expected Output:**\n",
        "   ```\n",
        "   0.8414709848078965\n",
        "   ```\n",
        "\n",
        "3. Alternative ways to import and use `sin`:\n",
        "\n",
        "   ```python\n",
        "   # Method 1: Import specific function\n",
        "   from math import sin\n",
        "   print(sin(1))\n",
        "\n",
        "   # Method 2: Import entire module\n",
        "   import math\n",
        "   print(math.sin(1))\n",
        "\n",
        "   # Method 3: Import with alias\n",
        "   import math as m\n",
        "   print(m.sin(1))\n",
        "   ```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 6: Case Sensitivity\n",
        "\n",
        "::: {.task-box}\n",
        "1. Assign a value to a variable:\n",
        "\n",
        "   ```python\n",
        "   my_variable = 5\n",
        "   ```\n",
        "\n",
        "2. Try printing with the wrong capitalization:\n",
        "\n",
        "   ```python\n",
        "   print(My_variable)\n",
        "   ```\n",
        "   You should see:\n",
        "   ```\n",
        "   NameError: name 'My_variable' is not defined\n",
        "   ```\n",
        "\n",
        "3. Print with the correct capitalization:\n",
        "\n",
        "   ```python\n",
        "   print(my_variable)\n",
        "   ```\n",
        "   Output:\n",
        "   ```\n",
        "   5\n",
        "   ```\n",
        "\n",
        "4. Try these examples to see how Python treats variable names:\n",
        "\n",
        "   ```python\n",
        "   my_variable = 5\n",
        "   My_variable = 10\n",
        "   MY_VARIABLE = 15\n",
        "   my_Variable = 20\n",
        "\n",
        "   print(f\"my_variable = {my_variable}\")\n",
        "   print(f\"My_variable = {My_variable}\")\n",
        "   print(f\"MY_VARIABLE = {MY_VARIABLE}\")\n",
        "   print(f\"my_Variable = {my_Variable}\")\n",
        "   ```\n",
        "   Output:\n",
        "   ```\n",
        "   my_variable = 5\n",
        "   My_variable = 10\n",
        "   MY_VARIABLE = 15\n",
        "   my_Variable = 20\n",
        "   ```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 7: Commenting Code\n",
        "\n",
        "::: {.task-box}\n",
        "Add comments to your code from previous tasks. For example:\n",
        "\n",
        "```python\n",
        "# Task 2: Basic arithmetic\n",
        "2 + 2  # Adding two integers\n",
        "\n",
        "# Task 4: Complex mathematical expression\n",
        "# Calculate (2 + 3) / (4 + 5^6)\n",
        "numerator = 2 + 3  # Sum of 2 and 3\n",
        "denominator = 4 + 5**6  # 4 plus 5 to the 6th power\n",
        "result = numerator / denominator  # Final division\n",
        "print(f\"Result: {result}\")\n",
        "\n",
        "# Task 5: Import math module and use sin function\n",
        "from math import *  # Import all math functions\n",
        "angle_in_radians = 1  # Input angle in radians\n",
        "sine_value = sin(angle_in_radians)  # Calculate sine\n",
        "print(f\"sin(1) = {sine_value}\")\n",
        "\n",
        "# Task 6: Variable assignment with proper naming\n",
        "my_variable = 5  # Store the value 5 in my_variable\n",
        "print(my_variable)  # Display the value\n",
        "\n",
        "\"\"\"\n",
        "This is a multi-line comment.\n",
        "It can span multiple lines and is useful\n",
        "for longer explanations or documentation.\n",
        "\"\"\"\n",
        "```\n",
        "\n",
        "**Good commenting practices:**\n",
        "- Explain what the code does\n",
        "- Clarify complex calculations\n",
        "- Document variable purposes\n",
        "- Use both inline (`#`) and block (`\"\"\"`) comments\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 8: Data Types\n",
        "\n",
        "::: {.task-box}\n",
        "1. Use the `type()` function to check data types:\n",
        "\n",
        "   ```python\n",
        "   print(type(1))           # Output: <class 'int'>\n",
        "   print(type(1.1))         # Output: <class 'float'>\n",
        "   print(type(\"hello\"))     # Output: <class 'str'>\n",
        "   ```\n",
        "\n",
        "2. Try more examples:\n",
        "\n",
        "   ```python\n",
        "   print(\"Integer:\", type(42))\n",
        "   print(\"Float:\", type(3.14159))\n",
        "   print(\"String with single quotes:\", type('Python'))\n",
        "   print(\"String with double quotes:\", type(\"Programming\"))\n",
        "   print(\"Boolean True:\", type(True))\n",
        "   print(\"Boolean False:\", type(False))\n",
        "   print(\"List:\", type([1, 2, 3]))\n",
        "   print(\"Tuple:\", type((1, 2, 3)))\n",
        "   print(\"Dictionary:\", type({\"key\": \"value\"}))\n",
        "   ```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Task 9: Variables and Calculations\n",
        "\n",
        "::: {.task-box}\n",
        "1. Add a Markdown cell:\n",
        "\n",
        "   ```markdown\n",
        "   # Task 9\n",
        "   ```\n",
        "\n",
        "2. Assign values to variables:\n",
        "\n",
        "   ```python\n",
        "   course = \"PSTAT 5A\"\n",
        "   num_sections = 4\n",
        "   section_capacity = 25\n",
        "   ```\n",
        "\n",
        "3. Update `num_sections`:\n",
        "\n",
        "   ```python\n",
        "   num_sections = num_sections + 1\n",
        "   print(f\"Updated number of sections: {num_sections}\")\n",
        "   # Alternative: num_sections += 1\n",
        "   # Alternative: num_sections = 4 + 1\n",
        "   ```\n",
        "\n",
        "4. Predict and test expressions:\n",
        "\n",
        "   ```python\n",
        "   print(type(course))           # Expected: <class 'str'>\n",
        "   print(type(num_sections))     # Expected: <class 'int'>\n",
        "   print(num_sections * section_capacity) # Expected: 125\n",
        "   ```\n",
        "\n",
        "5. Calculate course capacity:\n",
        "\n",
        "   ```python\n",
        "   course_capacity = num_sections * section_capacity\n",
        "   print(f\"Course: {course}\")\n",
        "   print(f\"Number of sections: {num_sections}\")\n",
        "   print(f\"Capacity per section: {section_capacity}\")\n",
        "   print(f\"Total course capacity: {course_capacity}\")\n",
        "   ```\n",
        "\n",
        "6. Complete solution with comments:\n",
        "\n",
        "   ```python\n",
        "   # Step 2: Initial variable assignments\n",
        "   course = \"PSTAT 5A\"          # Course name as string\n",
        "   num_sections = 4             # Initial number of sections\n",
        "   section_capacity = 25        # Maximum students per section\n",
        "\n",
        "   # Step 3: A new section has been added\n",
        "   num_sections = num_sections + 1  # Increment by 1, now equals 5\n",
        "\n",
        "   # Step 4: Testing expressions with predictions\n",
        "   print(\"Testing type() function:\")\n",
        "   print(f\"type(course) = {type(course)}\")  # Expected: <class 'str'>\n",
        "   print(f\"type(num_sections) = {type(num_sections)}\")  # Expected: <class 'int'>\n",
        "   print(f\"num_sections * section_capacity = {num_sections * section_capacity}\")  # Expected: 125\n",
        "\n",
        "   # Step 5: Calculate total course capacity\n",
        "   course_capacity = num_sections * section_capacity  # 5 × 25 = 125\n",
        "   print(f\"\\nFinal Results:\")\n",
        "   print(f\"Course: {course}\")\n",
        "   print(f\"Total sections: {num_sections}\")\n",
        "   print(f\"Capacity per section: {section_capacity}\")\n",
        "   print(f\"Total course capacity: {course_capacity} students\")\n",
        "   ```\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Summary of Key Concepts Learned\n",
        "\n",
        "- **JupyterHub Environment:** Creating and renaming notebooks, understanding cell types (Code vs Markdown), running cells, navigating the interface\n",
        "- **Python Basics:** Arithmetic operations, order of operations, error reading\n",
        "- **Variables and Data Types:** Assignment, case sensitivity, types, `type()`\n",
        "- **Modules and Imports:** Import syntax, using functions, math module\n",
        "- **Comments and Documentation:** Inline and block comments, purpose\n",
        "- **Programming Best Practices:** Descriptive variable names, comments, incremental testing, reading errors, using variables\n",
        "\n",
        "---\n",
        "\n",
        "## Next Steps\n",
        "\n",
        "In Lab 2, you'll learn about:\n",
        "- Python functions and how to create them\n",
        "- Data structures (lists, dictionaries)\n",
        "- Control flow (if statements, loops)\n",
        "- More advanced programming concepts\n",
        "\n",
        "**Great work completing Lab 1!** You now have the foundation needed for statistical programming in Python.\n"
      ],
      "id": "f6189a73"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/narjesmathlouthi/Desktop/PSTAT5A/web/PSTAT5A/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}