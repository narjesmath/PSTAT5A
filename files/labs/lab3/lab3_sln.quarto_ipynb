{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab 3: Descriptive Statistics - SOLUTIONS\"\n",
        "subtitle: \"PSTAT 5A - Summer Session A 2025 - Solution Key\"\n",
        "author: \"Narjes Mathlouthi\"\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    logo: /img/logo.png\n",
        "    footer: \"Descriptive Statistics - Lab3 Solutions © 2025\"\n",
        "    number-sections: false\n",
        "    code-fold: false\n",
        "    theme: cosmo\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "    execute:\n",
        "    warning: false\n",
        "date: today\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "::: {.column-margin}\n",
        "![](/img/logo.png){width=100px}\n",
        ":::\n",
        "\n",
        "# Lab 3 Solutions\n",
        "\n",
        "## Task 1 Solutions\n",
        "\n",
        "::: {.task-box}\n",
        "**Task 1 Solutions:**\n",
        "\n",
        "1. Import the `numpy` module as `np`, and check that `np.sin(0)` returns a value of 0.\n",
        "   \n",
        "2. Import the `datascience` module as `ds`, and check the table creation works correctly.\n",
        ":::"
      ],
      "id": "bf74f462"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 1\n",
        "\n",
        "# Part 1: Import numpy and test sin function\n",
        "import numpy as np\n",
        "print(\"np.sin(0) =\", np.sin(0))\n",
        "\n",
        "# Part 2: Import datascience and test table creation\n",
        "import datascience as ds\n",
        "\n",
        "table_result = ds.Table().with_columns(\n",
        "    \"Col1\", [1, 2, 3],\n",
        "    \"Col2\", [2, 3, 4]\n",
        ")\n",
        "print(table_result)\n"
      ],
      "id": "b07123a8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 2 Solutions\n",
        "::: {.task-box}\n",
        "Task 2 Solutions:\n",
        "Create x_list and x_array containing elements 1, 2, and 3, then compute mean and median.\n",
        ":::"
      ],
      "id": "303a45f9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 2\n",
        "\n",
        "# Create x_list as a regular Python list\n",
        "x_list = [1, 2, 3]\n",
        "\n",
        "# Create x_array as a numpy array\n",
        "x_array = np.array([1, 2, 3])\n",
        "\n",
        "# Compute mean and median for x_list\n",
        "print(\"x_list mean:\", np.mean(x_list))\n",
        "print(\"x_list median:\", np.median(x_list))\n",
        "\n",
        "# Compute mean and median for x_array\n",
        "print(\"x_array mean:\", np.mean(x_array))\n",
        "print(\"x_array median:\", np.median(x_array))\n",
        "\n",
        "# Verify they give the same results\n",
        "print(\"\\nBoth give the same results!\")"
      ],
      "id": "7b5d79c0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 3 Solutions\n",
        "::: {.task-box}\n",
        "Task 3 Solutions:\n",
        "Look up np.ptp() function and apply it to the data.\n",
        ":::\n",
        "Answer: The np.ptp() function computes the range of values (maximum - minimum) along an axis.\n",
        "PTP stands for \"Peak To Peak\" - the difference between the maximum peak and minimum peak values."
      ],
      "id": "ebe5736b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 3\n",
        "\n",
        "# Apply np.ptp() to x_list and x_array from Task 2\n",
        "print(\"Range of x_list using np.ptp():\", np.ptp(x_list))\n",
        "print(\"Range of x_array using np.ptp():\", np.ptp(x_array))\n",
        "\n",
        "# Manual verification: max - min\n",
        "print(\"Manual calculation: max - min =\", max(x_list) - min(x_list))\n",
        "\n",
        "# Both should give the same result: 3 - 1 = 2"
      ],
      "id": "b1ba8241",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 4 Solutions\n",
        "::: {.task-box}\n",
        "Task 4 Solutions:\n",
        "Compute standard deviation by hand and compare with np.std() function.\n",
        ":::"
      ],
      "id": "80e6ee05"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 4\n",
        "\n",
        "x_list = [1, 2, 3]  # From Task 2\n",
        "\n",
        "# Part (a): Calculate sample standard deviation by hand (using n-1)\n",
        "# Mean = (1 + 2 + 3) / 3 = 2\n",
        "mean_x = 2\n",
        "\n",
        "# Sample variance = [(1-2)² + (2-2)² + (3-2)²] / (3-1)\n",
        "# = [1 + 0 + 1] / 2 = 2/2 = 1\n",
        "sample_variance = ((1-2)**2 + (2-2)**2 + (3-2)**2) / (3-1)\n",
        "sample_std = np.sqrt(sample_variance)\n",
        "\n",
        "print(\"Sample standard deviation (by hand):\", sample_std)\n",
        "print(\"Sample standard deviation (by hand):\", np.sqrt(1))  # Should be 1.0\n",
        "\n",
        "# Part (b): Compare with np.std(x_list)\n",
        "print(\"np.std(x_list) default:\", np.std(x_list))\n",
        "print(\"Does this match part (a)?\", np.isclose(sample_std, np.std(x_list)))\n",
        "\n",
        "# Part (c): Calculate population standard deviation by hand (using n)\n",
        "# Population variance = [(1-2)² + (2-2)² + (3-2)²] / 3\n",
        "# = [1 + 0 + 1] / 3 = 2/3\n",
        "population_variance = ((1-2)**2 + (2-2)**2 + (3-2)**2) / 3\n",
        "population_std = np.sqrt(population_variance)\n",
        "\n",
        "print(\"Population standard deviation (by hand):\", population_std)\n",
        "print(\"This matches np.std(x_list):\", np.isclose(population_std, np.std(x_list)))\n",
        "\n",
        "# Part (d): Use ddof=1 to get sample standard deviation\n",
        "print(\"np.std(x_list, ddof=1):\", np.std(x_list, ddof=1))\n",
        "print(\"This matches part (a):\", np.isclose(sample_std, np.std(x_list, ddof=1)))"
      ],
      "id": "4d67b082",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Optional Task Solutions\n",
        "::: {.task-box}\n",
        "Optional Task Solutions:\n",
        "Create a custom IQR function.\n",
        ":::"
      ],
      "id": "c8b65692"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Optional Task\n",
        "\n",
        "def calculate_iqr(data):\n",
        "    \"\"\"\n",
        "    Calculate the Interquartile Range (IQR) of a dataset.\n",
        "    \n",
        "    Parameter:\n",
        "    data - a list or array of numbers\n",
        "    \n",
        "    Returns:\n",
        "    The IQR value (Q3 - Q1)\n",
        "    \"\"\"\n",
        "    # Calculate the IQR using the numpy method we learned\n",
        "    iqr_value = np.diff(np.percentile(data, [25, 75]))[0]\n",
        "    return iqr_value\n",
        "\n",
        "# Test the function\n",
        "test_scores = [72, 85, 90, 78, 92, 88, 76, 94, 82, 89, 91, 77]\n",
        "\n",
        "# Use our custom function\n",
        "my_iqr = calculate_iqr(test_scores)\n",
        "print(f\"IQR using our function: {my_iqr}\")\n",
        "\n",
        "# Compare with the direct method\n",
        "direct_iqr = np.diff(np.percentile(test_scores, [25, 75]))[0]\n",
        "print(f\"IQR using direct method: {direct_iqr}\")\n",
        "\n",
        "# They should be the same!\n",
        "print(f\"Results match: {np.isclose(my_iqr, direct_iqr)}\")"
      ],
      "id": "2e9a363c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 5 Solutions\n",
        "::: {.task-box}\n",
        "Task 5 Solutions:\n",
        "Create boxplots with various customizations.\n",
        ":::"
      ],
      "id": "6975fad3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 5\n",
        "\n",
        "# Import matplotlib for plotting\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "\n",
        "# Step 1: Create the list y\n",
        "y = [1, 2, 3, 4, 5, 4, 3, 5, 4, 1, 2]\n",
        "\n",
        "# Step 2: Create basic vertical boxplot\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.subplot(2, 2, 1)\n",
        "plt.boxplot(y)\n",
        "plt.title(\"Basic Vertical Boxplot\")\n",
        "\n",
        "# Step 3: Create horizontal boxplot\n",
        "plt.subplot(2, 2, 2)\n",
        "plt.boxplot(y, orientation='horizontal')\n",
        "plt.title(\"Horizontal Boxplot\")\n",
        "\n",
        "# Step 4: Add color\n",
        "plt.subplot(2, 2, 3)\n",
        "plt.boxplot(y, orientation='horizontal', patch_artist=True, \n",
        "            boxprops=dict(facecolor=\"aquamarine\"))\n",
        "plt.title(\"Colored Horizontal Boxplot\")\n",
        "\n",
        "# Step 5: Final version with title\n",
        "plt.subplot(2, 2, 4)\n",
        "plt.boxplot(y, orientation='horizontal', patch_artist=True, \n",
        "            boxprops=dict(facecolor=\"aquamarine\"))\n",
        "plt.title(\"My First Python Boxplot\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Answer the IQR question\n",
        "print(\"\\nBased on the boxplot:\")\n",
        "print(\"Q1 (25th percentile) appears to be around 2\")\n",
        "print(\"Q3 (75th percentile) appears to be around 4.5\")\n",
        "print(\"So IQR ≈ 4.5 - 2 = 2.5\")\n",
        "\n",
        "# Verify with Python calculation\n",
        "iqr_calculated = np.diff(np.percentile(y, [25, 75]))[0]\n",
        "print(f\"\\nActual IQR calculated by Python: {iqr_calculated}\")"
      ],
      "id": "81714b07",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 5\n",
        "\n",
        "# Import matplotlib for plotting\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "\n",
        "# Step 1: Create the list y\n",
        "y = [1, 2, 3, 4, 5, 4, 3, 5, 4, 1, 2]\n",
        "\n",
        "# Step 2: Create basic vertical boxplot\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.subplot(2, 2, 1)\n",
        "plt.boxplot(y)\n",
        "plt.title(\"Basic Vertical Boxplot\")\n",
        "\n",
        "# Step 3: Create horizontal boxplot\n",
        "plt.subplot(2, 2, 2)\n",
        "plt.boxplot(y, orientation='horizontal')\n",
        "plt.title(\"Horizontal Boxplot\")\n",
        "\n",
        "# Step 4: Add color\n",
        "plt.subplot(2, 2, 3)\n",
        "plt.boxplot(y, orientation='horizontal', patch_artist=True, \n",
        "            boxprops=dict(facecolor=\"aquamarine\"))\n",
        "plt.title(\"Colored Horizontal Boxplot\")\n",
        "\n",
        "# Step 5: Final version with title\n",
        "plt.subplot(2, 2, 4)\n",
        "plt.boxplot(y, orientation='horizontal', patch_artist=True, \n",
        "            boxprops=dict(facecolor=\"aquamarine\"))\n",
        "plt.title(\"My First Python Boxplot\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Answer the IQR question\n",
        "print(\"\\nBased on the boxplot:\")\n",
        "print(\"Q1 (25th percentile) appears to be around 2\")\n",
        "print(\"Q3 (75th percentile) appears to be around 4.5\")\n",
        "print(\"So IQR ≈ 4.5 - 2 = 2.5\")\n",
        "\n",
        "# Verify with Python calculation\n",
        "iqr_calculated = np.diff(np.percentile(y, [25, 75]))[0]\n",
        "print(f\"\\nActual IQR calculated by Python: {iqr_calculated}\")\n"
      ],
      "id": "a315266b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 6 Solutions\n",
        "::: {.task-box}\n",
        "Task 6 Solutions:\n",
        "Create a histogram with appropriate bins and labels.\n",
        ":::"
      ],
      "id": "55da58ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 6\n",
        "\n",
        "y = [1, 2, 3, 4, 5, 4, 3, 5, 4, 1, 2]  # From Task 5\n",
        "\n",
        "# Create histogram with appropriate bins\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Method 1: Using explicit bin edges\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(y, bins=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5], rwidth=0.9, edgecolor='black')\n",
        "plt.xlabel('Values')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of y values (Method 1)')\n",
        "\n",
        "# Method 2: Using range and bins parameters\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(y, bins=5, range=(0.5, 5.5), rwidth=0.9, edgecolor='black')\n",
        "plt.xlabel('Values')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of y values (Method 2)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Show frequency count for verification\n",
        "unique, counts = np.unique(y, return_counts=True)\n",
        "print(\"Value frequencies:\")\n",
        "for value, count in zip(unique, counts):\n",
        "    print(f\"Value {value}: appears {count} times\")\n"
      ],
      "id": "e4c7d98f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 7 Solutions\n",
        "::: {.task-box}\n",
        "Task 7 Solutions:\n",
        "Create a scatterplot with proper labels.\n",
        ":::"
      ],
      "id": "02d7608c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 7\n",
        "\n",
        "# Part 1: Copy and run the provided code\n",
        "np.random.seed(5)\n",
        "\n",
        "x1 = np.random.normal(0, 1, 100)\n",
        "x2 = x1 + np.random.normal(0, 1, 100)\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.scatter(x1, x2)\n",
        "\n",
        "# Part 2: Add labels and title\n",
        "plt.xlabel('x1')\n",
        "plt.ylabel('x2')\n",
        "plt.title('My First Python Scatterplot')\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.show()\n",
        "\n",
        "# Additional information about the plot\n",
        "print(f\"Number of points plotted: {len(x1)}\")\n",
        "print(f\"x1 range: {x1.min():.2f} to {x1.max():.2f}\")\n",
        "print(f\"x2 range: {x2.min():.2f} to {x2.max():.2f}\")"
      ],
      "id": "f6719580",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Task 8 Solutions\n",
        "::: {.task-box}\n",
        "Task 8 Solutions:\n",
        "Plot the function f(x) = x - x²sin(x) between x = -10 and x = 10.\n",
        ":::"
      ],
      "id": "c4e83d62"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Solution to Task 8\n",
        "\n",
        "# Create x values using linspace for a smooth plot\n",
        "x = np.linspace(-10, 10, 1000)  # 1000 points for smoothness\n",
        "\n",
        "# Define the function f(x) = x - x²sin(x)\n",
        "y = x - x**2 * np.sin(x)\n",
        "\n",
        "# Create the plot with red color\n",
        "plt.figure(figsize=(12, 8))\n",
        "plt.plot(x, y, color='red', linewidth=2)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('f(x)')\n",
        "plt.title('Plot of f(x) = x - x²sin(x)')\n",
        "plt.grid(True, alpha=0.3)  # Add a light grid for better readability\n",
        "plt.show()\n",
        "\n",
        "# Show what happens with fewer points for comparison\n",
        "plt.figure(figsize=(12, 4))\n",
        "\n",
        "# Fewer points - not smooth\n",
        "plt.subplot(1, 2, 1)\n",
        "x_few = np.linspace(-10, 10, 20)\n",
        "y_few = x_few - x_few**2 * np.sin(x_few)\n",
        "plt.plot(x_few, y_few, color='blue', linewidth=2, marker='o')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('f(x)')\n",
        "plt.title('With 20 points (not smooth)')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Many points - smooth\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(x, y, color='red', linewidth=2)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('f(x)')\n",
        "plt.title('With 1000 points (smooth)')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"Notice how more points create a smoother curve!\")"
      ],
      "id": "93238a7b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Key Learning Points\n",
        "\n",
        "### Key Functions Learned:\n",
        "\n",
        "- `np.mean()` - Calculate mean\n",
        "\n",
        "- `np.median()` - Calculate median\n",
        "\n",
        "- `np.std()` - Calculate standard deviation (use `ddof=1` for sample std)\n",
        "\n",
        "- `np.ptp()` - Calculate range (peak-to-peak)\n",
        "\n",
        "- `np.percentile()` - Calculate percentiles\n",
        "  \n",
        "- `np.diff(np.percentile(data, [25,75]))[0]` - Calculate IQR\n",
        "\n",
        "## Key Plotting Functions:\n",
        "\n",
        "- `plt.boxplot()` - Create boxplots\n",
        "  \n",
        "- `plt.hist()` - Create histograms\n",
        "  \n",
        "- `plt.scatter()` - Create scatterplots\n",
        "\n",
        "- `plt.plot()` - Create line plots\n",
        "\n",
        "- `plt.xlabel()`, `plt.ylabel()`, `plt.title()` - Add labels\n",
        "\n",
        "## Important Concepts:\n",
        "\n",
        "- Sample vs Population Standard Deviation: Use ddof=1 for sample statistics\n",
        "\n",
        "- Function Parameters: Many plotting functions accept optional parameters for customization\n",
        "\n",
        "- Smooth Plotting: Use more points in np.linspace() for smoother function plots\n",
        "\n",
        "- Module Importing: import module as abbreviation saves typing\n",
        "\n",
        "This concludes Lab 3 Solutions!"
      ],
      "id": "f6b56dd2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/narjesmathlouthi/Desktop/PSTAT5A/web/PSTAT5A/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}