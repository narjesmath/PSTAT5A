{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab 4 Solutions: Discrete Random Variables and Distributions\"\n",
        "subtitle: \"PSTAT 5A - Summer Session A 2025\"\n",
        "author: \"Solutions by: Instructor\"\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    number-sections: false\n",
        "    code-fold: false\n",
        "    theme: cosmo\n",
        "date: today\n",
        "jupyter: pstat5a\n",
        "---\n",
        "\n",
        "# Setup"
      ],
      "id": "c39bbb75"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "import pandas as pd\n",
        "\n",
        "# Set up plotting\n",
        "%matplotlib inline\n",
        "plt.style.use('seaborn-v0_8-whitegrid')"
      ],
      "id": "fc37ad0b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 1 Solution\n",
        "\n",
        "**Problem:** Consider a biased coin where P(Heads) = 0.7 and P(Tails) = 0.3. Let X be a random variable where X = 1 for Heads and X = 0 for Tails."
      ],
      "id": "c2422026"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 1 Solution\n",
        "# 1. Create lists for values and probabilities\n",
        "coin_values = [0, 1]  # 0 for Tails, 1 for Heads\n",
        "coin_probabilities = [0.3, 0.7]  # P(Tails) = 0.3, P(Heads) = 0.7\n",
        "\n",
        "print(\"Coin Values (X):\", coin_values)\n",
        "print(\"Probabilities:\", coin_probabilities)\n",
        "\n",
        "# 2. Verify probabilities sum to 1\n",
        "prob_sum = sum(coin_probabilities)\n",
        "print(f\"Sum of probabilities: {prob_sum}\")\n",
        "print(f\"Probabilities sum to 1: {prob_sum == 1.0}\")\n",
        "\n",
        "# 3. Create bar plot\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(coin_values, coin_probabilities, alpha=0.7, color='lightcoral', edgecolor='black', width=0.6)\n",
        "plt.xlabel('Value (X)')\n",
        "plt.ylabel('Probability')\n",
        "plt.title('PMF of Biased Coin (P(Heads) = 0.7)')\n",
        "plt.xticks([0, 1], ['Tails (0)', 'Heads (1)'])\n",
        "plt.ylim(0, 0.8)\n",
        "plt.show()"
      ],
      "id": "5ba1ccdf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 2 Solution\n",
        "\n",
        "**Problem:** Calculate the expected value and variance for the biased coin from Task 1."
      ],
      "id": "8e5975f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 2 Solution\n",
        "# Expected value calculation: E[X] = Σ k * P(X = k)\n",
        "expected_value = sum(k * p for k, p in zip(coin_values, coin_probabilities))\n",
        "print(f\"Expected value E[X]: {expected_value}\")\n",
        "\n",
        "# Step-by-step calculation\n",
        "print(\"\\nStep-by-step calculation:\")\n",
        "print(f\"E[X] = 0 × P(X=0) + 1 × P(X=1)\")\n",
        "print(f\"E[X] = 0 × 0.3 + 1 × 0.7 = {0*0.3 + 1*0.7}\")\n",
        "\n",
        "# Variance calculation: Var(X) = E[X²] - (E[X])²\n",
        "# First calculate E[X²]\n",
        "expected_x_squared = sum(k**2 * p for k, p in zip(coin_values, coin_probabilities))\n",
        "variance = expected_x_squared - expected_value**2\n",
        "\n",
        "print(f\"\\nVariance calculation:\")\n",
        "print(f\"E[X²] = 0² × 0.3 + 1² × 0.7 = {0**2 * 0.3 + 1**2 * 0.7}\")\n",
        "print(f\"Var(X) = E[X²] - (E[X])² = {expected_x_squared} - ({expected_value})² = {variance}\")\n",
        "print(f\"Standard deviation: {np.sqrt(variance):.4f}\")\n",
        "\n",
        "# Verify using theoretical formula for Bernoulli: Var(X) = p(1-p)\n",
        "theoretical_variance = 0.7 * (1 - 0.7)\n",
        "print(f\"\\nVerification using Bernoulli formula: Var(X) = p(1-p) = 0.7 × 0.3 = {theoretical_variance}\")"
      ],
      "id": "e162cdde",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 3 Solution\n",
        "\n",
        "**Problem:** A basketball player makes 70% of their free throws. They take 15 free throws."
      ],
      "id": "cd5c991e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 3 Solution\n",
        "# This is a binomial distribution with n=15, p=0.7\n",
        "n = 15\n",
        "p = 0.7\n",
        "\n",
        "binom = stats.binom(n, p)\n",
        "\n",
        "# 1. Probability of making exactly 10 free throws\n",
        "prob_exactly_10 = binom.pmf(10)\n",
        "print(f\"1. P(X = 10) = {prob_exactly_10:.4f}\")\n",
        "\n",
        "# 2. Probability of making at least 12 free throws\n",
        "prob_at_least_12 = 1 - binom.cdf(11)  # P(X ≥ 12) = 1 - P(X ≤ 11)\n",
        "# Alternative: prob_at_least_12 = sum(binom.pmf(k) for k in range(12, 16))\n",
        "print(f\"2. P(X ≥ 12) = {prob_at_least_12:.4f}\")\n",
        "\n",
        "# 3. Expected number of free throws made\n",
        "expected_makes = binom.mean()\n",
        "print(f\"3. Expected number of makes: {expected_makes}\")\n",
        "print(f\"   (Theoretical: n×p = {n}×{p} = {n*p})\")\n",
        "\n",
        "# 4. Create bar plot showing PMF\n",
        "k_values = range(0, n+1)\n",
        "probabilities = [binom.pmf(k) for k in k_values]\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.bar(k_values, probabilities, alpha=0.7, color='lightgreen', edgecolor='black')\n",
        "plt.xlabel('Number of Successful Free Throws')\n",
        "plt.ylabel('Probability')\n",
        "plt.title(f'Binomial Distribution: Basketball Free Throws (n={n}, p={p})')\n",
        "plt.axvline(x=expected_makes, color='red', linestyle='--', linewidth=2, label=f'Expected Value = {expected_makes}')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "print(f\"\\nSummary Statistics:\")\n",
        "print(f\"Mean: {binom.mean()}\")\n",
        "print(f\"Variance: {binom.var()}\")\n",
        "print(f\"Standard Deviation: {binom.std():.4f}\")"
      ],
      "id": "aab6198a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 4 Solution\n",
        "\n",
        "**Problem:** A call center receives an average of 5 calls per minute."
      ],
      "id": "c2c5ba58"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 4 Solution\n",
        "# This is a Poisson distribution with λ = 5\n",
        "lam = 5\n",
        "poisson = stats.poisson(lam)\n",
        "\n",
        "# 1. Probability of receiving exactly 7 calls\n",
        "prob_exactly_7 = poisson.pmf(7)\n",
        "print(f\"1. P(X = 7) = {prob_exactly_7:.4f}\")\n",
        "\n",
        "# 2. Probability of receiving no calls\n",
        "prob_no_calls = poisson.pmf(0)\n",
        "print(f\"2. P(X = 0) = {prob_no_calls:.4f}\")\n",
        "\n",
        "# 3. Probability of receiving more than 8 calls\n",
        "prob_more_than_8 = 1 - poisson.cdf(8)  # P(X > 8) = 1 - P(X ≤ 8)\n",
        "print(f\"3. P(X > 8) = {prob_more_than_8:.4f}\")\n",
        "\n",
        "# 4. Plot PMF for k = 0 to 15\n",
        "k_values = range(0, 16)\n",
        "probabilities = [poisson.pmf(k) for k in k_values]\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.bar(k_values, probabilities, alpha=0.7, color='purple', edgecolor='black')\n",
        "plt.xlabel('Number of Calls per Minute')\n",
        "plt.ylabel('Probability')\n",
        "plt.title(f'Poisson Distribution: Call Center (λ = {lam})')\n",
        "plt.axvline(x=lam, color='red', linestyle='--', linewidth=2, label=f'Expected Value = {lam}')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "print(f\"\\nSummary Statistics:\")\n",
        "print(f\"Expected value (λ): {poisson.mean()}\")\n",
        "print(f\"Variance (λ): {poisson.var()}\")\n",
        "print(f\"Standard Deviation: {poisson.std():.4f}\")"
      ],
      "id": "5c1d4314",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 5 Solution\n",
        "\n",
        "**Problem:** Distribution Identification Practice"
      ],
      "id": "6bb131a4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 5 Solutions\n",
        "\n",
        "print(\"=== SCENARIO A ===\")\n",
        "print(\"Flip a fair coin 20 times. Probability of exactly 12 heads?\")\n",
        "print(\"Distribution: Binomial(n=20, p=0.5)\")\n",
        "\n",
        "n_a = 20\n",
        "p_a = 0.5\n",
        "binom_a = stats.binom(n_a, p_a)\n",
        "prob_a = binom_a.pmf(12)\n",
        "print(f\"Answer: P(X = 12) = {prob_a:.4f}\")\n",
        "\n",
        "print(\"\\n=== SCENARIO B ===\")\n",
        "print(\"Roll a die until you get a 6. Probability it takes exactly 4 rolls?\")\n",
        "print(\"Distribution: Geometric(p=1/6)\")\n",
        "\n",
        "p_b = 1/6\n",
        "geom_b = stats.geom(p_b)\n",
        "prob_b = geom_b.pmf(4)\n",
        "print(f\"Answer: P(X = 4) = {prob_b:.4f}\")\n",
        "\n",
        "print(\"\\n=== SCENARIO C ===\")\n",
        "print(\"Website gets average 2 visitors per minute. Probability of exactly 3 visitors?\")\n",
        "print(\"Distribution: Poisson(λ=2)\")\n",
        "\n",
        "lam_c = 2\n",
        "poisson_c = stats.poisson(lam_c)\n",
        "prob_c = poisson_c.pmf(3)\n",
        "print(f\"Answer: P(X = 3) = {prob_c:.4f}\")\n",
        "\n",
        "print(\"\\n=== SCENARIO D ===\")\n",
        "print(\"5% of items are defective. Probability first defective item found on 8th test?\")\n",
        "print(\"Distribution: Geometric(p=0.05)\")\n",
        "\n",
        "p_d = 0.05\n",
        "geom_d = stats.geom(p_d)\n",
        "prob_d = geom_d.pmf(8)\n",
        "print(f\"Answer: P(X = 8) = {prob_d:.4f}\")"
      ],
      "id": "c4d44a7d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Task 6 Solution\n",
        "\n",
        "**Problem:** Simulation of basketball free throw scenario"
      ],
      "id": "4a376ef5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Task 6 Solution\n",
        "np.random.seed(42)  # For reproducible results\n",
        "\n",
        "# Parameters from Task 3\n",
        "n_shots = 15\n",
        "p_success = 0.7\n",
        "n_simulations = 1000\n",
        "\n",
        "# Theoretical probability of exactly 10 makes\n",
        "theoretical_prob = stats.binom(n_shots, p_success).pmf(10)\n",
        "print(f\"Theoretical P(X = 10): {theoretical_prob:.4f}\")\n",
        "\n",
        "# Simulate the scenario 1000 times\n",
        "simulation_results = []\n",
        "exactly_10_count = 0\n",
        "\n",
        "for i in range(n_simulations):\n",
        "    # Simulate 15 free throws (1 = make, 0 = miss)\n",
        "    shots = np.random.binomial(1, p_success, n_shots)\n",
        "    makes = np.sum(shots)\n",
        "    simulation_results.append(makes)\n",
        "    \n",
        "    if makes == 10:\n",
        "        exactly_10_count += 1\n",
        "\n",
        "# Calculate proportion of simulations with exactly 10 makes\n",
        "simulated_prob = exactly_10_count / n_simulations\n",
        "print(f\"Simulated P(X = 10): {simulated_prob:.4f}\")\n",
        "print(f\"Difference: {abs(theoretical_prob - simulated_prob):.4f}\")\n",
        "\n",
        "# Create histogram with theoretical PMF overlay\n",
        "plt.figure(figsize=(14, 8))\n",
        "\n",
        "# Histogram of simulation results\n",
        "plt.hist(simulation_results, bins=range(0, n_shots+2), alpha=0.7, density=True, \n",
        "         color='lightblue', edgecolor='black', label='Simulation Results')\n",
        "\n",
        "# Theoretical PMF overlay\n",
        "binom_theory = stats.binom(n_shots, p_success)\n",
        "k_values = range(0, n_shots+1)\n",
        "theoretical_probs = [binom_theory.pmf(k) for k in k_values]\n",
        "plt.plot(k_values, theoretical_probs, 'ro-', linewidth=2, markersize=8, \n",
        "         label='Theoretical PMF')\n",
        "\n",
        "plt.xlabel('Number of Successful Free Throws')\n",
        "plt.ylabel('Probability/Density')\n",
        "plt.title(f'Simulation vs Theory: Basketball Free Throws\\n({n_simulations} simulations, n={n_shots}, p={p_success})')\n",
        "plt.legend()\n",
        "plt.grid(True, alpha=0.3)\n",
        "plt.show()\n",
        "\n",
        "print(f\"\\nSimulation Summary:\")\n",
        "print(f\"Mean of simulations: {np.mean(simulation_results):.2f}\")\n",
        "print(f\"Theoretical mean: {binom_theory.mean():.2f}\")\n",
        "print(f\"Standard deviation of simulations: {np.std(simulation_results):.2f}\")\n",
        "print(f\"Theoretical standard deviation: {binom_theory.std():.2f}\")"
      ],
      "id": "0b212118",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Final Challenge Solution\n",
        "\n",
        "**Problem:** Customer service center analysis"
      ],
      "id": "b59b7dc2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Final Challenge Solution\n",
        "\n",
        "print(\"=== CUSTOMER SERVICE CENTER ANALYSIS ===\\n\")\n",
        "\n",
        "# Given information:\n",
        "# - 20% of calls result in a sale (Bernoulli process)\n",
        "# - Calls arrive at average rate of 4 per hour (Poisson process)  \n",
        "# - Agents work until first sale (Geometric process)\n",
        "\n",
        "p_sale = 0.2  # Probability of sale per call\n",
        "calls_per_hour = 4\n",
        "hours_per_day = 8\n",
        "\n",
        "print(\"Given:\")\n",
        "print(f\"- Probability of sale per call: {p_sale}\")\n",
        "print(f\"- Average calls per hour: {calls_per_hour}\")\n",
        "print(f\"- Hours of operation per day: {hours_per_day}\")\n",
        "\n",
        "# 1. Expected number of calls in 8-hour day\n",
        "expected_calls_per_day = calls_per_hour * hours_per_day\n",
        "print(f\"\\n1. Expected calls in {hours_per_day}-hour day: {expected_calls_per_day}\")\n",
        "\n",
        "# 2. Probability that exactly 2 of next 10 calls result in sales\n",
        "n_calls = 10\n",
        "binom_sales = stats.binom(n_calls, p_sale)\n",
        "prob_2_sales = binom_sales.pmf(2)\n",
        "print(f\"\\n2. P(exactly 2 sales in 10 calls): {prob_2_sales:.4f}\")\n",
        "\n",
        "# 3. Expected number of calls until first sale\n",
        "geom_first_sale = stats.geom(p_sale)\n",
        "expected_calls_until_sale = geom_first_sale.mean()\n",
        "print(f\"\\n3. Expected calls until first sale: {expected_calls_until_sale:.1f}\")\n",
        "\n",
        "# 4. Comprehensive visualization\n",
        "fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
        "\n",
        "# Plot 1: Poisson - Calls per hour\n",
        "poisson_calls = stats.poisson(calls_per_hour)\n",
        "k_poisson = range(0, 15)\n",
        "prob_poisson = [poisson_calls.pmf(k) for k in k_poisson]\n",
        "\n",
        "axes[0, 0].bar(k_poisson, prob_poisson, alpha=0.7, color='skyblue', edgecolor='black')\n",
        "axes[0, 0].set_title(f'Calls per Hour\\nPoisson(λ={calls_per_hour})')\n",
        "axes[0, 0].set_xlabel('Number of Calls')\n",
        "axes[0, 0].set_ylabel('Probability')\n",
        "axes[0, 0].axvline(x=calls_per_hour, color='red', linestyle='--', label=f'Mean = {calls_per_hour}')\n",
        "axes[0, 0].legend()\n",
        "\n",
        "# Plot 2: Binomial - Sales in 10 calls\n",
        "k_binom = range(0, n_calls + 1)\n",
        "prob_binom = [binom_sales.pmf(k) for k in k_binom]\n",
        "\n",
        "axes[0, 1].bar(k_binom, prob_binom, alpha=0.7, color='lightgreen', edgecolor='black')\n",
        "axes[0, 1].set_title(f'Sales in {n_calls} Calls\\nBinomial(n={n_calls}, p={p_sale})')\n",
        "axes[0, 1].set_xlabel('Number of Sales')\n",
        "axes[0, 1].set_ylabel('Probability')\n",
        "axes[0, 1].axvline(x=binom_sales.mean(), color='red', linestyle='--', \n",
        "                   label=f'Mean = {binom_sales.mean():.1f}')\n",
        "axes[0, 1].legend()\n",
        "\n",
        "# Plot 3: Geometric - Calls until first sale\n",
        "k_geom = range(1, 21)\n",
        "prob_geom = [geom_first_sale.pmf(k) for k in k_geom]\n",
        "\n",
        "axes[1, 0].bar(k_geom, prob_geom, alpha=0.7, color='orange', edgecolor='black')\n",
        "axes[1, 0].set_title(f'Calls Until First Sale\\nGeometric(p={p_sale})')\n",
        "axes[1, 0].set_xlabel('Call Number')\n",
        "axes[1, 0].set_ylabel('Probability')\n",
        "axes[1, 0].axvline(x=expected_calls_until_sale, color='red', linestyle='--', \n",
        "                   label=f'Mean = {expected_calls_until_sale:.1f}')\n",
        "axes[1, 0].legend()\n",
        "\n",
        "# Plot 4: Poisson - Calls per day\n",
        "poisson_day = stats.poisson(expected_calls_per_day)\n",
        "k_day = range(15, 50)  # Focus on reasonable range around mean\n",
        "prob_day = [poisson_day.pmf(k) for k in k_day]\n",
        "\n",
        "axes[1, 1].bar(k_day, prob_day, alpha=0.7, color='purple', edgecolor='black')\n",
        "axes[1, 1].set_title(f'Calls per Day\\nPoisson(λ={expected_calls_per_day})')\n",
        "axes[1, 1].set_xlabel('Number of Calls')\n",
        "axes[1, 1].set_ylabel('Probability')\n",
        "axes[1, 1].axvline(x=expected_calls_per_day, color='red', linestyle='--', \n",
        "                   label=f'Mean = {expected_calls_per_day}')\n",
        "axes[1, 1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Additional insights\n",
        "print(f\"\\n=== ADDITIONAL INSIGHTS ===\")\n",
        "print(f\"Daily sales expectations:\")\n",
        "expected_daily_sales = expected_calls_per_day * p_sale\n",
        "print(f\"- Expected calls per day: {expected_calls_per_day}\")\n",
        "print(f\"- Expected sales per day: {expected_daily_sales:.1f}\")\n",
        "\n",
        "print(f\"\\nProbability calculations:\")\n",
        "print(f\"- P(no sales in 10 calls): {binom_sales.pmf(0):.4f}\")\n",
        "print(f\"- P(at least 1 sale in 10 calls): {1 - binom_sales.pmf(0):.4f}\")\n",
        "print(f\"- P(first sale on call 1): {geom_first_sale.pmf(1):.4f}\")\n",
        "print(f\"- P(first sale within 5 calls): {geom_first_sale.cdf(5):.4f}\")"
      ],
      "id": "ee2725df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Summary\n",
        "\n",
        "This lab covered the fundamental concepts of discrete random variables and probability distributions:\n",
        "\n",
        "1. **Basic Concepts**: PMF, expected value, variance\n",
        "2. **Key Distributions**: Bernoulli, Binomial, Geometric, Poisson\n",
        "3. **Python Tools**: `scipy.stats` for probability calculations\n",
        "4. **Simulation**: Verifying theoretical results with Monte Carlo methods\n",
        "5. **Real Applications**: Identifying appropriate distributions for real-world scenarios\n",
        "\n",
        "**Key Takeaways:**\n",
        "- Always identify the underlying process to choose the right distribution\n",
        "- Use simulation to verify theoretical calculations\n",
        "- Visualizations help understand distribution shapes and parameters\n",
        "- `scipy.stats` provides powerful tools for probability work"
      ],
      "id": "4368633b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "pstat5a",
      "language": "python",
      "display_name": "Python (pstat5a)",
      "path": "/Users/narjesmathlouthi/Library/Jupyter/kernels/pstat5a"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}