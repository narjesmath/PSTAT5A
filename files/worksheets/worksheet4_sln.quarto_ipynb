{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"PSTAT 5A Practice Worksheet 4 - SOLUTIONS\"\n",
        "subtitle: \"Comprehensive Review: Discrete Random Variables and Distributions\"\n",
        "author: \"Complete Solutions with Detailed Work\"\n",
        "date: today\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    number-sections: false\n",
        "    theme: cosmo\n",
        "    css: /files/lecture_notes/theme/lecture-styles.css\n",
        "  pdf:\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    geometry: margin=1in\n",
        "    fontsize: 11pt\n",
        "    documentclass: article\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "---\n",
        "\n",
        "# Section A: Basic Concepts and Identification - SOLUTIONS\n",
        "\n",
        "## Problem A1: Distribution Identification\n",
        "\n",
        ":::{.callout-important}\n",
        "**Instructions**: For each scenario below, identify the appropriate probability distribution and specify its parameters. Justify your choice by identifying the key characteristics.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (a) Coin Flipping Until First Head\n",
        "\n",
        ":::{.problem}\n",
        "A fair coin is flipped until the first head appears. Let $X$ = number of flips needed.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Geometric Distribution** with parameter $p = 0.5$\n",
        "\n",
        "**Key Characteristics:**\n",
        "\n",
        "- ✓ We count the number of trials until the **first success**\n",
        "  \n",
        "- ✓ Each flip is **independent** with constant probability of success\n",
        "  \n",
        "- ✓ Only two outcomes per trial (head or tail)\n",
        "  \n",
        "- ✓ We stop as soon as we get a success\n",
        "\n",
        "**Notation:** $X \\sim \\text{Geometric}(p = 0.5)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (b) Quality Control Inspection\n",
        "\n",
        ":::{.problem}\n",
        "A quality control inspector tests $20$ randomly selected items from a production line where $5\\%$ are defective. Let $X$ = number of defective items found.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Binomial Distribution** with parameters $n = 20$, $p = 0.05$\n",
        "\n",
        "**Key Characteristics:**\n",
        "\n",
        "- ✓ **Fixed number of trials** ($n = 20$)\n",
        "  \n",
        "- ✓ Each item has the **same probability** of being defective ($p = 0.05$)\n",
        "  \n",
        "- ✓ We count the **number of successes** (defective items)\n",
        "  \n",
        "- ✓ Each test is **independent**\n",
        "\n",
        "**Notation:** $X \\sim \\text{Binomial}(n = 20, p = 0.05)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (c) Website Visitor Count\n",
        "\n",
        ":::{.problem}\n",
        "A website receives visitors at an average rate of $3$ per minute. Let $X$ = number of visitors in a 2-minute period.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Poisson Distribution** with parameter $\\lambda = 6$\n",
        "\n",
        "**Key Characteristics:**\n",
        "\n",
        "- ✓ Events occurring **over time** at a constant average rate\n",
        "  \n",
        "- ✓ Events are **independent** and **rare**\n",
        "  \n",
        "- ✓ Rate calculation: $3 \\text{ visitors/minute} \\times 2 \\text{ minutes} = 6$ expected visitors\n",
        "\n",
        "**Notation:** $X \\sim \\text{Poisson}(\\lambda = 6)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (d) Single Free Throw\n",
        "\n",
        ":::{.problem}\n",
        "A basketball player shoots one free throw with an $80\\%$ success rate. Let $X = 1$ if successful, $0$ if unsuccessful.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Bernoulli Distribution** with parameter $p = 0.8$\n",
        "\n",
        "**Key Characteristics:**\n",
        "\n",
        "- ✓ **Single trial** with exactly two outcomes\n",
        "  \n",
        "- ✓ Success (make shot) vs. Failure (miss shot)\n",
        "  \n",
        "- ✓ Binary outcome: $X \\in \\{0, 1\\}$\n",
        "\n",
        "**Notation:** $X \\sim \\text{Bernoulli}(p = 0.8)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (e) Driving Test Attempts\n",
        "\n",
        ":::{.problem}\n",
        "A student keeps taking a driving test until they pass. The probability of passing on any attempt is $0.7$. Let $X$ = number of attempts needed to pass.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Geometric Distribution** with parameter $p = 0.7$\n",
        "\n",
        "**Key Characteristics:**\n",
        "\n",
        "- ✓ We count **trials until first success** (passing the test)\n",
        "  \n",
        "- ✓ Each attempt is **independent** with constant probability\n",
        "  \n",
        "- ✓ Student continues until success occurs\n",
        "\n",
        "**Notation:** $X \\sim \\text{Geometric}(p = 0.7)$\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Summary Table"
      ],
      "id": "92df40d6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-distribution-summary\n",
        "#| tbl-cap: Distribution Identification Summary\n",
        "\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Create summary data\n",
        "data = {\n",
        "    'Problem': ['(a) Coin Flips', '(b) Quality Control', '(c) Website Visitors', \n",
        "                '(d) Free Throw', '(e) Driving Test'],\n",
        "    'Distribution': ['Geometric', 'Binomial', 'Poisson', 'Bernoulli', 'Geometric'],\n",
        "    'Parameters': ['p = 0.5', 'n = 20, p = 0.05', 'λ = 6', 'p = 0.8', 'p = 0.7'],\n",
        "    'Key Feature': ['Trials until first success', 'Fixed trials, count successes', \n",
        "                   'Events over time period', 'Single trial, binary outcome', \n",
        "                   'Trials until first success']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Create an interactive table\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    columnwidth=[80, 80, 80, 120],\n",
        "    header=dict(\n",
        "        values=['<b>Problem</b>', '<b>Distribution</b>', '<b>Parameters</b>', '<b>Key Feature</b>'],\n",
        "        fill_color='lightblue',\n",
        "        align='center',\n",
        "        font=dict(size=14, color='black')\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=[df['Problem'], df['Distribution'], df['Parameters'], df['Key Feature']],\n",
        "        fill_color='white',\n",
        "        align='center',\n",
        "        font=dict(size=12),\n",
        "        height=40\n",
        "    )\n",
        ")])\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Distribution Identification Summary',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 16}\n",
        "    },\n",
        "    margin=dict(l=20, r=20, t=60, b=20)\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "tbl-distribution-summary",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Decision Framework Visualization"
      ],
      "id": "4043fcf5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-decision-tree\n",
        "#| fig-cap: Decision Framework for Distribution Identification\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "# Create a flowchart-style visualization\n",
        "fig = go.Figure()\n",
        "\n",
        "# Define positions for flowchart nodes\n",
        "nodes = [\n",
        "    # Level 1: Start\n",
        "    {'x': 0.5, 'y': 0.9, 'text': 'Identify the Random Variable', 'color': 'lightblue'},\n",
        "    \n",
        "    # Level 2: Main branches\n",
        "    {'x': 0.2, 'y': 0.7, 'text': 'Single Trial?', 'color': 'lightgreen'},\n",
        "    {'x': 0.5, 'y': 0.7, 'text': 'Count Until Success?', 'color': 'lightgreen'},\n",
        "    {'x': 0.8, 'y': 0.7, 'text': 'Events Over Time?', 'color': 'lightgreen'},\n",
        "    \n",
        "    # Level 3: Distributions\n",
        "    {'x': 0.2, 'y': 0.5, 'text': 'Bernoulli', 'color': 'lightyellow'},\n",
        "    {'x': 0.5, 'y': 0.5, 'text': 'Geometric', 'color': 'lightyellow'},\n",
        "    {'x': 0.65, 'y': 0.5, 'text': 'Fixed Trials?', 'color': 'lightcoral'},\n",
        "    {'x': 0.8, 'y': 0.5, 'text': 'Poisson', 'color': 'lightyellow'},\n",
        "    \n",
        "    # Level 4: Binomial\n",
        "    {'x': 0.65, 'y': 0.3, 'text': 'Binomial', 'color': 'lightyellow'}\n",
        "]\n",
        "\n",
        "# Add nodes\n",
        "for i, node in enumerate(nodes):\n",
        "    fig.add_shape(\n",
        "        type=\"circle\",\n",
        "        x0=node['x']-0.06, y0=node['y']-0.04,\n",
        "        x1=node['x']+0.06, y1=node['y']+0.04,\n",
        "        fillcolor=node['color'],\n",
        "        line=dict(color=\"black\", width=2)\n",
        "    )\n",
        "    \n",
        "    fig.add_annotation(\n",
        "        x=node['x'], y=node['y'],\n",
        "        text=node['text'],\n",
        "        showarrow=False,\n",
        "        font=dict(size=10, color=\"black\"),\n",
        "        bgcolor=\"white\",\n",
        "        bordercolor=\"black\",\n",
        "        borderwidth=1\n",
        "    )\n",
        "\n",
        "# Add arrows (simplified)\n",
        "arrows = [\n",
        "    # From start to main branches\n",
        "    {'x0': 0.45, 'y0': 0.86, 'x1': 0.25, 'y1': 0.74},\n",
        "    {'x0': 0.5, 'y0': 0.86, 'x1': 0.5, 'y1': 0.74},\n",
        "    {'x0': 0.55, 'y0': 0.86, 'x1': 0.75, 'y1': 0.74},\n",
        "    \n",
        "    # From branches to distributions\n",
        "    {'x0': 0.2, 'y0': 0.66, 'x1': 0.2, 'y1': 0.54},\n",
        "    {'x0': 0.5, 'y0': 0.66, 'x1': 0.5, 'y1': 0.54},\n",
        "    {'x0': 0.8, 'y0': 0.66, 'x1': 0.8, 'y1': 0.54},\n",
        "    {'x0': 0.7, 'y0': 0.66, 'x1': 0.65, 'y1': 0.54},\n",
        "    {'x0': 0.65, 'y0': 0.46, 'x1': 0.65, 'y1': 0.34}\n",
        "]\n",
        "\n",
        "for arrow in arrows:\n",
        "    fig.add_annotation(\n",
        "        x=arrow['x1'], y=arrow['y1'],\n",
        "        ax=arrow['x0'], ay=arrow['y0'],\n",
        "        xref='x', yref='y',\n",
        "        axref='x', ayref='y',\n",
        "        showarrow=True,\n",
        "        arrowhead=2,\n",
        "        arrowsize=1,\n",
        "        arrowwidth=2,\n",
        "        arrowcolor=\"gray\"\n",
        "    )\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Distribution Identification Decision Framework',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 16}\n",
        "    },\n",
        "    xaxis=dict(range=[0, 1], showgrid=False, showticklabels=False, zeroline=False),\n",
        "    yaxis=dict(range=[0, 1], showgrid=False, showticklabels=False, zeroline=False),\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white',\n",
        "    showlegend=False,\n",
        "    width=800,\n",
        "    height=600\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-decision-tree",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip}\n",
        "**Quick Reference Guide**\n",
        "Ask these key questions to identify distributions:\n",
        "\n",
        "**How many trials?**\n",
        "\n",
        "- One trial → Bernoulli\n",
        "  \n",
        "- Fixed number → Binomial (if counting successes)\n",
        "  \n",
        "- Until first success → Geometric\n",
        "\n",
        "\n",
        "**What are we counting?**\n",
        "\n",
        "- Successes in fixed trials → Binomial\n",
        "  \n",
        "- Trials until success → Geometric\n",
        "\n",
        "- Events over time/space → Poisson\n",
        "\n",
        "\n",
        "**Time component?**\n",
        "\n",
        "- Events at constant rate over time → Poisson\n",
        "  \n",
        "- No time component → Binomial/Bernoulli/Geometric\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        ":::{.callout-warning}\n",
        "\n",
        "**Geometric vs. Binomial**: Geometric counts trials until success; \n",
        "\n",
        "- **Binomial** counts successes in <i>fixed</i> trials\n",
        "\n",
        "- **Poisson parameter**: Remember to multiply rate by time period (e.g., 3/minute × 2 minutes = $\\lambda$ = 6)\n",
        "\n",
        "**Independence assumption**: All these distributions require independent trials/events\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Problem A2: Probability Mass Function\n",
        "\n",
        "::: {.problem}\n",
        "Given distribution:\n",
        "\n",
        "| X     | 1    | 2    | 3    | 4    | 5    |\n",
        "|-------|------|------|------|------|------|\n",
        "| P(X=k)| 0.1  | 0.3  | 0.4  | a    | 0.1  |\n",
        ":::\n"
      ],
      "id": "9dd7b71b"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-pmf-basic\n",
        "#| fig-cap: Probability Mass Function\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "\n",
        "# Data\n",
        "x_values = [1, 2, 3, 4, 5]\n",
        "probabilities = [0.1, 0.3, 0.4, 0.1, 0.1]\n",
        "\n",
        "# Create the plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bars\n",
        "fig.add_trace(go.Bar(\n",
        "    x=x_values,\n",
        "    y=probabilities,\n",
        "    text=[f'{p}' for p in probabilities],\n",
        "    textposition='outside',\n",
        "    marker_color='steelblue',\n",
        "    marker_opacity=0.8,\n",
        "    marker_line_color='navy',\n",
        "    marker_line_width=2,\n",
        "    name='P(X=k)'\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Probability Mass Function',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 18, 'family': 'Arial, sans-serif'}\n",
        "    },\n",
        "    xaxis_title='X',\n",
        "    yaxis_title='P(X = k)',\n",
        "    xaxis=dict(\n",
        "        tickmode='linear',\n",
        "        tick0=1,\n",
        "        dtick=1,\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        range=[0, 0.5],\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    font=dict(size=12),\n",
        "    showlegend=False,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Add grid\n",
        "fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-pmf-basic",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### (a) Find the value of $a$.\n",
        "\n",
        ":::{.solution}\n",
        "Since probabilities must sum to $1$:\n",
        "\n",
        "$0.1 + 0.3 + 0.4 + a + 0.1 = 1$\n",
        "\n",
        "$0.9 + a = 1$\n",
        "\n",
        "$\\boxed{a = 0.1}$\n",
        "\n",
        ":::\n",
        "\n",
        "### (b) Calculate $P(X \\leq 3)$.\n",
        "\n",
        ":::{.solution}\n",
        "$P(X ≤ 3) = P(X = 1) + P(X = 2) + P(X = 3)$\n",
        "\n",
        "$P(X ≤ 3) = 0.1 + 0.3 + 0.4 = \\boxed{0.8}$\n",
        ":::"
      ],
      "id": "bc127137"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-pmf-leq3\n",
        "#| fig-cap: PMF showing P(X ≤ 3) = 0.8\n",
        "\n",
        "# Create colors for highlighting P(X ≤ 3)\n",
        "colors = ['darkgreen' if x <= 3 else 'lightgray' for x in x_values]\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bars with conditional coloring\n",
        "fig.add_trace(go.Bar(\n",
        "    x=x_values,\n",
        "    y=probabilities,\n",
        "    text=[f'{p}' for p in probabilities],\n",
        "    textposition='outside',\n",
        "    marker_color=colors,\n",
        "    marker_opacity=0.8,\n",
        "    marker_line_color='black',\n",
        "    marker_line_width=2,\n",
        "    name='P(X=k)'\n",
        "))\n",
        "\n",
        "# Add annotation\n",
        "fig.add_annotation(\n",
        "    x=2, y=0.35,\n",
        "    text=\"P(X ≤ 3) = 0.8<br>(Green bars)\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowsize=1,\n",
        "    arrowwidth=2,\n",
        "    arrowcolor=\"darkgreen\",\n",
        "    font=dict(size=14, color=\"darkgreen\"),\n",
        "    bgcolor=\"white\",\n",
        "    bordercolor=\"darkgreen\",\n",
        "    borderwidth=2\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Probability Mass Function: P(X ≤ 3)',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 18, 'family': 'Arial, sans-serif'}\n",
        "    },\n",
        "    xaxis_title='X',\n",
        "    yaxis_title='P(X = k)',\n",
        "    xaxis=dict(\n",
        "        tickmode='linear',\n",
        "        tick0=1,\n",
        "        dtick=1,\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        range=[0, 0.5],\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    font=dict(size=12),\n",
        "    showlegend=False,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Add grid\n",
        "fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-pmf-leq3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### (c) Calculate $P(X > 2)$.\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "$P(X > 2) = P(X = 3) + P(X = 4) + P(X = 5)$\n",
        "\n",
        "$P(X > 2) = 0.4 + 0.1 + 0.1 = \\boxed{0.6}$\n",
        "\n",
        "(Check: $0.8 + 0.2 = 1$ and the full PMF sums to 1, so the results are consistent.)\n",
        ":::\n"
      ],
      "id": "b9ad1e7e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-pmf-gt2\n",
        "#| fig-cap: PMF showing P(X > 2) = 0.6\n",
        "\n",
        "# Create colors for highlighting P(X > 2)\n",
        "colors = ['lightgray' if x <= 2 else 'darkorange' for x in x_values]\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bars with conditional coloring\n",
        "fig.add_trace(go.Bar(\n",
        "    x=x_values,\n",
        "    y=probabilities,\n",
        "    text=[f'{p}' for p in probabilities],\n",
        "    textposition='outside',\n",
        "    marker_color=colors,\n",
        "    marker_opacity=0.8,\n",
        "    marker_line_color='black',\n",
        "    marker_line_width=2,\n",
        "    name='P(X=k)'\n",
        "))\n",
        "\n",
        "# Add annotation\n",
        "fig.add_annotation(\n",
        "    x=4, y=0.35,\n",
        "    text=\"P(X > 2) = 0.6<br>(Orange bars)\",\n",
        "    showarrow=True,\n",
        "    arrowhead=2,\n",
        "    arrowsize=1,\n",
        "    arrowwidth=2,\n",
        "    arrowcolor=\"darkorange\",\n",
        "    font=dict(size=14, color=\"darkorange\"),\n",
        "    bgcolor=\"white\",\n",
        "    bordercolor=\"darkorange\",\n",
        "    borderwidth=2\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Probability Mass Function: P(X > 2)',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 18, 'family': 'Arial, sans-serif'}\n",
        "    },\n",
        "    xaxis_title='X',\n",
        "    yaxis_title='P(X = k)',\n",
        "    xaxis=dict(\n",
        "        tickmode='linear',\n",
        "        tick0=1,\n",
        "        dtick=1,\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        range=[0, 0.5],\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    font=dict(size=12),\n",
        "    showlegend=False,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Add grid\n",
        "fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "\n",
        "fig.show()\n"
      ],
      "id": "fig-pmf-gt2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Putting everything together:\n",
        "\n",
        ":::{.callout-tip}\n",
        "Key Insights from Visualizations\n",
        "\n",
        "**Distribution Shape**: The PMF shows $X = 3$ has the highest probability ($0.4$), making it the mode\n",
        "\n",
        "**Cumulative Probability**: $P(X ≤ 3) = 0.8$ means $80\\%$ of outcomes are 3 or less\n",
        "\n",
        "**Complement Relationship**: $P(X > 2) = 0.6$ and $P(X ≤ 2) = 0.4$ sum to $1$\n",
        "\n",
        "**Symmetry**: The distribution has some **symmetry** around the center, with equal probabilities at the extremes ($X = 1 \\quad \\text{and} \\quad X = 5$ both have $P = 0.1$)\n",
        ":::"
      ],
      "id": "63a2a1c2"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 8
      },
      "source": [
        "#| label: fig-pmf-comparison\n",
        "#| fig-cap: PMF showing both P(X ≤ 3) and P(X > 2) regions\n",
        "\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "# Create subplots\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=('Complete PMF', 'P(X ≤ 3) = 0.8', 'P(X > 2) = 0.6', 'Summary Statistics'),\n",
        "    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n",
        "           [{\"type\": \"bar\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Plot 1: Complete PMF\n",
        "fig.add_trace(\n",
        "    go.Bar(x=x_values, y=probabilities, \n",
        "           marker_color='steelblue', marker_opacity=0.8,\n",
        "           text=probabilities, textposition='outside',\n",
        "           name='P(X=k)'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Plot 2: P(X ≤ 3)\n",
        "colors_leq3 = ['darkgreen' if x <= 3 else 'lightgray' for x in x_values]\n",
        "fig.add_trace(\n",
        "    go.Bar(x=x_values, y=probabilities,\n",
        "           marker_color=colors_leq3, marker_opacity=0.8,\n",
        "           text=probabilities, textposition='outside',\n",
        "           name='P(X ≤ 3)'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Plot 3: P(X > 2)\n",
        "colors_gt2 = ['lightgray' if x <= 2 else 'darkorange' for x in x_values]\n",
        "fig.add_trace(\n",
        "    go.Bar(x=x_values, y=probabilities,\n",
        "           marker_color=colors_gt2, marker_opacity=0.8,\n",
        "           text=probabilities, textposition='outside',\n",
        "           name='P(X > 2)'),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Table with summary\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=['Calculation', 'Result'],\n",
        "                   fill_color='lightblue',\n",
        "                   align='center',\n",
        "                   font=dict(size=14)),\n",
        "        cells=dict(values=[\n",
        "            ['P(X = 1)', 'P(X = 2)', 'P(X = 3)', 'P(X = 4)', 'P(X = 5)', \n",
        "             '', 'P(X ≤ 3)', 'P(X > 2)', 'P(X ≤ 2)', 'P(X > 3)'],\n",
        "            ['0.1', '0.3', '0.4', '0.1', '0.1', \n",
        "             '', '0.8', '0.6', '0.4', '0.2']\n",
        "        ],\n",
        "        fill_color='white',\n",
        "        align='center',\n",
        "        font=dict(size=12))\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    title_text=\" \",\n",
        "    showlegend=False,\n",
        "    height=700\n",
        ")\n",
        "\n",
        "# Update all y-axes to have the same range\n",
        "for i in range(1, 4):\n",
        "    if i <= 3:  # Only for bar plots\n",
        "        row = 1 if i <= 2 else 2\n",
        "        col = i if i <= 2 else 1\n",
        "        fig.update_yaxes(range=[0, 0.5], row=row, col=col)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-pmf-comparison",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Section B: Expected Value and Variance - SOLUTIONS\n",
        "\n",
        "## Problem B1: Manual Calculations\n",
        "\n",
        ":::{.problem}\n",
        "Using the distribution from Problem A2:\n",
        "\n",
        "| X     | 1    | 2    | 3    | 4    | 5    |\n",
        "|-------|------|------|------|------|------|\n",
        "| P(X=k)| 0.1  | 0.3  | 0.4  | 0.1  | 0.1  |\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "### (a) Compute the expected value \\(E[X]\\)\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "For a **discrete random variable**, the expected value is the *probability-weighted average* of all possible outcomes:\n",
        "\n",
        "$$\n",
        "E[X] \\;=\\;\\sum_{k=1}^{5} k  \\times \\,P(X=k).\n",
        "$$\n",
        "\n",
        "1. **Set up the sum**\n",
        "\n",
        "$$\n",
        "E[X] \\;=\\; 1(0.1) \\;+\\; 2(0.3) \\;+\\; 3(0.4) \\;+\\; 4(0.1) \\;+\\; 5(0.1).\n",
        "$$\n",
        "\n",
        "2. **Multiply each outcome by its probability**\n",
        "\n",
        "$$\n",
        "= 0.1 \\;+\\; 0.6 \\;+\\; 1.2 \\;+\\; 0.4 \\;+\\; 0.5.\n",
        "$$\n",
        "\n",
        "3. **Add the terms**\n",
        "\n",
        "$$\n",
        "\\boxed {E[X] = 2.8}\n",
        "$$\n",
        "\n",
        ":::\n"
      ],
      "id": "74a6a764"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-pmf\n",
        "#| fig-cap: Probability Mass Function showing E[X] = 2.8\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Data\n",
        "x_values = [1, 2, 3, 4, 5]\n",
        "probabilities = [0.1, 0.3, 0.4, 0.1, 0.1]\n",
        "\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "# Create bars\n",
        "bars = ax.bar(x_values, probabilities, color='steelblue', alpha=0.7, width=0.6, edgecolor='navy', linewidth=1.5)\n",
        "\n",
        "# Add value labels on top of bars\n",
        "for i, (x, p) in enumerate(zip(x_values, probabilities)):\n",
        "    ax.text(x, p + 0.015, f'{p}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n",
        "\n",
        "# Add expected value line\n",
        "ax.axvline(x=2.8, color='red', linestyle='--', linewidth=2.5, alpha=0.8)\n",
        "ax.text(2.8, 0.35, 'E[X] = 2.8', rotation=90, ha='right', va='bottom', \n",
        "        fontsize=12, fontweight='bold', color='red')\n",
        "\n",
        "# Styling\n",
        "ax.set_xlabel('X', fontsize=14, fontweight='bold')\n",
        "ax.set_ylabel('P(X = k)', fontsize=14, fontweight='bold')\n",
        "ax.set_title('Probability Mass Function\\nExpected Value = 2.8', fontsize=16, fontweight='bold', pad=20)\n",
        "ax.set_ylim(0, 0.45)\n",
        "ax.set_xlim(0.5, 5.5)\n",
        "ax.set_xticks(x_values)\n",
        "ax.grid(True, alpha=0.3, axis='y')\n",
        "\n",
        "# Remove top and right spines\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-pmf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip}\n",
        "**Visual Interpretation**\n",
        "\n",
        "Looking at the PMF plot:\n",
        "\n",
        "- The highest probability ($0.4$) occurs at $X = 3$\n",
        "\n",
        "- The second highest ($0.3$) occurs at $X = 2$\n",
        "\n",
        "Together, these two values account for $70\\%$ of the probability mass\n",
        "\n",
        "The **expected value** $E[X] = 2.8$ (red dashed line) falls between these two most likely outcomes\n",
        "\n",
        "This visual confirms our intuition that the \"center of gravity\" should be close to, but slightly less than, 3\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.callout-note}\n",
        "**Interpretation & quick check**\n",
        "\n",
        "*Interpretation:* If we were to observe this experiment many, many times, the long-run **average** value of $X$ would settle down around **2.8**. Although 2.8 itself isn’t an attainable outcome (only integers 1–5 are), it represents the center of gravity of the distribution.\n",
        "\n",
        "*Check:*  Notice most probability mass is on 2 and 3 (0.3 + 0.4 = 0.7). A mix that skews slightly toward the larger of those two values should indeed give an average a bit below 3, exactly what we see with 2.8.\n",
        ":::"
      ],
      "id": "07b02b72"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-convergence-multiple\n",
        "#| fig-cap: Multiple Simulation Runs Showing Convergence\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "\n",
        "# Set random seed\n",
        "np.random.seed(123)\n",
        "\n",
        "# Define the distribution\n",
        "values = np.array([1, 2, 3, 4, 5])\n",
        "probs = np.array([0.1, 0.3, 0.4, 0.1, 0.1])\n",
        "\n",
        "# Parameters\n",
        "n_trials = 1000\n",
        "n_runs = 5\n",
        "\n",
        "# Create figure\n",
        "fig = go.Figure()\n",
        "\n",
        "# Run multiple simulations\n",
        "for run in range(n_runs):\n",
        "    # Generate samples\n",
        "    samples = np.random.choice(values, n_trials, p=probs)\n",
        "    running_avg = np.cumsum(samples) / np.arange(1, n_trials + 1)\n",
        "    \n",
        "    # Add trace\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=list(range(1, n_trials + 1)),\n",
        "        y=running_avg,\n",
        "        mode='lines',\n",
        "        name=f'Run {run + 1}',\n",
        "        line=dict(width=2),\n",
        "        opacity=0.7\n",
        "    ))\n",
        "\n",
        "# Add expected value line\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=[1, n_trials],\n",
        "    y=[2.8, 2.8],\n",
        "    mode='lines',\n",
        "    name='E[X] = 2.8',\n",
        "    line=dict(color='red', width=3, dash='dash')\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\n",
        "    'Multiple Simulation Runs: Convergence to Expected Value<br><sub> Each line represents an independent simulation</sub>',\n",
        "    xaxis_title='Number of Trials',\n",
        "    yaxis_title='Sample Average',\n",
        "    yaxis=dict(range=[1, 5]),\n",
        "    hovermode='x unified'\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "id": "fig-convergence-multiple",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### (b) Compute the variance $\\operatorname{Var}(X)$\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "The variance measures how far the values of \\(X\\) tend to deviate from the mean.  \n",
        "We use the shortcut formula\n",
        "\n",
        "$$\n",
        "\\operatorname{Var}(X) \\;=\\; E[X^2] - \\bigl(E[X]\\bigr)^2,\n",
        "$$\n",
        "\n",
        "where $E[X]=2.8$ was found in part (a).\n",
        "\n",
        "\n",
        "\n",
        "1. **Find $E[X^2]$** (the mean of the squared outcomes)\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "E[X^2]\n",
        "&= \\sum_{k=1}^{5} k^{2}\\,P(X=k) \\\\[4pt]\n",
        "&= 1^{2}(0.1) \\;+\\; 2^{2}(0.3) \\;+\\; 3^{2}(0.4) \\;+\\; 4^{2}(0.1) \\;+\\; 5^{2}(0.1) \\\\[4pt]\n",
        "&= 1(0.1) \\;+\\; 4(0.3) \\;+\\; 9(0.4) \\;+\\; 16(0.1) \\;+\\; 25(0.1) \\\\[4pt]\n",
        "&= 0.1 \\;+\\; 1.2 \\;+\\; 3.6 \\;+\\; 1.6 \\;+\\; 2.5 \\\\[4pt]\n",
        "&= 9.0\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "2. **Apply the variance formula**\n",
        "\n",
        "$$\n",
        "\\operatorname{Var}(X) \\;=\\; 9.0 - (2.8)^2 = 9.0 - 7.84 = \\boxed{1.16}\n",
        "$$\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.callout-note}\n",
        "**Interpretation & quick check**\n",
        "\n",
        "*Interpretation:* A variance of $1.16$ tells us that typical values of $X$ deviate from the mean ($2.8$) by a little over one unit (figure 8).\n",
        "\n",
        "*Check:* Most probability mass is on 2 and 3; the only “far” value is $5$ (probability $0.1$). So we expect a modest spread, larger than $0$ but well below the maximum possible of $(5-2.8)^2 = 4.84$. The calculated $1.16$ fits this intuition.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "### (c) Compute the standard deviation $\\sigma$\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "The **standard deviation** is the square root of the variance:\n",
        "\n",
        "$$\n",
        "\\sigma \\;=\\; \\sqrt{\\operatorname{Var}(X)}\n",
        "           \\;=\\; \\sqrt{1.16}\n",
        "           \\;\\approx\\; \\boxed{1.08}.\n",
        "$$\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        ":::{.callout-note}\n",
        "**Interpretation**\n",
        "\n",
        "A standard deviation ($\\sigma$) of about $1.08$ means typical observations of $X$ lie roughly one unit above or below the mean value $2.8$. This agrees with our earlier intuition that the distribution is fairly concentrated around $2 – 3$, with only a small chance of the extreme value $5$.\n",
        ":::\n",
        "\n",
        "Let's visualise this!"
      ],
      "id": "a01d543d"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-variance-illustration\n",
        "#| fig-cap: PMF with Variance Illustration\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Data\n",
        "x_values = [1, 2, 3, 4, 5]\n",
        "probabilities = [0.1, 0.3, 0.4, 0.1, 0.1]\n",
        "mean = 2.8\n",
        "variance = 1.16\n",
        "std_dev = np.sqrt(variance)\n",
        "\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "# Create bars\n",
        "bars = ax.bar(x_values, probabilities, color='steelblue', alpha=0.7, width=0.6, edgecolor='navy', linewidth=1.5)\n",
        "\n",
        "# Add value labels on top of bars\n",
        "for i, (x, p) in enumerate(zip(x_values, probabilities)):\n",
        "    ax.text(x, p + 0.015, f'{p}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n",
        "\n",
        "# Add mean line\n",
        "ax.axvline(x=mean, color='red', linestyle='-', linewidth=2.5, alpha=0.8, label=f'E[X] = {mean}')\n",
        "\n",
        "# Add standard deviation bounds\n",
        "ax.axvline(x=mean - std_dev, color='orange', linestyle='--', linewidth=2, alpha=0.7, label=f'E[X] ± σ')\n",
        "ax.axvline(x=mean + std_dev, color='orange', linestyle='--', linewidth=2, alpha=0.7)\n",
        "\n",
        "# Add annotations for standard deviation\n",
        "ax.annotate('', xy=(mean - std_dev, 0.25), xytext=(mean, 0.25),\n",
        "            arrowprops=dict(arrowstyle='<->', color='orange', lw=2))\n",
        "ax.text(mean - std_dev/2, 0.27, f'σ ≈ {std_dev:.2f}', ha='center', fontsize=11, \n",
        "        color='orange', fontweight='bold')\n",
        "\n",
        "ax.annotate('', xy=(mean, 0.25), xytext=(mean + std_dev, 0.25),\n",
        "            arrowprops=dict(arrowstyle='<->', color='orange', lw=2))\n",
        "ax.text(mean + std_dev/2, 0.27, f'σ ≈ {std_dev:.2f}', ha='center', fontsize=11, \n",
        "        color='orange', fontweight='bold')\n",
        "\n",
        "# Styling\n",
        "ax.set_xlabel('X', fontsize=14, fontweight='bold')\n",
        "ax.set_ylabel('P(X = k)', fontsize=14, fontweight='bold')\n",
        "ax.set_title(f'PMF with Mean and Standard Deviation\\nVar(X) = {variance}, σ = {std_dev:.2f}', \n",
        "             fontsize=16, fontweight='bold', pad=20)\n",
        "ax.set_ylim(0, 0.45)\n",
        "ax.set_xlim(0.5, 5.5)\n",
        "ax.set_xticks(x_values)\n",
        "ax.grid(True, alpha=0.3, axis='y')\n",
        "ax.legend(fontsize=12)\n",
        "\n",
        "# Remove top and right spines\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-variance-illustration",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Problem B2: Bernoulli and Binomial Applications\n",
        "\n",
        ":::{.problem}\n",
        "**Manufacturing Scenario**: A manufacturing process has a 15% defect rate.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (a) Single Item Selection\n",
        "\n",
        ":::{.problem}\n",
        "If you select one item randomly, what is the expected value and variance of $X$ = number of defective items?\n",
        ":::\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "This is a **Bernoulli distribution** with parameter $p = 0.15$\n",
        "\n",
        "$$X \\sim \\text{Bernoulli}(p = 0.15)$$\n",
        "\n",
        "**Step 1: Expected Value**\n",
        "$$E[X] = p = \\boxed{0.15}$$\n",
        "\n",
        "**Step 2: Variance**\n",
        "$$\\text{Var}(X) = p(1-p) = 0.15 \\times 0.85 = \\boxed{0.1275}$$\n",
        "\n",
        "**Step 3: Standard Deviation**\n",
        "$$\\sigma = \\sqrt{\\text{Var}(X)} = \\sqrt{0.1275} = \\boxed{0.357}$$\n",
        ":::\n",
        "\n",
        ":::{.callout-note}\n",
        "**Interpretation**: \n",
        "\n",
        "- On average, 15% of items selected will be defective\n",
        "  \n",
        "- Since this is a single trial, $X$ can only be 0 (not defective) or 1 (defective)\n",
        "  \n",
        "- The variance measures the uncertainty in this binary outcome\n",
        ":::\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "### (b) Multiple Items Selection\n",
        "\n",
        ":::{.problem}\n",
        "If you select 25 items randomly, what is the expected number of defective items and the standard deviation?\n",
        ":::\n",
        "\n",
        ":::{.solution}\n",
        "\n",
        "This is a **Binomial distribution** with parameters $n = 25$, $p = 0.15$\n",
        "\n",
        "$$X \\sim \\text{Binomial}(n = 25, p = 0.15)$$\n",
        "\n",
        "**Step 1: Expected Value**\n",
        "$$E[X] = np = 25 \\times 0.15 = \\boxed{3.75}$$\n",
        "\n",
        "**Step 2: Variance**\n",
        "$$\\text{Var}(X) = np(1-p) = 25 \\times 0.15 \\times 0.85 = \\boxed{3.1875}$$\n",
        "\n",
        "**Step 3: Standard Deviation**\n",
        "$$\\sigma = \\sqrt{\\text{Var}(X)} = \\sqrt{3.1875} = \\boxed{1.785}$$\n",
        ":::\n",
        "\n",
        ":::{.callout-note}\n",
        "**Interpretation**: \n",
        "\n",
        "- On average, we expect about 3.75 defective items out of 25\n",
        "  \n",
        "- The actual number will typically be within ±1.785 items of this average\n",
        "  \n",
        "- Values between 2 and 6 defective items would be quite common\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Visualizations\n",
        "\n",
        "Let's visualize this to build more intuition\n",
        "\n",
        "\n",
        "### Bernoulli Distribution (Single Item)"
      ],
      "id": "91aca343"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 8,
        "fig-height": 5
      },
      "source": [
        "#| label: fig-bernoulli\n",
        "#| fig-cap: 'Bernoulli Distribution: P(X=k) for Single Item'\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "\n",
        "# Bernoulli distribution parameters\n",
        "p = 0.15\n",
        "outcomes = [0, 1]\n",
        "probabilities = [1-p, p]\n",
        "labels = ['Not Defective', 'Defective']\n",
        "\n",
        "# Create the plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bars\n",
        "fig.add_trace(go.Bar(\n",
        "    x=outcomes,\n",
        "    y=probabilities,\n",
        "    text=[f'{prob:.3f}' for prob in probabilities],\n",
        "    textposition='outside',\n",
        "    marker_color=['lightgreen', 'salmon'],\n",
        "    marker_opacity=0.8,\n",
        "    marker_line_color='black',\n",
        "    marker_line_width=2,\n",
        "    name='Probability'\n",
        "))\n",
        "\n",
        "# Add annotations for interpretation\n",
        "for i, (outcome, prob, label) in enumerate(zip(outcomes, probabilities, labels)):\n",
        "    fig.add_annotation(\n",
        "        x=outcome, y=prob/2,\n",
        "        text=f'{label}<br>{prob:.1%}',\n",
        "        showarrow=False,\n",
        "        font=dict(size=12, color='black', family='Arial'),\n",
        "        bgcolor='white',\n",
        "        bordercolor='black',\n",
        "        borderwidth=1\n",
        "    )\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Bernoulli Distribution: Single Item Defect Status<br><sub>E[X] = 0.15, Var(X) = 0.1275</sub>',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 16}\n",
        "    },\n",
        "    xaxis_title='X (Number of Defective Items)',\n",
        "    yaxis_title='P(X = k)',\n",
        "    xaxis=dict(\n",
        "        tickmode='array',\n",
        "        tickvals=[0, 1],\n",
        "        ticktext=['0<br>(Not Defective)', '1<br>(Defective)'],\n",
        "        tickfont=dict(size=12)\n",
        "    ),\n",
        "    yaxis=dict(range=[0, 1], tickfont=dict(size=12)),\n",
        "    showlegend=False,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Add grid\n",
        "fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-bernoulli",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Binomial Distribution (25 Items)"
      ],
      "id": "ecd3b18b"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-binomial\n",
        "#| fig-cap: 'Binomial Distribution: Number of Defective Items in 25 Trials'\n",
        "\n",
        "from scipy.stats import binom\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Binomial distribution parameters\n",
        "n = 25\n",
        "p = 0.15\n",
        "\n",
        "# Calculate probabilities\n",
        "k_values = range(0, n+1)\n",
        "probabilities = [binom.pmf(k, n, p) for k in k_values]\n",
        "\n",
        "# Expected value and standard deviation\n",
        "expected_value = n * p\n",
        "variance = n * p * (1 - p)\n",
        "std_dev = np.sqrt(variance)\n",
        "\n",
        "# Create the plot\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add bars\n",
        "fig.add_trace(go.Bar(\n",
        "    x=list(k_values),\n",
        "    y=probabilities,\n",
        "    marker_color='steelblue',\n",
        "    marker_opacity=0.7,\n",
        "    marker_line_color='navy',\n",
        "    marker_line_width=1,\n",
        "    name='P(X=k)'\n",
        "))\n",
        "\n",
        "# Add expected value line\n",
        "fig.add_vline(\n",
        "    x=expected_value,\n",
        "    line_dash=\"dash\",\n",
        "    line_color=\"red\",\n",
        "    line_width=3,\n",
        "    annotation_text=f\"E[X] = {expected_value}\",\n",
        "    annotation_position=\"top\"\n",
        ")\n",
        "\n",
        "# Add standard deviation bounds\n",
        "fig.add_vline(\n",
        "    x=expected_value - std_dev,\n",
        "    line_dash=\"dot\",\n",
        "    line_color=\"orange\",\n",
        "    line_width=2,\n",
        "    annotation_text=f\"E[X] - σ\",\n",
        "    annotation_position=\"bottom left\"\n",
        ")\n",
        "\n",
        "fig.add_vline(\n",
        "    x=expected_value + std_dev,\n",
        "    line_dash=\"dot\",\n",
        "    line_color=\"orange\",\n",
        "    line_width=2,\n",
        "    annotation_text=f\"E[X] + σ\",\n",
        "    annotation_position=\"bottom right\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': f'Binomial Distribution: n=25, p=0.15<br><sub>E[X] = {expected_value}, σ = {std_dev:.3f}</sub>',\n",
        "        'x': 0.5,\n",
        "        'xanchor': 'center',\n",
        "        'font': {'size': 16}\n",
        "    },\n",
        "    xaxis_title='Number of Defective Items (k)',\n",
        "    yaxis_title='P(X = k)',\n",
        "    xaxis=dict(tickfont=dict(size=12)),\n",
        "    yaxis=dict(tickfont=dict(size=12)),\n",
        "    showlegend=False,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Add grid\n",
        "fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-binomial",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Comparison: Bernoulli vs Binomial Relationship"
      ],
      "id": "0d6ca193"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 9
      },
      "source": [
        "#| label: fig-comparison\n",
        "#| fig-cap: Relationship Between Bernoulli and Binomial Distributions\n",
        "\n",
        "from plotly.subplots import make_subplots\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Create subplots\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\n",
        "        'Single Item (Bernoulli)', 'Multiple Items (Binomial)',\n",
        "        'Expected Values Comparison', 'Variance Comparison'\n",
        "    ),\n",
        "    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n",
        "           [{\"type\": \"bar\"}, {\"type\": \"bar\"}]]\n",
        ")\n",
        "\n",
        "# Plot 1: Bernoulli\n",
        "fig.add_trace(\n",
        "    go.Bar(x=[0, 1], y=[0.85, 0.15], \n",
        "           marker_color=['lightgreen', 'salmon'],\n",
        "           text=['85%', '15%'], textposition='outside',\n",
        "           name='Bernoulli'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Plot 2: Binomial\n",
        "k_vals = list(range(0, 11))  # Show first 11 values for clarity\n",
        "probs = [binom.pmf(k, 25, 0.15) for k in k_vals]\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals, y=probs,\n",
        "           marker_color='steelblue',\n",
        "           name='Binomial'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Plot 3: Expected Values Comparison\n",
        "sample_sizes = [1, 5, 10, 15, 20, 25]\n",
        "expected_vals = [n * 0.15 for n in sample_sizes]\n",
        "fig.add_trace(\n",
        "    go.Bar(x=sample_sizes, y=expected_vals,\n",
        "           marker_color='purple',\n",
        "           text=[f'{val:.2f}' for val in expected_vals],\n",
        "           textposition='outside',\n",
        "           name='E[X]'),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Plot 4: Variance Comparison\n",
        "variances = [n * 0.15 * 0.85 for n in sample_sizes]\n",
        "fig.add_trace(\n",
        "    go.Bar(x=sample_sizes, y=variances,\n",
        "           marker_color='darkorange',\n",
        "           text=[f'{var:.2f}' for var in variances],\n",
        "           textposition='outside',\n",
        "           name='Var(X)'),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    #title_text=\"Bernoulli vs Binomial: Complete Comparison\",\n",
        "    showlegend=False,\n",
        "    height=900\n",
        ")\n",
        "\n",
        "# Update axis labels\n",
        "fig.update_xaxes(title_text=\"Outcome\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Number of Defective Items\", row=1, col=2)\n",
        "fig.update_xaxes(title_text=\"Sample Size (n)\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"Sample Size (n)\", row=2, col=2)\n",
        "\n",
        "fig.update_yaxes(title_text=\"Probability\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Expected Value\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Variance\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-comparison",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---"
      ],
      "id": "a553c0a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary\n",
        "#| tbl-cap: Summary of Bernoulli vs Binomial Distributions\n",
        "\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Create summary data\n",
        "data = {\n",
        "    'Distribution': ['Bernoulli(p=0.15)', 'Binomial(n=25, p=0.15)'],\n",
        "    'Scenario': ['Single item selection', '25 items selection'],\n",
        "    'Possible Values': ['0, 1', '0, 1, 2, ..., 25'],\n",
        "    'Expected Value': ['0.15', '3.75'],\n",
        "    'Variance': ['0.1275', '3.1875'],\n",
        "    'Standard Deviation': ['0.357', '1.785'],\n",
        "    'Formula E[X]': ['p', 'np'],\n",
        "    'Formula Var(X)': ['p(1-p)', 'np(1-p)']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Create table\n",
        "fig = go.Figure(data=[go.Table(\n",
        "    columnwidth=[100, 120, 100, 80, 80, 80, 80, 80],\n",
        "    header=dict(\n",
        "        values=['<b>Distribution</b>', '<b>Scenario</b>', '<b>Possible Values</b>', \n",
        "                '<b>E[X]</b>', '<b>Var(X)</b>', '<b>σ</b>',\n",
        "                '<b>E[X] Formula</b>', '<b>Var(X) Formula</b>'],\n",
        "        fill_color='lightblue',\n",
        "        align='center',\n",
        "        font=dict(size=12, color='black')\n",
        "    ),\n",
        "    cells=dict(\n",
        "        values=[df[col] for col in df.columns],\n",
        "        fill_color=[['white', 'lightgray']*4],\n",
        "        align='center',\n",
        "        font=dict(size=11),\n",
        "        height=40\n",
        "    )\n",
        ")])\n",
        "\n",
        "fig.update_layout(\n",
        "    #title={'text': 'Comparison: Bernoulli vs Binomial Distributions','x': 0.5,'xanchor': 'center','font': {'size': 16}},\n",
        "    margin=dict(l=20, r=20, t=60, b=20),\n",
        "    height=300\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "tbl-summary",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-important}\n",
        "\n",
        "$\\textbf{Bernoulli} \\rightarrow \\text{Binomial Connection:}$\n",
        "\n",
        "- A Binomial distribution is the sum of $n$ independent Bernoulli trials\n",
        "\n",
        "- If $X_1, X_2, \\dots, X_{25}$ are independent $\\text{Bernoulli}(0.15)$, then $X_1 + X_2 + \\cdots + X_{25} \\sim \\text{Binomial}(25, 0.15)$\n",
        "\n",
        "\n",
        "$\\textbf{Scaling Formulas:}$\n",
        "\n",
        "- $\\textbf{Expected Value:}$ $E[\\text{Binomial}] = n \\times E[\\text{Bernoulli}]$ = $25 \\times 0.15 = 3.75$\n",
        "  \n",
        "- $\\textbf{Variance:}$ $\\text{Var}(\\text{Binomial}) = n \\times \\text{Var}(\\text{Bernoulli}) = 25 \\times 0.1275 = 3.1875$\n",
        "\n",
        "\n",
        ":::\n",
        ":::{.callout-tip}\n",
        "- Single inspection: $15\\%$ chance of finding a defect\n",
        "\n",
        "- Batch inspection ($25$ items): Expect $3-4$ defective items typically\n",
        "Acceptable range: $2-6$ defective items would be within $1$ standard deviation\n",
        "\n",
        "- Red flag: Finding 7+ defective items might indicate process issues (beyond 2 $\\sigma$) \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Optional: Conceptual Understanding - SOLUTIONS\n",
        "\n",
        ":::{.callout-important}\n",
        "**Objective**: Deepen understanding of key differences between probability distributions and their applications.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### (a) Binomial vs. Geometric Distributions\n",
        "\n",
        ":::{.problem}\n",
        "Explain the key difference between a Binomial distribution and a Geometric distribution in terms of what they count.\n",
        ":::\n",
        "\n",
        "**Solution:**\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Key Difference: What We Count**\n",
        "\n",
        "| **Distribution** | **What We Count** | **Fixed Parameter** | **Variable** |\n",
        "|------------------|-------------------|---------------------|--------------|\n",
        "| **Binomial** | Number of **successes** | Number of trials (n) | Number of successes |\n",
        "| **Geometric** | Number of **trials** | Until first success | Number of trials |\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "- **Binomial Distribution**: Counts the **number of successes** in a **fixed number** of trials\n",
        "  - Example: \"How many heads in 10 coin flips?\"\n",
        "  - We know we'll flip exactly 10 times, but don't know how many heads\n",
        "\n",
        "- **Geometric Distribution**: Counts the **number of trials needed** to get the **first success**\n",
        "  - Example: \"How many coin flips until the first head?\"\n",
        "  - We know we'll get exactly 1 head, but don't know how many flips it takes\n",
        "\n",
        "### Visual Comparison : Binomial vs Geometric - Fundamental Difference"
      ],
      "id": "b38d8eb6"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "#| label: fig-binomial-vs-geometric\n",
        "#| fig-cap: 'Binomial vs Geometric: What They Count'\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "import numpy as np\n",
        "from scipy.stats import binom, geom\n",
        "\n",
        "# Create subplots\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\n",
        "        'Binomial(n=10, p=0.3): Count Successes', \n",
        "        'Geometric(p=0.3): Count Trials to First Success',\n",
        "        'Example: Binomial Scenario', \n",
        "        'Example: Geometric Scenario'\n",
        "    ),\n",
        "    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n",
        "           [{\"type\": \"table\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Parameters\n",
        "n = 10\n",
        "p = 0.3\n",
        "\n",
        "# Binomial distribution\n",
        "k_vals_binom = list(range(0, n+1))\n",
        "probs_binom = [binom.pmf(k, n, p) for k in k_vals_binom]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_binom, y=probs_binom,\n",
        "           marker_color='steelblue', marker_opacity=0.8,\n",
        "           text=[f'{prob:.3f}' for prob in probs_binom],\n",
        "           textposition='outside',\n",
        "           name='Binomial'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Geometric distribution\n",
        "k_vals_geom = list(range(1, 16))  # Show first 15 trials\n",
        "probs_geom = [geom.pmf(k, p) for k in k_vals_geom]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_geom, y=probs_geom,\n",
        "           marker_color='darkorange', marker_opacity=0.8,\n",
        "           text=[f'{prob:.3f}' if prob > 0.02 else '' for prob in probs_geom],\n",
        "           textposition='outside',\n",
        "           name='Geometric'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Example tables\n",
        "# Binomial scenario\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=['<b>Trial</b>', '<b>Outcome</b>', '<b>Running Count</b>'],\n",
        "                   fill_color='lightblue', align='center'),\n",
        "        cells=dict(values=[\n",
        "            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n",
        "            ['S', 'F', 'S', 'F', 'F', 'S', 'F', 'F', 'S', 'F'],\n",
        "            ['1', '1', '2', '2', '2', '3', '3', '3', '4', '4']\n",
        "        ], fill_color='white', align='center', height=30)\n",
        "    ),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Geometric scenario\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=['<b>Trial</b>', '<b>Outcome</b>', '<b>Status</b>'],\n",
        "                   fill_color='lightyellow', align='center'),\n",
        "        cells=dict(values=[\n",
        "            ['1', '2', '3', '4', '5'],\n",
        "            ['F', 'F', 'F', 'S', '—'],\n",
        "            ['Continue', 'Continue', 'Continue', 'STOP!', 'Done']\n",
        "        ], fill_color='white', align='center', height=30)\n",
        "    ),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    #title_text=\"Binomial vs Geometric: Fundamental Difference\",\n",
        "    showlegend=False,\n",
        "    height=700\n",
        ")\n",
        "\n",
        "# Update axis labels\n",
        "fig.update_xaxes(title_text=\"Number of Successes (k)\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Number of Trials Until First Success\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"P(X = k)\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"P(X = k)\", row=1, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-binomial-vs-geometric",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip}\n",
        "Binomial: \"How many successes in a fixed box of trials?\"\n",
        "\n",
        "Fixed trials, variable successes\n",
        "\n",
        "Geometric: \"How many attempts until first success?\"\n",
        "\n",
        "Fixed successes (1), variable trials\n",
        ":::\n",
        "\n",
        "\n",
        "### (b) Poisson vs. Binomial: When to Use Each\n",
        "\n",
        ":::{.problem}\n",
        "When would you use a Poisson distribution instead of a Binomial distribution?\n",
        ":::\n",
        "\n",
        ":::{.solution}\n",
        "Use Poisson when:\n",
        "\n",
        "- Events occur over time or space at a constant rate\n",
        "\n",
        "- The number of possible events is very large but the probability of each is very small\n",
        "\n",
        "- We don't have a fixed number of trials\n",
        "Examples: arrivals, defects per unit area, accidents per day\n",
        ":::\n",
        "\n",
        ":::{.callout-note icon=false}\n",
        "## **Decision Framework: Poisson vs. Binomial**\n",
        "\n",
        "| **Criterion**         | **Use Binomial**                 | **Use Poisson**                |\n",
        "|-------------------------|----------------------------------|---------------------------------|\n",
        "| **Trials**             | Fixed number ($n$)              | No fixed limit                 |\n",
        "| **Time/Space**         | Not the focus                   | Events over time/space        |\n",
        "| **Probability**        | Moderate $p$                    | Very small $p$                 |\n",
        "| **Rate**               | Not applicable                  | Constant rate ($\\lambda$)      |\n",
        "| **Examples**           | Coin flips, surveys             | Phone calls, defects          |\n",
        ":::\n",
        "\n",
        "## Comparative Examples: Poisson vs Binomial - Choosing the Right Distribution"
      ],
      "id": "531f722a"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 15,
        "fig-height": 10
      },
      "source": [
        "#| label: fig-poisson-vs-binomial\n",
        "#| fig-cap: 'Poisson vs Binomial: When to Use Each'\n",
        "\n",
        "from scipy.stats import poisson\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "# Create subplots\n",
        "fig = make_subplots(\n",
        "    rows=3, cols=2,\n",
        "    subplot_titles=(\n",
        "        'Binomial Example: Survey Responses', 'Poisson Example: Phone Calls',\n",
        "        'When n is Large, p is Small', 'Poisson Approximation',\n",
        "        'Comparison Table', 'Guidelines for Choice'\n",
        "    ),\n",
        "    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n",
        "           [{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n",
        "           [{\"type\": \"table\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Example 1: Binomial - Survey responses\n",
        "n_survey = 20\n",
        "p_survey = 0.15\n",
        "k_vals_survey = list(range(0, n_survey+1))\n",
        "probs_survey = [binom.pmf(k, n_survey, p_survey) for k in k_vals_survey]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_survey, y=probs_survey,\n",
        "           marker_color='steelblue', marker_opacity=0.8,\n",
        "           name='Binomial Survey'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Example 2: Poisson - Phone calls\n",
        "lambda_calls = 3\n",
        "k_vals_calls = list(range(0, 11))\n",
        "probs_calls = [poisson.pmf(k, lambda_calls) for k in k_vals_calls]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_calls, y=probs_calls,\n",
        "           marker_color='darkorange', marker_opacity=0.8,\n",
        "           name='Poisson Calls'),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "# Example 3: Large n, small p Binomial\n",
        "n_large = 1000\n",
        "p_small = 0.003\n",
        "lambda_approx = n_large * p_small  # = 3\n",
        "k_vals_large = list(range(0, 11))\n",
        "probs_binom_large = [binom.pmf(k, n_large, p_small) for k in k_vals_large]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_large, y=probs_binom_large,\n",
        "           marker_color='lightblue', marker_opacity=0.8,\n",
        "           name='Binomial (n=1000, p=0.003)'),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Example 4: Poisson approximation\n",
        "probs_poisson_approx = [poisson.pmf(k, lambda_approx) for k in k_vals_large]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(x=k_vals_large, y=probs_poisson_approx,\n",
        "           marker_color='orange', marker_opacity=0.8,\n",
        "           name='Poisson (λ=3)'),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Comparison table - Fixed version\n",
        "comparison_data = {\n",
        "    'Scenario': ['Survey Responses', 'Phone Calls per Hour', 'Defects in Large Batch'],\n",
        "    'Distribution': ['Binomial(20, 0.15)', 'Poisson(λ=3)', 'Binomial→Poisson'],\n",
        "    'Key Feature': ['Fixed 20 people', 'Time-based events', 'n=1000, p=0.003'],\n",
        "    'What We Count': ['Count \"yes\" responses', 'Count arrivals', 'λ = np = 3'],\n",
        "    'Probability': ['Moderate p=0.15', 'Rare events', 'Very small p']\n",
        "}\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        columnwidth=[150, 120, 140, 130, 110],  # Set specific column widths\n",
        "        header=dict(\n",
        "            values=['<b>Scenario</b>', '<b>Distribution</b>', '<b>Key Feature</b>', '<b>What We Count</b>', '<b>Probability</b>'],\n",
        "            fill_color='lightblue', \n",
        "            align='center',\n",
        "            font=dict(size=12, color='black'),\n",
        "            height=40\n",
        "        ),\n",
        "        cells=dict(\n",
        "            values=[\n",
        "                comparison_data['Scenario'],\n",
        "                comparison_data['Distribution'], \n",
        "                comparison_data['Key Feature'],\n",
        "                comparison_data['What We Count'],\n",
        "                comparison_data['Probability']\n",
        "            ],\n",
        "            fill_color='white', \n",
        "            align='center', \n",
        "            height=45,  # Increased height for better readability\n",
        "            font=dict(size=11)\n",
        "        )\n",
        "    ),\n",
        "    row=3, col=1\n",
        ")\n",
        "\n",
        "# Guidelines table\n",
        "guidelines_data = [\n",
        "    ['Fixed trials?', 'Use Binomial', 'Use Poisson'],\n",
        "    ['Time/space component?', 'No', 'Yes'],\n",
        "    ['Probability size?', 'Moderate (0.1-0.9)', 'Very small (<0.1)'],\n",
        "    ['Sample size?', 'Small to moderate', 'Very large'],\n",
        "    ['Rate constant?', 'Not applicable', 'Yes']\n",
        "]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=['<b>Question</b>', '<b>Binomial</b>', '<b>Poisson</b>'],\n",
        "                   fill_color='lightyellow', align='center'),\n",
        "        cells=dict(values=[[row[0] for row in guidelines_data[1:]], \n",
        "                          [row[1] for row in guidelines_data[1:]], \n",
        "                          [row[2] for row in guidelines_data[1:]]],\n",
        "                  fill_color='white', align='center', height=35)\n",
        "    ),\n",
        "    row=3, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    #title_text=\"Poisson vs Binomial: Choosing the Right Distribution\",\n",
        "    showlegend=False,\n",
        "    height=1000\n",
        ")\n",
        "\n",
        "# Add axis labels\n",
        "fig.update_xaxes(title_text=\"Number of Responses\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Number of Calls\", row=1, col=2)\n",
        "fig.update_xaxes(title_text=\"Number of Defects\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"Number of Events\", row=2, col=2)\n",
        "\n",
        "fig.update_yaxes(title_text=\"Probability\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Probability\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Probability\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-poisson-vs-binomial",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-warning}\n",
        "**Common Mistake**\n",
        "\n",
        "- Don't use Poisson just because events are \"rare.\" The key criteria are:\n",
        "\n",
        "- No fixed number of trials\n",
        "  \n",
        "- Events over time/space\n",
        "\n",
        "- Constant rate ($\\lambda$)\n",
        "\n",
        "**A rare event in a fixed number of trials is still Binomial!**\n",
        ":::\n",
        "\n",
        "### (c) Variance Maximization in Binomial Distribution\n",
        ":::{.problem}\n",
        "If  $X \\sim \\text{Binomial}(n, p)$, under what conditions would the variance be maximized?\n",
        ":::\n",
        "\n",
        ":::{.solution}\n",
        "For a Binomial distribution: \n",
        "$\\text{Var}(X) = np(1-p)$\n",
        "\n",
        "For **fixed** $n$, variance is maximized when $p(1−p)$ is maximized.\n",
        "\n",
        "**Approach**:\n",
        "\n",
        "Taking the derivative with respect to $p$:\n",
        "\n",
        "$\\frac{d}{dp} \\bigl[ p(1-p) \\bigr] =\n",
        "\\frac{d}{dp} \\bigl[ p - p^2 \\bigr] =\n",
        "1 - 2p$\n",
        "\n",
        "Setting equal to zero:\n",
        "\n",
        "$1−2p=0 \\quad \\implies \\boxed{p = 0.5}$\n",
        "\n",
        "Second derivative $= −2<0$, confirming this is a **maximum**.\n",
        "\n",
        "The variance is maximized when $p=0.5$ (fair coin scenario).\n",
        ":::\n",
        "\n",
        "### Visualization of Variance vs. Probability"
      ],
      "id": "76e5985c"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 14,
        "fig-height": 8
      },
      "source": [
        "#| label: fig-variance-maximization\n",
        "#| fig-cap: 'Binomial Variance Maximization: Effect of p'\n",
        "\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "# Create subplots\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=2,\n",
        "    subplot_titles=(\n",
        "        'Variance vs. Probability (p)', 'Distributions at Different p Values',\n",
        "        'Expected Value vs. Probability', 'Coefficient of Variation'\n",
        "    )\n",
        ")\n",
        "\n",
        "# Parameters\n",
        "n = 20\n",
        "p_vals = np.linspace(0.01, 0.99, 100)\n",
        "variances = n * p_vals * (1 - p_vals)\n",
        "expected_vals = n * p_vals\n",
        "cv_vals = np.sqrt(variances) / expected_vals  # Coefficient of variation\n",
        "\n",
        "# Plot 1: Variance vs p\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=p_vals, y=variances,\n",
        "               mode='lines', line=dict(color='blue', width=3),\n",
        "               name='Variance'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Add maximum point\n",
        "max_var = n * 0.5 * 0.5\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[0.5], y=[max_var],\n",
        "               mode='markers', marker=dict(color='red', size=12),\n",
        "               name='Maximum at p=0.5'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Plot 2: Different distributions\n",
        "p_examples = [0.1, 0.3, 0.5, 0.7, 0.9]\n",
        "colors = ['purple', 'blue', 'red', 'orange', 'green']\n",
        "\n",
        "for i, (p_ex, color) in enumerate(zip(p_examples, colors)):\n",
        "    k_vals = list(range(0, n+1))\n",
        "    probs = [binom.pmf(k, n, p_ex) for k in k_vals]\n",
        "    variance_ex = n * p_ex * (1 - p_ex)\n",
        "    \n",
        "    fig.add_trace(\n",
        "        go.Scatter(x=k_vals, y=probs,\n",
        "                   mode='lines+markers',\n",
        "                   line=dict(color=color, width=2),\n",
        "                   name=f'p={p_ex}, Var={variance_ex:.2f}'),\n",
        "        row=1, col=2\n",
        "    )\n",
        "\n",
        "# Plot 3: Expected value vs p\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=p_vals, y=expected_vals,\n",
        "               mode='lines', line=dict(color='green', width=3),\n",
        "               name='Expected Value'),\n",
        "    row=2, col=1\n",
        ")\n",
        "\n",
        "# Plot 4: Coefficient of variation\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=p_vals, y=cv_vals,\n",
        "               mode='lines', line=dict(color='purple', width=3),\n",
        "               name='CV = σ/μ'),\n",
        "    row=2, col=2\n",
        ")\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    #title_text=\"Binomial Distribution: Variance Analysis (n=20)\",\n",
        "    showlegend=True,\n",
        "    height=700\n",
        ")\n",
        "\n",
        "# Update axis labels\n",
        "fig.update_xaxes(title_text=\"Probability (p)\", row=1, col=1)\n",
        "fig.update_xaxes(title_text=\"Number of Successes\", row=1, col=2)\n",
        "fig.update_xaxes(title_text=\"Probability (p)\", row=2, col=1)\n",
        "fig.update_xaxes(title_text=\"Probability (p)\", row=2, col=2)\n",
        "\n",
        "fig.update_yaxes(title_text=\"Variance\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"P(X = k)\", row=1, col=2)\n",
        "fig.update_yaxes(title_text=\"Expected Value\", row=2, col=1)\n",
        "fig.update_yaxes(title_text=\"Coefficient of Variation\", row=2, col=2)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-variance-maximization",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Intuitive Understanding of Variance Maximization"
      ],
      "id": "e2f9a36e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 12,
        "fig-height": 6
      },
      "source": [
        "#| label: fig-proof-illustration\n",
        "#| fig-cap: 'Why p = 0.5 Maximizes Variance: Mathematical Intuition'\n",
        "\n",
        "# Create visualization showing why p=0.5 maximizes variance\n",
        "fig = make_subplots(\n",
        "    rows=1, cols=2,\n",
        "    subplot_titles=(\n",
        "        'Function p(1-p) and Its Maximum', 'Intuitive Explanation'\n",
        "    ),\n",
        "    specs=[[{\"type\": \"scatter\"}, {\"type\": \"table\"}]]\n",
        ")\n",
        "\n",
        "# Plot the function p(1-p)\n",
        "p_fine = np.linspace(0, 1, 1000)\n",
        "variance_function = p_fine * (1 - p_fine)\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=p_fine, y=variance_function,\n",
        "               mode='lines', line=dict(color='blue', width=4),\n",
        "               name='p(1-p)'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Add maximum point\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[0.5], y=[0.25],\n",
        "               mode='markers', marker=dict(color='red', size=15),\n",
        "               name='Maximum at p=0.5'),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Add tangent line at maximum (horizontal, slope = 0)\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=0.3, y0=0.25, x1=0.7, y1=0.25,\n",
        "    line=dict(color=\"red\", width=2, dash=\"dash\"),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "# Intuitive explanation table\n",
        "explanation_data = [\n",
        "    ['When p is very small (near 0)', 'Almost no successes', 'Low variance'],\n",
        "    ['When p is very large (near 1)', 'Almost all successes', 'Low variance'], \n",
        "    ['When p = 0.5', 'Maximum uncertainty', 'High variance'],\n",
        "    ['reason', 'p(1-p) is maximized', 'Derivative = 0'],\n",
        "    ['Intuitive reason', 'Equal chance success/failure', 'Maximum uncertainty']\n",
        "]\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Table(\n",
        "        header=dict(values=['<b>Scenario</b>', '<b>Outcome Pattern</b>', '<b>Variance Level</b>'],\n",
        "                   fill_color='lightblue', align='center'),\n",
        "        cells=dict(values=[[row[0] for row in explanation_data], \n",
        "                          [row[1] for row in explanation_data], \n",
        "                          [row[2] for row in explanation_data]],\n",
        "                  fill_color='white', align='center', height=40)\n",
        "    ),\n",
        "    row=1, col=2\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    #title_text=\"Mathematical and Intuitive Understanding of Variance Maximization\",\n",
        "    showlegend=True,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "fig.update_xaxes(title_text=\"Probability (p)\", row=1, col=1)\n",
        "fig.update_yaxes(title_text=\"p(1-p)\", row=1, col=1)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-proof-illustration",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-important}\n",
        "**Key Insights**\n",
        "\n",
        "**Maximum:** $p=0.5$ maximizes $p(1−p)$ for any fixed $n$\n",
        "\n",
        "**Intuitive Explanation:** Maximum uncertainty occurs when success and failure are equally likely\n",
        "\n",
        "**Practical Meaning:** A fair coin (50-50) has the highest variability in outcomes\n",
        "\n",
        "Extremes: When $p$ approaches $0$ or $1$, outcomes become predictable (low variance)\n",
        ":::"
      ],
      "id": "bbe361f8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/narjesmathlouthi/Desktop/PSTAT5A/web/PSTAT5A/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}